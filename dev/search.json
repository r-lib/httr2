[{"path":"https://httr2.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 httr2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://httr2.r-lib.org/dev/articles/httr2.html","id":"create-a-request","dir":"Articles","previous_headings":"","what":"Create a request","title":"httr2","text":"httr2, start creating request. ’re familiar httr, big change: httr submit request, immediately receiving response. explicit request object makes easier build complex request piece piece works well pipe. Every request starts URL: , instead external website, use test server ’s built-httr2 . ensures vignette work regardless run . can see exactly request send server dry run: first line request contains three important pieces information: HTTP method, verb tells server want . ’s GET, common verb, indicating want get resource. verbs include POST, create new resource, PUT, replace existing resource, DELETE, delete resource. path, URL stripped details server already knows, .e. protocol (http https), host (localhost), port (33835). version HTTP protocol. unimportant purposes ’s handled lower level. following lines specify HTTP headers, series name-value pairs separated :. headers request automatically added httr2, can override add req_headers(): Header names case-insensitive, servers ignore headers don’t understand. headers finish blank line followed body. requests (like GET requests) don’t body, let’s add one see happens. req_body_*() functions provide variety ways add data body. ’ll use req_body_json() add data encoded JSON: ’s changed? method changed GET POST. POST standard method sending data website, automatically used whenever add body. Use req_method() use different method. two new headers: Content-Type Content-Length. tell server interpret body — ’s encoded JSON 15 bytes long. body, consisting JSON. Different servers want data encoded differently httr2 provides selection common formats. example, req_body_form() uses encoding used submit form web browser: req_body_multipart() uses multipart encoding particularly important need send larger amounts data complete files: need send data encoded different form, can use req_body_raw() add data body set Content-Type header.","code":"req <- request(example_url()) req #> <httr2_request> #> GET http://127.0.0.1:33835/ #> Body: empty req |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: 127.0.0.1:33835 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 req |>   req_headers(     Name = \"Hadley\",     `Shoe-Size` = \"11\",     Accept = \"application/json\"   ) |>   req_dry_run() #> GET / HTTP/1.1 #> accept: application/json #> accept-encoding: deflate, gzip, br, zstd #> host: 127.0.0.1:33835 #> name: Hadley #> shoe-size: 11 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 req |>   req_body_json(list(x = 1, y = \"a\")) |>   req_dry_run() #> POST / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 15 #> content-type: application/json #> host: 127.0.0.1:33835 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> { #>   \"x\": 1, #>   \"y\": \"a\" #> } req |>   req_body_form(x = \"1\", y = \"a\") |>   req_dry_run() #> POST / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 7 #> content-type: application/x-www-form-urlencoded #> host: 127.0.0.1:33835 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> x=1&y=a req |>   req_body_multipart(x = \"1\", y = \"a\") |>   req_dry_run() #> POST / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 246 #> content-type: multipart/form-data; boundary=------------------------Pdoty5bYvHWTBtY6IyKwAd #> host: 127.0.0.1:33835 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> --------------------------Pdoty5bYvHWTBtY6IyKwAd #> Content-Disposition: form-data; name=\"x\" #>  #> 1 #> --------------------------Pdoty5bYvHWTBtY6IyKwAd #> Content-Disposition: form-data; name=\"y\" #>  #> a #> --------------------------Pdoty5bYvHWTBtY6IyKwAd--"},{"path":"https://httr2.r-lib.org/dev/articles/httr2.html","id":"perform-a-request-and-fetch-the-response","dir":"Articles","previous_headings":"","what":"Perform a request and fetch the response","title":"httr2","text":"actually perform request fetch response back server, call req_perform(): can see simulation httr2 actually received resp_raw(): HTTP response similar structure HTTP request. first line gives version HTTP used, status code ’s optionally followed short description. headers, followed blank line, followed body. majority responses body, unlike requests. can extract data response using resp_() functions: resp_status() returns status code resp_status_desc() returns description: can extract headers resp_headers() specific header resp_header(): Headers case insensitive: can extract body various forms using resp_body_*() family functions. Since response returns JSON can use resp_body_json(): Responses status codes 4xx 5xx HTTP errors. httr2 automatically turns R errors: another important difference httr, required explicitly call httr::stop_for_status() turn HTTP errors R errors. can revert httr behaviour req_error(req, is_error = ~ FALSE).","code":"req <- request(example_url()) |> req_url_path(\"/json\") resp <- req |> req_perform() resp #> <httr2_response> #> GET http://127.0.0.1:33835/json #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (407 bytes) resp |> resp_raw() #> HTTP/1.1 200 OK #> Date: Fri, 04 Apr 2025 12:47:44 GMT #> Content-Type: application/json #> Content-Length: 407 #> ETag: \"de760e6d\" #>  #> { #>   \"firstName\": \"John\", #>   \"lastName\": \"Smith\", #>   \"isAlive\": true, #>   \"age\": 27, #>   \"address\": { #>     \"streetAddress\": \"21 2nd Street\", #>     \"city\": \"New York\", #>     \"state\": \"NY\", #>     \"postalCode\": \"10021-3100\" #>   }, #>   \"phoneNumbers\": [ #>     { #>       \"type\": \"home\", #>       \"number\": \"212 555-1234\" #>     }, #>     { #>       \"type\": \"office\", #>       \"number\": \"646 555-4567\" #>     } #>   ], #>   \"children\": [], #>   \"spouse\": null #> } resp |> resp_status() #> [1] 200 resp |> resp_status_desc() #> [1] \"OK\" resp |> resp_headers() #> <httr2_headers> #> Date: Fri, 04 Apr 2025 12:47:44 GMT #> Content-Type: application/json #> Content-Length: 407 #> ETag: \"de760e6d\" resp |> resp_header(\"Content-Length\") #> [1] \"407\" resp |> resp_header(\"ConTEnT-LeNgTH\") #> [1] \"407\" resp |> resp_body_json() |> str() #> List of 8 #>  $ firstName   : chr \"John\" #>  $ lastName    : chr \"Smith\" #>  $ isAlive     : logi TRUE #>  $ age         : int 27 #>  $ address     :List of 4 #>   ..$ streetAddress: chr \"21 2nd Street\" #>   ..$ city         : chr \"New York\" #>   ..$ state        : chr \"NY\" #>   ..$ postalCode   : chr \"10021-3100\" #>  $ phoneNumbers:List of 2 #>   ..$ :List of 2 #>   .. ..$ type  : chr \"home\" #>   .. ..$ number: chr \"212 555-1234\" #>   ..$ :List of 2 #>   .. ..$ type  : chr \"office\" #>   .. ..$ number: chr \"646 555-4567\" #>  $ children    : list() #>  $ spouse      : NULL request(example_url()) |>   req_url_path(\"/status/404\") |>   req_perform() #> Error in `req_perform()`: #> ! HTTP 404 Not Found.  request(example_url()) |>   req_url_path(\"/status/500\") |>   req_perform() #> Error in `req_perform()`: #> ! HTTP 500 Internal Server Error."},{"path":"https://httr2.r-lib.org/dev/articles/httr2.html","id":"control-the-request-process","dir":"Articles","previous_headings":"","what":"Control the request process","title":"httr2","text":"number req_ functions don’t directly affect HTTP request instead control overall process submitting request handling response. include: req_cache() sets cache repeated requests return results, can avoid trip server. req_throttle() automatically add small delay request can avoid hammering server many requests. req_retry() sets retry strategy request either fails get transient HTTP error, ’ll automatically retry short delay. details see documentation, well examples usage real APIs vignette(\"wrapping-apis\").","code":""},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"oauth-basics","dir":"Articles","previous_headings":"","what":"OAuth basics","title":"OAuth","text":"OAuth broad framework many different variants, called flows, makes hard provide sweeping generalisations, basic idea OAuth create hierarchy increasingly specific shorter-lived credentials, impact credential lost small possible. longest lived powerful credential typically user name password. people don’t change passwords regularly, often (advice) reuse password multiple websites. user name password, total control account; can even use change password actual user can’t log . means programmer never want touch user name-password pairs ’re lost stolen, give wide access. Avoiding problem lead creation OAuth. basic idea instead package asking user give user name password, instead ask log give package permission use API behalf. API gives permission form access token essentially random string numbers letters, e.g. UfNlXaEog03hdRPTUPpEInEiIW01jI1WcjOB. access token short lived, lasting maybe days, bound specified scope access. access token big advantages user name password: ’s short-lived ’s lost stolen, ’s limited amount time can abused. limited scope, even stolen, can’t used something particularly nefarious like changing password contact details. ’s bound specific application, can invalidated (cancelled) without affecting uses. access token can use authenticate API passing bearer token Authorization header, can req_auth_bearer_token(). However, cases want let httr2 manage calling one req_oauth_ functions ’ll talk shortly. One reasons want httr2 manage tokens access tokens short lived, ’re often accompanied refresh token. refresh token lasts longer amount time one job: allows get new access token previous one expires. need look refresh token little carefully access token. particular, never include refresh token HTTP request ’s job access token. Overall leads hierarchy credentials weakest strongest: access token usually lasts couple hours needs submitted every request. refresh token lasts days weeks ’s designed stored locally can regenerate access tokens. (’ll talk Caching, .) user name + password gives access everything code never touch ! Now ’ve got basic idea OAuth, lets talk details.","code":""},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"clients","dir":"Articles","previous_headings":"","what":"Clients","title":"OAuth","text":"first step working OAuth API create application client. ’s called application client wider world OAuth usually used web, phone, tv app, “app” going R package. reason, httr2 calls application client client, many APIs call OAuth application. create client, ’ll need first register developer account API’s website. cases easy, totally automated, takes couple minutes. give access sort developer portal can use register new OAuth app (aka client). process varies API API (’s normal spend time hunting docs settings), end ’ll get client id (another random string numbers letters). Sometimes client id need, can create httr2 client oauth_client(), e.g.: call oauth_client() also includes name token_url. name human-facing, typically package (thing prompted create client). bunch apps ’ve used testing, ’ve used name hadley-oauth-test-2 remind app client corresponds . token_url points URL ’s used obtain access token. ’ll need find documentation API ’re wrapping; typically found section describes OAuth process endpoint returns access token. Don’t surprised endpoint feels different rest API; auth often implemented third-party package slightly different conventions rest API.","code":"client <- oauth_client(   id = \"28acfec0674bb3da9f38\",   token_url = \"https://github.com/login/oauth/access_token\",   name = \"hadley-oauth-test-2\" )"},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"client-secret","dir":"Articles","previous_headings":"Clients","what":"Client secret","title":"OAuth","text":"cases, however, API also require client secret. called secret, ’s typically important keep secret two reasons: ’s typically easy create new app developer website stealing wouldn’t save much time. ’s unusual OAuth client able anything right, stealing secret doesn’t much benefit. means unless paid app given private information creating , ’s ok embed client package. said, httr2 provides tooling obfuscate client secret client secret isn’t directly embedded source code, hence vulnerable scraping. obfuscate string, call obfuscate(), copy paste result package. example, client secret “secret”, ’d call obfuscate() ’d copy paste obfuscated(\"B4Evdd5x4wl0XTWvtTpuGaw7nM7GEg\") client specification. ’s complete client specification GitHub looks like, using real app created specifically vignette: can certainly uncover client secret experienced R programmer willing spend bit time experimenting, ’m pretty sure ’d easy just create app GitHub.","code":"obfuscate(\"secret\") #> obfuscated(\"pKdu-F6GFVGQFYFSQbOcg15HRLsnAQ\") client <- oauth_client(   id = \"28acfec0674bb3da9f38\",   secret = obfuscated(\"J9iiGmyelHltyxqrHXW41ZZPZamyUNxSX1_uKnvPeinhhxET_7FfUs2X0LLKotXY2bpgOMoHRCo\"),   token_url = \"https://github.com/login/oauth/access_token\",   name = \"hadley-oauth-test\" )"},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"packaging","dir":"Articles","previous_headings":"Clients","what":"Packaging","title":"OAuth","text":"recommend wrapping client creation function package, e.g.: ’ll need order run tests package, ’ll probably also want use default client users. cases, necessary user create app matching client (e.g. rate limits applied app, user), much less user friendly avoid possible. said, always provide way user supply client bundle default. can see example googledrive package.","code":"github_client <- function() {   oauth_client(     id = \"28acfec0674bb3da9f38\",     secret = obfuscated(\"J9iiGmyelHltyxqrHXW41ZZPZamyUNxSX1_uKnvPeinhhxET_7FfUs2X0LLKotXY2bpgOMoHRCo\"),     token_url = \"https://github.com/login/oauth/access_token\",     name = \"hadley-oauth-test\"   ) }"},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"authorization-code-flow","dir":"Articles","previous_headings":"","what":"Authorization code flow","title":"OAuth","text":"client need use flow order get token. ’ll need read docs API figure flows supports, common authorization code2 flow, works something like : httr2 opens browser using authorization URL provided API. URL includes parameters identify app scope access ’re looking (e.g. tweet.read, userinfo.write). user logs using user name password (hopefully using password manager) approves request. API sends authorization code back httr2 using callback URL supplied initial request. httr2 sends authorization code token URL get access token. httr2 flow implemented pair functions: oauth_flow_auth_code() req_oauth_auth_code(). Start oauth_flow_auth_code() check parameters correctly specified, use req_oauth_auth_code() authenticate requests. two steps described following sections.","code":""},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"creating-a-token","dir":"Articles","previous_headings":"Authorization code flow","what":"Creating a token","title":"OAuth","text":"oauth_flow_auth_code() best way verify ’ve correctly specified parameters client auth_url, without depending correctly understanding part API. example, get token access GitHub API (using client defined ) code: flow can’t used inside vignette ’s designed specifically interactive use, run print token, ’ll see something like : ’s much see httr2 automatically redacts access token (used perform actions behalf user). call oauth_flow_auth_code() succeeds ’ve got everything set correctly can proceed next step. Otherwise, ’ll get HTTP error. ’re lucky, error informative help figure want went wrong. However, cases, ’ll need carefully double check ’ve correctly copied pasted client id secret, check ’ve supplied correct authorization token urls (auth_url token_url). docs multiple candidates ’re unclear , ’ll need systematic experimentation.","code":"token <- oauth_flow_auth_code(   client = client,   auth_url = \"https://github.com/login/oauth/authorize\" ) token #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> scope: ''"},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"authenticating-a-request","dir":"Articles","previous_headings":"Authorization code flow","what":"Authenticating a request","title":"OAuth","text":"Initial configuration time ’ll see httr2_token object ’ll generally want rely httr2 manage tokens . ’ll req_oauth_auth_code(). check ’s working correctly, recommend finding simplest possible API endpoint test . good place start endpoint provides information “current” user, API provides one. example, GitHub API provides GET endpoint /user returns information current user. make request endpoint without authentication, ’ll get error: can authenticate request req_oauth_auth_code(), using arguments previous call oauth_flow_auth_code(): run code, ’ll see something like , obviously contain information , .","code":"req <- request(\"https://api.github.com/user\") req |>   req_perform() #> Error in `req_perform()`: #> ! HTTP 401 Unauthorized. req |>   req_oauth_auth_code(     client = github_client(),     auth_url = \"https://github.com/login/oauth/authorize\"   ) |>   req_perform() |>   resp_body_json() |>   str() #> List of 32 #>  $ login        : chr \"hadley\" #>  $ id           : int 4196 #>  $ node_id      : chr \"MDQ6VXNlcjQxOTY=\" #>  $ avatar_url   : chr \"https://avatars.githubusercontent.com/u/4196?v=4\" #>  $ gravatar_id  : chr \"\" #>  $ url          : chr \"https://api.github.com/users/hadley\" #>  $ html_url     : chr \"https://github.com/hadley\" #>  ... #>  $ type         : chr \"User\" #>  $ site_admin   : logi FALSE #>  $ name         : chr \"Hadley Wickham\" #>  $ company      : chr \"@posit-pbc\" #>  $ blog         : chr \"http://hadley.nz\" #>  $ location     : chr \"Houston, TX\""},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"caching","dir":"Articles","previous_headings":"Authorization code flow","what":"Caching","title":"OAuth","text":"two big reasons allow httr2 manage tokens . first httr2 automatically refresh token ’s expired. second cross-session caching, described . default, OAuth token cached memory. means need authenticate current session, ’ll need re-authenticate restart R. cases, may want save tokens (refresh access) can used across sessions. easy (just set cache_disk = TRUE) need think consequences saving refresh token disk. httr2 best can save credentials securely. stored local cache directory (oauth_cache_path()) accessible current user, encrypted hard package httr2 read. However, ’s way prevent R code using httr2 access , choose cache tokens, inform user give ability opt-. httr2 automatically deletes cached tokens older 30 days whenever ’s loaded. means ’ll need re-auth least month, prevents tokens hanging around disk long ’ve forgotten created . can see clients cached tokens looking cache directory used httr2: client gets subdirectory named using client name, turn caching , ’s particularly important give client good name user can easily tell package tokens belong .","code":"dir(oauth_cache_path(), recursive = TRUE)"},{"path":"https://httr2.r-lib.org/dev/articles/oauth.html","id":"other-flows","dir":"Articles","previous_headings":"","what":"Other flows","title":"OAuth","text":"wrapping API, ’ll need carefully read documentation figure flows provides. possible ’ll want use authorization code flow since generally provides best experience, ’s available ’ll need carefully consider others. Currently, httr2 supports following flows: req_oauth_device() uses “device” flow designed devices like TVs don’t easy way enter data. also works well console. req_oauth_client_credentials() req_oauth_bearer_jwt() often needed service accounts, accounts represent automated services, people, often used non-interactive environments. req_oauth_password() exchanges user name password access token. req_oauth_refresh() works directly refresh token already . ’s useful testing automation. httr2 doesn’t support implicit grant flow. historically important now mostly deprecated never particularly good fit R relies technique returning access token reliably works inside web browser. Regardless flow use, ’ll need follow process example : first figure get token using oauth_flow_ function, actually use oauth request, calling matching req_oauth_ function. One additional wrinkle many APIs don’t implement flow exactly way spec httr2’s built-flows might work . initial attempt doesn’t work, ’re going need sleuthing. going painful, unfortunately ’s way around . recommend wrapping httr2 code with_verbosity() can see exactly httr2 sending server. ’ll need carefully compare API documentation play “spot difference”. ’re welcome file issue ’ll best help .","code":""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"faker-api","dir":"Articles","previous_headings":"","what":"Faker API","title":"Wrapping APIs","text":"’ll start simple API, faker API, provides collection techniques generating fake data. start writing sort functions might put package, ’ll perform request just see basics work:","code":"# We start by creating a request that uses the base API url req <- request(\"https://fakerapi.it/api/v1\") resp <- req |>   # Then we add on the images path   req_url_path_append(\"images\") |>   # Add query parameters _width and _quantity   req_url_query(`_width` = 380, `_quantity` = 1) |>   req_perform()  # The result comes back as JSON resp |> resp_body_json() |> str() #> List of 6 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ locale: chr \"en_US\" #>  $ seed  : NULL #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 3 #>   .. ..$ title      : chr \"Blanditiis quos in error.\" #>   .. ..$ description: chr \"Eveniet error quasi sunt et occaecati corporis. Alias sit repellendus quo odio. Commodi atque dolorem repellend\"| __truncated__ #>   .. ..$ url        : chr \"https://picsum.photos/380/480\""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"errors","dir":"Articles","previous_headings":"Faker API","what":"Errors","title":"Wrapping APIs","text":"’s always worth little early experimentation see get useful information errors. httr2 defaults get way , retrieve unsuccessful HTTP response, automatically get error prevents inspecting body: However, can access last response (successful ) last_response(): doesn’t look like ’s anything useful . Sometimes useful info returned headers, let’s check: doesn’t look like ’re getting useful information, can leave req_error() default . ’ll another go later API provide details.","code":"req |>   req_url_path_append(\"invalid\") |>   req_perform() #> Error in `req_perform()`: #> ! HTTP 400 Bad Request. resp <- last_response() resp |> resp_body_json() #> $message #> [1] \"Resource invalid not supported in version v1\" resp |> resp_headers() #> <httr2_headers> #> Server: nginx #> Content-Type: application/json #> Transfer-Encoding: chunked #> Connection: keep-alive #> X-Powered-By: PHP/8.3.8 #> Cache-Control: no-cache, private #> Date: Fri, 04 Apr 2025 12:47:51 GMT #> X-RateLimit-Limit: 60 #> X-RateLimit-Remaining: 56 #> Access-Control-Allow-Origin: *"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"user-agent","dir":"Articles","previous_headings":"Faker API","what":"User agent","title":"Wrapping APIs","text":"’re wrapping code package, ’s considered polite set user agent, , package accidentally something horribly wrong, developers website can figure reach . can req_user_agent() function:","code":"req |>   req_user_agent(\"my_package_name (http://my.package.web.site)\") |>   req_dry_run() #> GET /api/v1 HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: fakerapi.it #> user-agent: my_package_name (http://my.package.web.site)"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"core-request-function","dir":"Articles","previous_headings":"Faker API","what":"Core request function","title":"Wrapping APIs","text":"’ve made successful requests, ’s worth seeing can figure general pattern can wrap function become core package. faker, spent little time documentation noting commonalities: Every URL form https://fakerapi./api/v1/{resource}, data passed resource query parameters. parameters start _. Every resource three common query parameters: _locale, _quantity, _seed. endpoints return JSON data. led construct following function: ’ve made important choices : ’ve decided supply default values quantity locale parameters. makes function easier demo vignette. ’ve used default NULL seed argument. req_url_query() automatically drop NULL arguments means default value sent API, read function definition can still see seed accepted. automatically prefix query parameters _ argument names starting _ hard type R. function generates request, performs , extracts body response. works well simple cases, complex APIs might want return request object can modified performed. also used one cool trick: req_url_query() uses dynamic dots, can use !!! convert (e.g.) req_url_query(req, !!!list(`_quantity` = 1, `_locale` = \"en_US\")) req_url_query(req, `_quantity` = 1, `_locale` = \"en_US\").","code":"faker <- function(resource, ..., quantity = 1, locale = \"en_US\", seed = NULL) {   params <- list(     ...,     quantity = quantity,     locale = locale,     seed = seed   )   names(params) <- paste0(\"_\", names(params))    request(\"https://fakerapi.it/api/v1\") |>     req_url_path_append(resource) |>     req_url_query(!!!params) |>     req_user_agent(\"my_package_name (http://my.package.web.site)\") |>     req_perform() |>     resp_body_json() }  str(faker(\"images\", width = 300)) #> List of 6 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ locale: chr \"en_US\" #>  $ seed  : NULL #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 3 #>   .. ..$ title      : chr \"Et voluptas qui nobis.\" #>   .. ..$ description: chr \"Quia rerum atque deleniti vitae mollitia. Itaque rerum aliquam et cumque ducimus non. Recusandae beatae debitis\"| __truncated__ #>   .. ..$ url        : chr \"https://picsum.photos/300/480\""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"wrapping-individual-endpoints","dir":"Articles","previous_headings":"Faker API","what":"Wrapping individual endpoints","title":"Wrapping APIs","text":"faker() quite general — ’s good tool package developer can read faker documentation translate function call. ’s friendly package user might know anything web APIs. typically next step process wrap individual endpoints functions. example, let’s take persons endpoint three additional parameters: gender (male female), birthday_start, birthday_end. simple wrapper start something like : make user friendly checking input types, returning result tibble. quick dirty conversion using purrr; depending needs use base R code tidyr::hoist(). next steps export document function; ’ll leave .","code":"faker_person <- function(gender = NULL, birthday_start = NULL, birthday_end = NULL, quantity = 1, locale = \"en_US\", seed = NULL) {   faker(     \"persons\",     gender = gender,     birthday_start = birthday_start,     birthday_end = birthday_end,     quantity = quantity,     locale = locale,     seed = seed   ) } str(faker_person(\"male\")) #> List of 6 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ locale: chr \"en_US\" #>  $ seed  : NULL #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 10 #>   .. ..$ id       : int 1 #>   .. ..$ firstname: chr \"Joany\" #>   .. ..$ lastname : chr \"Kling\" #>   .. ..$ email    : chr \"lindgren.zander@shanahan.com\" #>   .. ..$ phone    : chr \"+13173043318\" #>   .. ..$ birthday : chr \"1970-10-23\" #>   .. ..$ gender   : chr \"male\" #>   .. ..$ address  :List of 10 #>   .. .. ..$ id            : int 1 #>   .. .. ..$ street        : chr \"49240 Ullrich Cliffs Suite 467\" #>   .. .. ..$ streetName    : chr \"Collins Shoals\" #>   .. .. ..$ buildingNumber: chr \"277\" #>   .. .. ..$ city          : chr \"Emelyborough\" #>   .. .. ..$ zipcode       : chr \"86851\" #>   .. .. ..$ country       : chr \"Luxembourg\" #>   .. .. ..$ country_code  : chr \"LU\" #>   .. .. ..$ latitude      : num 17.4 #>   .. .. ..$ longitude     : num 148 #>   .. ..$ website  : chr \"http://kiehn.com\" #>   .. ..$ image    : chr \"http://placeimg.com/640/480/people\" library(purrr)  faker_person <- function(gender = NULL, birthday_start = NULL, birthday_end = NULL, quantity = 1, locale = \"en_US\", seed = NULL) {   if (!is.null(gender)) {     gender <- match.arg(gender, c(\"male\", \"female\"))   }   if (!is.null(birthday_start)) {     if (!inherits(birthday_start, \"Date\")) {       stop(\"`birthday_start` must be a date\")     }     birthday_start <- format(birthday_start, \"%Y-%m-%d\")   }   if (!is.null(birthday_end)) {     if (!inherits(birthday_end, \"Date\")) {       stop(\"`birthday_end` must be a date\")     }     birthday_end <- format(birthday_end, \"%Y-%m-%d\")   }    json <- faker(     \"persons\",     gender = gender,     birthday_start = birthday_start,     birthday_end = birthday_end,     quantity = quantity,     locale = locale,     seed = seed   )    tibble::tibble(     firstname = map_chr(json$data, \"firstname\"),     lastname = map_chr(json$data, \"lastname\"),     email = map_chr(json$data, \"email\"),     gender = map_chr(json$data, \"gender\")   ) } faker_person(\"male\", quantity = 5) #> # A tibble: 5 × 4 #>   firstname lastname  email                      gender #>   <chr>     <chr>     <chr>                      <chr>  #> 1 Mohamed   Hammes    xcorkery@hagenes.com       male   #> 2 Mortimer  Simonis   madalyn55@kutch.com        male   #> 3 Shaun     Daugherty jmayert@yahoo.com          male   #> 4 Harold    Lueilwitz earl.altenwerth@rogahn.com male   #> 5 Irwin     Hirthe    kacey.huels@dickinson.com  male"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"secret-management","dir":"Articles","previous_headings":"","what":"Secret management","title":"Wrapping APIs","text":"need take quick break APIs talk secrets. Secrets important, every API (except simple APIs like faker) going require identify way, typically API key token. even plan require users supply information, ’ll still need record credentials order test package. system described likely overkill one secret needs shared couple places: can just put .Renviron access Sys.getenv(). probably accumulate secrets time, ’ll need figure share people computers, think spending little time understand system set package pay long term.","code":""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"basics","dir":"Articles","previous_headings":"Secret management","what":"Basics","title":"Wrapping APIs","text":"httr2 provides secret_encrypt() secret_decrypt() scramble secrets can include public source code without worrying others can read . three basic steps process: create encryption key secret_make_key() used scramble descramble secrets using symmetric cryptography: (Note secret_make_key() uses cryptographically secure random number generator provided OpenSSL; affected R’s RNG settings, ’s way make reproducible.) scramble secrets secret_encrypt() store resulting text directly source code package: needed, descramble secret using secret_decrypt():","code":"key <- secret_make_key() key #> [1] \"e4ZNuNf_miYpODmy10RZhA\" secret_scrambled <- secret_encrypt(\"secret I need to work with an API\", key) secret_scrambled #> [1] \"Tdq1scdKfeOZ7A0HF7CXdCUm5BiP3HhPHTLauKF5lW-0W3zd-L5HM54CUUOwZYWrWg\" secret_decrypt(secret_scrambled, key) #> [1] \"secret I need to work with an API\""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"package-keys-and-secrets","dir":"Articles","previous_headings":"Secret management","what":"Package keys and secrets","title":"Wrapping APIs","text":"can create number encryption keys, highly recommend create one key per package, ’ll call package key. section, ’ll show store key (automated tests) can use , one else can. httr2 built around notion key live environment variable. first step make package key available local development machine adding line user-level .Renviron (can easily open usethis::edit_r_environ()): Now (restart R), ’ll able take advantage special secret_encrypt() secret_decrypt() feature: key argument can name environment variable, instead encryption key . fact, natural usage. ’ll also need make key available GitHub Actions (check pkgdown) automated tests can use . requires two steps: Add key repository secrets. Share key workflows need adding line appropriate workflow: can see httr2 GitHub workflow. continuous integration platforms offer similar ways make key available secure environment variable.","code":"YOURPACKAGE_KEY=key_you_generated_with_secret_make_key secret_scrambled <- secret_encrypt(\"secret I need to work with an API\", \"YOURPACKAGE_KEY\") secret_scrambled #> [1] \"JPl_Wi5NbC0HqOkTK4VzVt4tcvBMWED1PcpucVpE0oTqeOsqBK0uOX-kj3pIxcG9hQ\" secret_decrypt(secret_scrambled, \"YOURPACKAGE_KEY\") #> [1] \"secret I need to work with an API\" env:       YOURPACKAGE_KEY: ${{ secrets.YOURPACKAGE_KEY }}"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"when-the-package-key-isnt-available","dir":"Articles","previous_headings":"Secret management","what":"When the package key isn’t available","title":"Wrapping APIs","text":"important cases code won’t access package key: CRAN, personal machines external contributors, automated checks PRs. want share package CRAN make easy others contribute, need make sure examples, vignettes, tests work without error: vignettes, can run knitr::opts_chunk(eval = secret_has_key(\"YOURPACKAGE_KEY\")) chunks evaluated key available. examples, can surround code blocks require key (httr2::secret_has_key(\"YOURPACKAGE_KEY\")) {} don’t need anything tests secret_decrypt() run testthat, automatically skip() test key isn’t available.","code":""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"nytimes-books-api","dir":"Articles","previous_headings":"","what":"NYTimes Books API","title":"Wrapping APIs","text":"Next ’ll take look NYTimes Books API. requires simple authentication API key ’s included every request. ’re wrapping API key ’re going face two struggles: test package without sharing key whole world? allow users supply key, without pass every function? now can understand following code works get NYTimes Book API key: ’ll start tackling first problem otherwise ’s way show API works vignette 😃. ’ll come back second end section, ’s easiest tackle function place.","code":"my_key <- secret_decrypt(\"4Nx84VPa83dMt3X6bv0fNBlLbv3U4D1kHM76YisKEfpCarBm1UHJHARwJHCFXQSV\", \"HTTR2_KEY\")"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"security-considerations","dir":"Articles","previous_headings":"NYTimes Books API","what":"Security considerations","title":"Wrapping APIs","text":"Note including API key query parameter relatively insecure; API uses method auth, ’s typically key relatively easy create gives relatively privileges. takes couple minutes generate NYTimes API key, ’s little incentive someone try steal . main problem conveying credentials via url ’s easily exposed, httr2 makes efforts redact confidential information stored query parameters. means ’s relatively easy leak key use req_perform(verbosity = 1), req_dry_run(), even just print request object. indeed, ’ll see examples — bad practice real package, think ’s ok key doesn’t allow anything valuable makes teaching APIs much easier.","code":""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"basic-request","dir":"Articles","previous_headings":"NYTimes Books API","what":"Basic request","title":"Wrapping APIs","text":"Now let’s perform test request look response: Like modern APIs, one returns results JSON: start wrapping function, let’s consider happens errors.","code":"resp <- request(\"https://api.nytimes.com/svc/books/v3\") |>   req_url_path_append(\"/reviews.json\") |>   req_url_query(`api-key` = my_key, isbn = 9780307476463) |>   req_perform() resp resp |>   resp_body_json() |>   str()"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"error-handling","dir":"Articles","previous_headings":"NYTimes Books API","what":"Error handling","title":"Wrapping APIs","text":"happens ’s error? example, deliberately supply invalid key: see ’s extra useful information can look last_response(): looks like ’s useful additional info faultstring: add information future errors can use body argument req_error(). function takes response returns character vector additional information include error. re-fetch request, see additional information displayed R error:","code":"resp <- request(\"https://api.nytimes.com/svc/books/v3\") |>   req_url_path_append(\"/reviews.json\") |>   req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) |>   req_perform() resp <- last_response() resp resp |> resp_body_json() resp |> resp_body_json() |> _$fault |> _$faultstring nytimes_error_body <- function(resp) {   resp |> resp_body_json() |> _$fault |> _$faultstring }  resp <- request(\"https://api.nytimes.com/svc/books/v3\") |>   req_url_path_append(\"/reviews.json\") |>   req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) |>   req_error(body = nytimes_error_body) |>   req_perform()"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"rate-limits","dir":"Articles","previous_headings":"NYTimes Books API","what":"Rate limits","title":"Wrapping APIs","text":"Another common source errors rate-limiting — used many servers prevent one unruly client consuming many resources. frequently asked questions page describes rate limits NYT APIs: Yes, two rate limits per API: 4,000 requests per day 10 requests per minute. sleep 6 seconds calls avoid hitting per minute rate limit. need higher rate limit, please contact us code@nytimes.com. Many APIs return additional information long wait rate limit exceeded (often using Retry-header). deliberately violated rate limit quickly making 11 requests; unfortunately response standard 429 (many requests), include information long wait either response body headers. means can’t use req_retry(), automatically waits amount time server requests. Instead, ’ll use req_throttle() ensure don’t make 10 requests every 60 seconds: default, req_throttle() shares limit across requests made host (.e. api.nytimes.com). Since docs suggest rate limit applies per API, might want use realm argument bit specific:","code":"req <- request(\"https://api.nytimes.com/svc/books/v3\") |>   req_url_path_append(\"/reviews.json\") |>   req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) |>   req_throttle(10 / 60) req <- request(\"https://api.nytimes.com/svc/books/v3\") |>   req_url_path_append(\"/reviews.json\") |>   req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) |>   req_throttle(10 / 60, realm = \"https://api.nytimes.com/svc/books\")"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"wrapping-it-up","dir":"Articles","previous_headings":"NYTimes Books API","what":"Wrapping it up","title":"Wrapping APIs","text":"Putting together pieces yields function something like : finish real package, ’d want : Add explicit arguments check correct type. Export document function. Convert nested list user-friendly data structure (probably data frame one row per review). ’d also want provide convenient way user supply API key.","code":"nytimes_books <- function(api_key, path, ...) {   request(\"https://api.nytimes.com/svc/books/v3\") |>     req_url_path_append(path) |>     req_url_query(..., `api-key` = api_key) |>     req_error(body = nytimes_error_body) |>     req_throttle(10 / 60, realm = \"https://api.nytimes.com/svc/books\") |>     req_perform() |>     resp_body_json() }  drunk <- nytimes_books(my_key, \"/reviews.json\", isbn = \"0316453382\") drunk$results[[1]]$summary"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"user-supplied-key","dir":"Articles","previous_headings":"NYTimes Books API","what":"User-supplied key","title":"Wrapping APIs","text":"good place start environment variable, environment variables easy set without typing anything console (can get accidentally shared via .Rhistory) easily set automated processes. ’d write function retrieve API key, returning helpful message ’s found: modify nytimes_books() use get_api_key() default value api_key. Since argument now optional, can move end argument list, since ’ll needed exceptional circumstances. can make approach little user friendly providing helper sets environment variable: Using askpass (similar) good practice since don’t want encourage user type secret key console, mentioned . ’s good idea extend get_api_key() automatically use encrypted key make easier write tests:","code":"get_api_key <- function() {   key <- Sys.getenv(\"NYTIMES_KEY\")   if (identical(key, \"\")) {     stop(\"No API key found, please supply with `api_key` argument or with NYTIMES_KEY env var\")   }   key } nytimes_books <- function(path, ..., api_key = get_api_key()) {   ... } set_api_key <- function(key = NULL) {   if (is.null(key)) {     key <- askpass::askpass(\"Please enter your API key\")   }   Sys.setenv(\"NYTIMES_KEY\" = key) } get_api_key <- function() {   key <- Sys.getenv(\"NYTIMES_KEY\")   if (!identical(key, \"\")) {     return(key)   }    if (is_testing()) {     return(testing_key())   } else {     stop(\"No API key found, please supply with `api_key` argument or with NYTIMES_KEY env var\")   } }  is_testing <- function() {   identical(Sys.getenv(\"TESTTHAT\"), \"true\") }  testing_key <- function() {   secret_decrypt(\"4Nx84VPa83dMt3X6bv0fNBlLbv3U4D1kHM76YisKEfpCarBm1UHJHARwJHCFXQSV\", \"HTTR2_KEY\") }"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"github-gists-api","dir":"Articles","previous_headings":"","what":"Github Gists API","title":"Wrapping APIs","text":"Next ’ll take look API can make changes behalf user, just retrieve data: GitHub’s gist API. uses different HTTP methods perform different actions, like creating, updating, deleting gists. can get , let’s handle authentication, rate-limiting, errors.","code":""},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"authentication","dir":"Articles","previous_headings":"Github Gists API","what":"Authentication","title":"Wrapping APIs","text":"easiest way authenticate GitHub API use personal access token. token alternative username password. one username + password per site; can one token per use case. lets use case minimal set permissions, can easily revoke one token without affecting use case. created personal access token specifically vignette can access gists, , last example, stored encrypted version vignette: want run vignette , ’ll need create new token GitHub settings; just make sure includes “gist” scope. ’s also good idea give every token descriptive name, reminds motivating use case, update re-generate expired. authenticate request token, need put Authorization header “token” prefix: authorization header usually contains secret information, httr2 automatically redacts it1:","code":"token <- secret_decrypt(\"Guz59woxKoIO_JVtp2IzU3mFIU3ULtaUEa8xvvpYUBdVthR8jhxzc3bMZFhA9HL-ZK6YZudOI6g\", \"HTTR2_KEY\") req <- request(\"https://api.github.com/gists\") |>   req_headers(Authorization = paste(\"token\", token))  req |> req_perform() req req |> req_dry_run()"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"errors-1","dir":"Articles","previous_headings":"Github Gists API","what":"Errors","title":"Wrapping APIs","text":"’ve got authentication working, ’s always good idea work errors next, since help debug failed requests. experience APIs rarely good job documenting errors, ’ll often little experimentation. add pain, large APIs different endpoints often return different amounts information different forms. ’ll typically need tackle error handling iteratively, improving code time encounter new problem. GitHub document errors, ’m sufficiently distrustful still want construct deliberately malformed query see happens: documented get 422 “Unprocessable Entity” error. response rather different documentation suggests string message list errors: ’ll proceed anyway, writing function extracts data formats presentation user: Now can pass function body argument req_error() automatically included error request fails: Notice element character vector produced gh_error_body() becomes bullet resulting error.","code":"resp <- request(\"https://api.github.com/gists\") |>   req_url_query(since = \"abcdef\") |>   req_headers(Authorization = paste(\"token\", token)) |>   req_perform() resp <- last_response() resp resp |> resp_body_json() gist_error_body <- function(resp) {   body <- resp_body_json(resp)    message <- body$message   if (!is.null(body$documentation_url)) {     message <- c(message, paste0(\"See docs at <\", body$documentation_url, \">\"))   }   message } gist_error_body(resp) request(\"https://api.github.com/gists\") |>   req_url_query(since = \"yesterday\") |>   req_headers(Authorization = paste(\"token\", token)) |>   req_error(body = gist_error_body) |>   req_perform()"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"rate-limiting","dir":"Articles","previous_headings":"Github Gists API","what":"Rate-limiting","title":"Wrapping APIs","text":"’re thinking errors, ’s useful look happens requests rate limited. Luckily, GitHub consistently uses response headers provide information remaining rate limits. can teach httr2 can automatically wait reset rate limit hit. need define two functions. first tells us whether response transient error, .e. ’s worth waiting trying . GitHub, rate limit exceeded, response 403 status X-RateLimit-Remaining: 0 header: need function tells long wait. GitHub tells us rate limit resets (number seconds since 1970-01-01) X-RateLimit-Reset header. convert number seconds wait first convert number (since HTTP headers always strings), subtract current time (number seconds since 1970-01-01): pass functions req_retry() httr2 information needs handle rate-limiting automatically: also need supply either max_tries max_seconds order activate req_retry().","code":"resp <- req |> req_perform() resp |> resp_headers(\"ratelimit\") gist_is_transient <- function(resp) {   resp_status(resp) == 403 &&     resp_header(resp, \"X-RateLimit-Remaining\") == \"0\" } gist_is_transient(resp) gist_after <- function(resp) {   time <- as.numeric(resp_header(resp, \"X-RateLimit-Reset\"))   time - unclass(Sys.time()) } gist_after(resp) request(\"http://api.github.com\") |>   req_retry(     is_transient = gist_is_transient,     after = gist_after,     max_seconds = 60   )"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"wrapping-it-all-up","dir":"Articles","previous_headings":"Github Gists API","what":"Wrapping it all up","title":"Wrapping APIs","text":"Let’s wrap everything ’ve learned far single function creates request: ’ll use basis solve next challenge: uploading gist.","code":"req_gist <- function(token) {   request(\"https://api.github.com/gists\") |>     req_headers(Authorization = paste(\"token\", token)) |>     req_error(body = gist_error_body) |>     req_retry(       is_transient = gist_is_transient,       after = gist_after     ) }  # Check it works: req_gist(token) |>   req_perform()"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"sending-data","dir":"Articles","previous_headings":"Github Gists API","what":"Sending data","title":"Wrapping APIs","text":"create gist need change method POST add body contains data encoded JSON. httr2 provides one function things: req_body_json(): Depending API ’re wrapping, might need send data different way. req_body_form() req_body_multipart() make easier encode data two common forms. API requires something different can use req_body_raw(). Typically, API return useful data resource ’ve just created. ’ll extract gist ID can use next examples, culminating deleting gist don’t end bunch duplicated gists 😃.","code":"req <- req_gist(token) |>   req_body_json(list(     description = \"This is my cool gist!\",     files = list(test.R = list(content = \"print('Hi!')\")),     public = FALSE   )) req |> req_dry_run() resp <- req |> req_perform() id <- resp |> resp_body_json() |> _$id id"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"changing-a-gist","dir":"Articles","previous_headings":"Github Gists API","what":"Changing a gist","title":"Wrapping APIs","text":"Actually, description wasn’t true want change . , need send JSON encoded data, time need use PATCH verb. adding data request, use req_method() override default method:","code":"req <- req_gist(token) |>   req_url_path_append(id) |>   req_body_json(list(description = \"This is a simple gist\")) |>   req_method(\"PATCH\") req |> req_dry_run()"},{"path":"https://httr2.r-lib.org/dev/articles/wrapping-apis.html","id":"deleting-a-gist","dir":"Articles","previous_headings":"Github Gists API","what":"Deleting a gist","title":"Wrapping APIs","text":"Deleting gist similar, except don’t send data, just need adjust default method GET DELETE.","code":"req <- req_gist(token) |>   req_url_path_append(id) |>   req_method(\"DELETE\") req |> req_dry_run() req |> req_perform()"},{"path":"https://httr2.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. . Copyright holder, funder. Maximilian Girlich. Contributor.","code":""},{"path":"https://httr2.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2025). httr2: Perform HTTP Requests Process Responses. R package version 1.1.2.9000, https://github.com/r-lib/httr2, https://httr2.r-lib.org.","code":"@Manual{,   title = {httr2: Perform HTTP Requests and Process the Responses},   author = {Hadley Wickham},   year = {2025},   note = {R package version 1.1.2.9000, https://github.com/r-lib/httr2},   url = {https://httr2.r-lib.org}, }"},{"path":"https://httr2.r-lib.org/dev/index.html","id":"httr2-","dir":"","previous_headings":"","what":"Perform HTTP Requests and Process the Responses","title":"Perform HTTP Requests and Process the Responses","text":"httr2 (pronounced “hitter2”) comprehensive HTTP client provides modern, pipeable API working web APIs. builds top {curl} provide features like explicit request objects, built-rate limiting & retry tooling, comprehensive OAuth support, secure handling secrets credentials.","code":""},{"path":"https://httr2.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Perform HTTP Requests and Process the Responses","text":"can install httr2 CRAN :","code":"install.packages(\"httr2\")"},{"path":"https://httr2.r-lib.org/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Perform HTTP Requests and Process the Responses","text":"use httr2, start creating request: can tailor request req_ family functions: see exactly httr2 send server req_dry_run(): Use req_perform() perform request, retrieving response: resp_ functions help extract various useful components response:","code":"library(httr2)  req <- request(\"https://r-project.org\") req #> <httr2_request> #> GET https://r-project.org #> Body: empty # Add custom headers req |> req_headers(\"Accept\" = \"application/json\") #> <httr2_request> #> GET https://r-project.org #> Headers: #> • Accept: \"application/json\" #> Body: empty  # Add a body, turning it into a POST req |> req_body_json(list(x = 1, y = 2)) #> <httr2_request> #> POST https://r-project.org #> Body: json encoded data  # Modify the path in the url req |> req_url_path(path = \"path/to/my/file\") #> <httr2_request> #> GET https://r-project.org/path/to/my/file #> Body: empty  # Automatically retry if the request fails req |> req_retry(max_tries = 5) #> <httr2_request> #> GET https://r-project.org #> Body: empty #> Policies: #> • retry_max_tries        : 5 #> • retry_on_failure       : FALSE #> • retry_failure_threshold: Inf #> • retry_failure_timeout  : 30 #> • retry_realm            : \"r-project.org\"  # Change the HTTP method req |> req_method(\"PATCH\") #> <httr2_request> #> PATCH https://r-project.org #> Body: empty req |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip #> host: r-project.org #> user-agent: httr2/1.1.1.9000 r-curl/6.2.2 libcurl/8.11.1 resp <- req_perform(req) resp #> <httr2_response> #> GET https://www.r-project.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (7055 bytes) resp |> resp_content_type() #> [1] \"text/html\" resp |> resp_status_desc() #> [1] \"OK\" resp |> resp_body_html() #> {html_document} #> <html lang=\"en\"> #> [1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ... #> [2] <body>\\n    <div class=\"container page\">\\n      <div class=\"row\">\\n       ..."},{"path":"https://httr2.r-lib.org/dev/index.html","id":"major-differences-to-httr","dir":"","previous_headings":"","what":"Major differences to httr","title":"Perform HTTP Requests and Process the Responses","text":"can now create modify request without performing . means ’s now single function perform request fetch result: req_perform(). req_perform() replaces httr::GET(), httr::POST(), httr::DELETE(), . HTTP errors automatically converted R errors. Use req_error() override defaults (turn 4xx 5xx responses errors) add additional details error message. can automatically retry request fails encounters transient HTTP error (e.g. 429 rate limit request). req_retry() defines maximum number retries, errors transient, long wait tries. OAuth support totally overhauled directly support many flows make much easier customise built-flows create . can manage secrets (often needed testing) secret_encrypt() friends. can obfuscate mildly confidential data obfuscate(), preventing scraped published code. can automatically cache cacheable results req_cache(). Relatively API responses cacheable, typically makes big difference.","code":""},{"path":"https://httr2.r-lib.org/dev/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Perform HTTP Requests and Process the Responses","text":"httr2 wouldn’t possible without curl, openssl, jsonlite, jose, maintained Jeroen Ooms. big thanks also go Jenny Bryan Craig Citro given much useful feedback design internals user facing API.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/curl_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate curl syntax to httr2 — curl_translate","title":"Translate curl syntax to httr2 — curl_translate","text":"curl command line tool commonly used demonstrate HTTP APIs can easily generated browser developer tools. curl_translate() saves pain manually translating calls implementing partial, frequently used, subset curl options. Use curl_help() see supported options, curl_translate() translate curl invocation copy pasted elsewhere. Inspired curlconverter written Bob Rudis.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/curl_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate curl syntax to httr2 — curl_translate","text":"","code":"curl_translate(cmd, simplify_headers = TRUE)  curl_help()"},{"path":"https://httr2.r-lib.org/dev/reference/curl_translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate curl syntax to httr2 — curl_translate","text":"cmd Call curl. omitted clipr package installed, retrieved clipboard. simplify_headers Remove typically unimportant headers included copying curl command browser. includes: sec-fetch-* sec-ch-ua* referer, pragma, connection","code":""},{"path":"https://httr2.r-lib.org/dev/reference/curl_translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate curl syntax to httr2 — curl_translate","text":"string containing translated httr2 code. input copied clipboard, translation copied back clipboard.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/curl_translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate curl syntax to httr2 — curl_translate","text":"","code":"curl_translate(\"curl http://example.com\") #> request(\"http://example.com/\") |>  #>   req_perform() curl_translate(\"curl http://example.com -X DELETE\") #> request(\"http://example.com/\") |>  #>   req_method(\"DELETE\") |>  #>   req_perform() curl_translate(\"curl http://example.com --header A:1 --header B:2\") #> request(\"http://example.com/\") |>  #>   req_headers( #>     A = \"1\", #>     B = \"2\", #>   ) |>  #>   req_perform() curl_translate(\"curl http://example.com --verbose\") #> request(\"http://example.com/\") |>  #>   req_perform(verbosity = 1)"},{"path":"https://httr2.r-lib.org/dev/reference/example_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Code for examples — example_url","title":"Code for examples — example_url","text":"example_url() runs simple websever using webfakes package following endpoints: ones webfakes::httpbin_app() /iris: paginate iris dataset. query parameters page limit control pagination. example_github_client() OAuth client GitHub.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/example_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code for examples — example_url","text":"","code":"example_url(path = \"/\")  example_github_client()"},{"path":"https://httr2.r-lib.org/dev/reference/httr2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","title":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","text":"Tools creating modifying HTTP requests, performing processing results. 'httr2' modern re-imagining 'httr' uses pipe-based interface solves problems API wrapping packages face.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/httr2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","text":"Maintainer: Hadley Wickham hadley@posit.co contributors: Posit Software, PBC [copyright holder, funder] Maximilian Girlich [contributor]","code":""},{"path":"https://httr2.r-lib.org/dev/reference/is_online.html","id":null,"dir":"Reference","previous_headings":"","what":"Is your computer currently online? — is_online","title":"Is your computer currently online? — is_online","text":"function uses cheap heuristics determine computer currently online. simple wrapper around curl::has_internet() exported httr2 convenience.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/is_online.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is your computer currently online? — is_online","text":"","code":"is_online()"},{"path":"https://httr2.r-lib.org/dev/reference/is_online.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is your computer currently online? — is_online","text":"","code":"is_online() #> [1] TRUE"},{"path":"https://httr2.r-lib.org/dev/reference/iterate_with_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteration helpers — iterate_with_offset","title":"Iteration helpers — iterate_with_offset","text":"functions intended use next_req argument req_perform_iterative(). implements iteration common pagination pattern: iterate_with_offset() increments query parameter, e.g. ?page=1, ?page=2, ?offset=1, offset=21. iterate_with_cursor() updates query parameter value cursor found somewhere response. iterate_with_link_url() follows url found Link header. See resp_link_url() details.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/iterate_with_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteration helpers — iterate_with_offset","text":"","code":"iterate_with_offset(   param_name,   start = 1,   offset = 1,   resp_pages = NULL,   resp_complete = NULL )  iterate_with_cursor(param_name, resp_param_value)  iterate_with_link_url(rel = \"next\")"},{"path":"https://httr2.r-lib.org/dev/reference/iterate_with_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteration helpers — iterate_with_offset","text":"param_name Name query parameter. start Starting value. offset Offset page. default set 1 get (e.g.) ?page=1, ?page=2, ... param_name refers element index (rather page index) want set larger number get (e.g.) ?items=20, ?items=40, ... resp_pages callback function takes response (resp) returns total number pages, NULL unknown. called . resp_complete callback function takes response (resp) returns TRUE pages. resp_param_value callback function takes response (resp) returns next cursor value. Return NULL pages. rel \"link relation type\" use retrieve next page.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/iterate_with_offset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteration helpers — iterate_with_offset","text":"","code":"req <- request(example_url()) |>   req_url_path(\"/iris\") |>   req_throttle(10) |>   req_url_query(limit = 50)  # If you don't know the total number of pages in advance, you can # provide a `resp_complete()` callback is_complete <- function(resp) {   length(resp_body_json(resp)$data) == 0 } resps <- req_perform_iterative(   req,   next_req = iterate_with_offset(\"page_index\", resp_complete = is_complete),   max_reqs = Inf )  if (FALSE) { # \\dontrun{ # Alternatively, if the response returns the total number of pages (or you # can easily calculate it), you can use the `resp_pages()` callback which # will generate a better progress bar.  resps <- req_perform_iterative(   req |> req_url_query(limit = 1),   next_req = iterate_with_offset(     \"page_index\",     resp_pages = function(resp) resp_body_json(resp)$pages   ),   max_reqs = Inf ) } # }"},{"path":"https://httr2.r-lib.org/dev/reference/jwt_claim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and encode a JWT — jwt_claim","title":"Create and encode a JWT — jwt_claim","text":"jwt_claim() wrapper around jose::jwt_claim() creates JWT claim set extra default values. jwt_encode_sig() jwt_encode_hmac() thin wrappers around jose::jwt_encode_sig() jose::jwt_encode_hmac() exist primarily make specification functions little simpler.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/jwt_claim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and encode a JWT — jwt_claim","text":"","code":"jwt_claim(   iss = NULL,   sub = NULL,   aud = NULL,   exp = unix_time() + 5L * 60L,   nbf = unix_time(),   iat = unix_time(),   jti = NULL,   ... )  jwt_encode_sig(claim, key, size = 256, header = list())  jwt_encode_hmac(claim, secret, size = 256, header = list())"},{"path":"https://httr2.r-lib.org/dev/reference/jwt_claim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and encode a JWT — jwt_claim","text":"iss Issuer claim. Identifies principal issued JWT. sub Subject claim. Identifies principal subject JWT (.e. entity claims apply ). aud Audience claim. Identifies recipients JWT intended. principle intended process JWT must identified unique value. exp Expiration claim. Identifies expiration time JWT MUST accepted processing. Defaults 5 minutes. nbf claim. Identifies time JWT MUST accepted processing. Defaults current time. iat Issued claim. Identifies time JWT issued.  Defaults current time. jti JWT ID claim. Provides unique identifier JWT. omitted, uses random 32-byte sequence encoded base64url. ... additional claims include claim set. claim Claim set produced jwt_claim(). key RSA EC private key either specified path file, connection, string (PEM/SSH format), raw vector (DER format). size Size, bits, sha2 signature, .e. 256, 384 512. HMAC/RSA, applicable ECDSA keys. header named list giving additional fields include JWT header. secret String raw vector secret passphrase.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/jwt_claim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and encode a JWT — jwt_claim","text":"S3 list class jwt_claim.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/jwt_claim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and encode a JWT — jwt_claim","text":"","code":"claim <- jwt_claim() str(claim) #> List of 4 #>  $ exp: num 1.74e+09 #>  $ nbf: num 1.74e+09 #>  $ iat: num 1.74e+09 #>  $ jti: chr \"CTQRP3M_b0e-WDJ2mzTo7DCrR0KEQb9a9AXXuc1u8mI\" #>  - attr(*, \"class\")= chr [1:2] \"jwt_claim\" \"list\""},{"path":"https://httr2.r-lib.org/dev/reference/last_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve most recent request/response — last_response","title":"Retrieve most recent request/response — last_response","text":"functions retrieve recent request made httr2 response received, facilitate debugging problems occur. request succeed (requests made) last_response() NULL.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/last_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve most recent request/response — last_response","text":"","code":"last_response()  last_request()"},{"path":"https://httr2.r-lib.org/dev/reference/last_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve most recent request/response — last_response","text":"HTTP response/request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/last_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve most recent request/response — last_response","text":"","code":"invisible(request(\"http://httr2.r-lib.org\") |> req_perform()) last_request() #> <httr2_request> #> GET http://httr2.r-lib.org #> Body: empty last_response() #> <httr2_response> #> GET https://httr2.r-lib.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (19266 bytes)"},{"path":"https://httr2.r-lib.org/dev/reference/multi_req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a list of requests in parallel — multi_req_perform","title":"Perform a list of requests in parallel — multi_req_perform","text":"Please use req_perform_parallel() instead, note: cancel_on_error = FALSE now on_error = \"continue\" cancel_on_error = TRUE now on_error = \"return\"","code":""},{"path":"https://httr2.r-lib.org/dev/reference/multi_req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a list of requests in parallel — multi_req_perform","text":"","code":"multi_req_perform(   reqs,   paths = NULL,   pool = deprecated(),   cancel_on_error = FALSE )"},{"path":"https://httr2.r-lib.org/dev/reference/multi_req_perform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a list of requests in parallel — multi_req_perform","text":"reqs list requests. paths optional character vector paths, want download response bodies disk. supplied, must length reqs. pool . longer supported; control maximum number concurrent requests, set max_active. cancel_on_error pending requests cancelled hit error? Set TRUE stop requests soon hit error. Responses never performed NULL result.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_cache_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear OAuth cache — oauth_cache_clear","title":"Clear OAuth cache — oauth_cache_clear","text":"Use function clear cached credentials.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_cache_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear OAuth cache — oauth_cache_clear","text":"","code":"oauth_cache_clear(client, cache_disk = FALSE, cache_key = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_cache_clear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear OAuth cache — oauth_cache_clear","text":"client oauth_client(). cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Learn https://httr2.r-lib.org/articles/oauth.html. cache_key want cache multiple tokens per app, use key disambiguate .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"httr2 OAuth cache location — oauth_cache_path","title":"httr2 OAuth cache location — oauth_cache_path","text":"opted-, httr2 caches OAuth tokens directory. default, uses OS-standard cache directory, , needed, can override location setting HTTR2_OAUTH_CACHE env var.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httr2 OAuth cache location — oauth_cache_path","text":"","code":"oauth_cache_path()"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth client — oauth_client","title":"Create an OAuth client — oauth_client","text":"OAuth app combination client, set endpoints (.e. urls various requests sent), authentication mechanism. client consists least client_id, also often client_secret. get values create client API's website.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth client — oauth_client","text":"","code":"oauth_client(   id,   token_url,   secret = NULL,   key = NULL,   auth = c(\"body\", \"header\", \"jwt_sig\"),   auth_params = list(),   name = hash(id) )"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OAuth client — oauth_client","text":"id Client identifier. token_url Url retrieve access token. secret Client secret. apps, technically confidential principle avoid storing source code. However, many APIs require order provide user friendly authentication experience, risks including usually low. make things little safer, recommend using obfuscate() recording client secret public code. key Client key. alternative using secret, can instead supply confidential private key. never included package. auth Authentication mechanism used client prove API. Can one three built-methods (\"body\", \"header\", \"jwt\"), function called arguments req, client, contents auth_params. common mechanism wild \"body\" client_id (optionally) client_secret added body. \"header\" sends client_id client_secret HTTP Authorization header. \"jwt_sig\" generate JWT, include client_assertion field body. See oauth_client_req_auth() details. auth_params Additional parameters passed function specified auth. name Optional name client. Used generating cache directory. NULL, generated hash client_id. defining client use package, recommend use package name.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OAuth client — oauth_client","text":"OAuth client: S3 list class httr2_oauth_client.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an OAuth client — oauth_client","text":"","code":"oauth_client(\"myclient\", \"http://example.com/token_url\", secret = \"DONTLOOK\") #> <httr2_oauth_client> #> • name     : \"920903ca1274bc747bb367c6b5abe4a4\" #> • id       : \"myclient\" #> • secret   : <REDACTED> #> • token_url: \"http://example.com/token_url\" #> • auth     : \"oauth_client_req_auth_body\""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client_req_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth client authentication — oauth_client_req_auth","title":"OAuth client authentication — oauth_client_req_auth","text":"oauth_client_req_auth() authenticates request using authentication strategy defined auth auth_param arguments oauth_client(). used authenticate client part OAuth flow, authenticate request behalf user. three built-strategies: oauth_client_req_body() adds client id (optionally) secret request body, described Section 2.3.1 RFC 6749. oauth_client_req_header() adds client id secret using HTTP basic authentication Authorization header, described Section 2.3.1 RFC 6749. oauth_client_jwt_rs256() adds client assertion body using JWT signed jwt_sign_rs256() using private key, described Section 2.2 RFC 7523. generally call functions directly instead specify auth argument oauth_client(). req client parameters automatically filled ; parameters come auth_params argument.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client_req_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth client authentication — oauth_client_req_auth","text":"","code":"oauth_client_req_auth(req, client)  oauth_client_req_auth_header(req, client)  oauth_client_req_auth_body(req, client)  oauth_client_req_auth_jwt_sig(req, client, claim, size = 256, header = list())"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client_req_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth client authentication — oauth_client_req_auth","text":"req httr2 request object. client oauth_client. claim Claim set produced jwt_claim(). size Size, bits, sha2 signature, .e. 256, 384 512. HMAC/RSA, applicable ECDSA keys. header named list giving additional fields include JWT header.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client_req_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth client authentication — oauth_client_req_auth","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_client_req_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth client authentication — oauth_client_req_auth","text":"","code":"# Show what the various forms of client authentication look like req <- request(\"https://example.com/whoami\")  client1 <- oauth_client(   id = \"12345\",   secret = \"56789\",   token_url = \"https://example.com/oauth/access_token\",   name = \"oauth-example\",   auth = \"body\" # the default ) # calls oauth_client_req_auth_body() req_dry_run(oauth_client_req_auth(req, client1)) #> POST /whoami HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 35 #> content-type: application/x-www-form-urlencoded #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> client_id=12345&client_secret=56789  client2 <- oauth_client(   id = \"12345\",   secret = \"56789\",   token_url = \"https://example.com/oauth/access_token\",   name = \"oauth-example\",   auth = \"header\" ) # calls oauth_client_req_auth_header() req_dry_run(oauth_client_req_auth(req, client2)) #> GET /whoami HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> authorization: <REDACTED> #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   client3 <- oauth_client(   id = \"12345\",   key = openssl::rsa_keygen(),   token_url = \"https://example.com/oauth/access_token\",   name = \"oauth-example\",   auth = \"jwt_sig\",   auth_params = list(claim = jwt_claim()) ) # calls oauth_client_req_auth_header_jwt_sig() req_dry_run(oauth_client_req_auth(req, client3)) #> POST /whoami HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 623 #> content-type: application/x-www-form-urlencoded #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> client_assertion=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJleHAiOjE3NDM3NzExNDEsIm5iZiI6MTc0Mzc3MDg0MSwiaWF0IjoxNzQzNzcwODQxLCJqdGkiOiI3VVBLYTgxZ2FyalVaOVI0N3FGNzkwbGIyRFJzWUpKVVBRNktZdjZXMUxzIn0.WmrUb8s7fpCyiRMYMKV_QR0tZ2FspQSggMoB0nCd2JpLGG61IVfXnvggz3ZALRiEvVjI3d4w8cGczEi9sUTrGAcr3s1nD9BRvcsHeS6W419SX5Gg9_h1hKUbctkPPsX4DMPoiC4wdKRy_Z8EuenWbu_t5iHXzKD5StoHeQ0ZG-GiQf5wrzztZHgbIcakX6DrwKRas4NFOhzqAYmILCL5gqwOYuIQoJGGgTWKAorNvSs87MPU18U9fvpZrLQ__KKXIcwpmRAbtbOQWH8bW8bX6fD5ZS340EOFCKsWI7aNpOyIN2Un5hNy59xjVh79yMf1qyboHHfxLTrF8O_tz2cyBQ&client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_flow_auth_code_url.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authorization code components — oauth_flow_auth_code_url","title":"OAuth authorization code components — oauth_flow_auth_code_url","text":"low-level functions can used assemble custom flow APIs spec: oauth_flow_auth_code_url() generates url opened browser. oauth_flow_auth_code_listen() starts temporary local webserver listens response resource server. oauth_flow_auth_code_parse() parses query parameters returned server redirect, verifying state correct, returning authorisation code. oauth_flow_auth_code_pkce() generates code verifier, method, challenge components needed PKCE, defined RFC 7636.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_flow_auth_code_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authorization code components — oauth_flow_auth_code_url","text":"","code":"oauth_flow_auth_code_url(   client,   auth_url,   redirect_uri = NULL,   scope = NULL,   state = NULL,   auth_params = list() )  oauth_flow_auth_code_listen(redirect_uri = \"http://localhost:1410\")  oauth_flow_auth_code_parse(query, state)  oauth_flow_auth_code_pkce()"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_flow_auth_code_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authorization code components — oauth_flow_auth_code_url","text":"state Random state generated oauth_flow_auth_code(). Used verify working authentication request created. (unlikely threat R packages since webserver listens authorization responses transient.) query List query parameters returned oauth_flow_auth_code_listen().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_redirect_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Default redirect url for OAuth — oauth_redirect_uri","title":"Default redirect url for OAuth — oauth_redirect_uri","text":"default redirect uri used req_oauth_auth_code(). Defaults http://localhost unless HTTR2_OAUTH_REDIRECT_URL envvar set.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_redirect_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default redirect url for OAuth — oauth_redirect_uri","text":"","code":"oauth_redirect_uri()"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth token — oauth_token","title":"Create an OAuth token — oauth_token","text":"Creates S3 object class <httr2_token> representing OAuth token returned access token endpoint.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth token — oauth_token","text":"","code":"oauth_token(   access_token,   token_type = \"bearer\",   expires_in = NULL,   refresh_token = NULL,   ...,   .date = Sys.time() )"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OAuth token — oauth_token","text":"access_token access token used authenticate request token_type Type token; \"bearer\" currently supported. expires_in Number seconds token expires. refresh_token Optional refresh token; supplied, can used cheaply get new access token one expires. ... Additional components returned endpoint .date Date request made; used convert relative expires_in absolute expires_at.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OAuth token — oauth_token","text":"OAuth token: S3 list class httr2_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an OAuth token — oauth_token","text":"","code":"oauth_token(\"abcdef\") #> <httr2_token> #> • token_type  : \"bearer\" #> • access_token: <REDACTED> oauth_token(\"abcdef\", expires_in = 3600) #> <httr2_token> #> • token_type  : \"bearer\" #> • access_token: <REDACTED> #> • expires_at  : \"2025-04-04 13:47:22\" oauth_token(\"abcdef\", refresh_token = \"ghijkl\") #> <httr2_token> #> • token_type   : \"bearer\" #> • access_token : <REDACTED> #> • refresh_token: <REDACTED>"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token_cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve an OAuth token using the cache — oauth_token_cached","title":"Retrieve an OAuth token using the cache — oauth_token_cached","text":"function wraps around oauth_flow_ function retrieve token cache, generate cache token needed. Use manual token management still takes advantage httr2's caching system. need use function passing token","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token_cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve an OAuth token using the cache — oauth_token_cached","text":"","code":"oauth_token_cached(   client,   flow,   flow_params = list(),   cache_disk = FALSE,   cache_key = NULL,   reauth = FALSE )"},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token_cached.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve an OAuth token using the cache — oauth_token_cached","text":"client oauth_client(). flow oauth_flow_ function used generate access token. flow_params Parameters flow. named list whose names match argument names flow. cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Learn https://httr2.r-lib.org/articles/oauth.html. cache_key want cache multiple tokens per app, use key disambiguate . reauth Set TRUE force re-authentication via flow, regardless whether token expired.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/oauth_token_cached.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve an OAuth token using the cache — oauth_token_cached","text":"","code":"if (FALSE) { # \\dontrun{ token <- oauth_token_cached(   client = example_github_client(),   flow = oauth_flow_auth_code,   flow_params = list(     auth_url = \"https://github.com/login/oauth/authorize\"   ),   cache_disk = TRUE ) token } # }"},{"path":"https://httr2.r-lib.org/dev/reference/obfuscate.html","id":null,"dir":"Reference","previous_headings":"","what":"Obfuscate mildly secret information — obfuscate","title":"Obfuscate mildly secret information — obfuscate","text":"Use obfuscate(\"value\") generate call obfuscated(), unobfuscate value last possible moment. Obfuscated values work limited locations: secret argument oauth_client() Elements data argument req_body_form(), req_body_json(), req_body_multipart(). Working together pair functions provides way obfuscate mildly confidential information, like OAuth client secrets. secret can revealed inspecting source code, skilled R programmer figure effort. main goal protect scraping; way automated tool grab obfuscated secrets.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/obfuscate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obfuscate mildly secret information — obfuscate","text":"","code":"obfuscate(x)  obfuscated(x)"},{"path":"https://httr2.r-lib.org/dev/reference/obfuscate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obfuscate mildly secret information — obfuscate","text":"x string obfuscate, mark obfuscated.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/obfuscate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obfuscate mildly secret information — obfuscate","text":"obfuscate() prints obfuscated() call include code. obfuscated() returns S3 class marking string obfuscated can unobfuscated needed.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/obfuscate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obfuscate mildly secret information — obfuscate","text":"","code":"obfuscate(\"good morning\") #> obfuscated(\"0smW1BhYup-_a9oV3QX6jj0aenEX2p9IfzX8MQ\")  # Every time you obfuscate you'll get a different value because it # includes 16 bytes of random data which protects against certain types of # brute force attack obfuscate(\"good morning\") #> obfuscated(\"0JAdBKO4LQrC2ewcyy0RhaLx5TH_mZn4WINNGA\")"},{"path":"https://httr2.r-lib.org/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://httr2.r-lib.org/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://httr2.r-lib.org/dev/reference/progress_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Progress bars in httr2 — progress_bars","title":"Progress bars in httr2 — progress_bars","text":"httr2's perform functions progress argument can use create progress bar. progress can : FALSE, default: create progress bar. TRUE: creates basic unnamed progress bar. string: creates basic progress bar given name. named list progress bar parameters, described . good practice name progress bars, make clear calculation process belong . recommend keeping names 20 characters, whole progress bar fits comfortably even narrower displays.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/progress_bars.html","id":"progress-bar-parameters","dir":"Reference","previous_headings":"","what":"Progress bar parameters","title":"Progress bars in httr2 — progress_bars","text":"clear: whether remove progress bar screen termination. Defaults TRUE. format: format string. overrides default format string progress bar type. must given custom type. Format strings may contain R expressions evaluate braces. support cli pluralization, styling can contain special progress variables. format_done: format string successful termination. default format. format_failed: format string unsuccessful termination. default format. name: progress bar name. default empty string displayed beginning progress bar. type: progress bar type. Currently supported types : iterator: default, loop mapping function, tasks: (typically small) number tasks, download: download one file, custom: custom type, format must NULL type. default display different progress bar type.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/progress_bars.html","id":"further-documentation","dir":"Reference","previous_headings":"","what":"Further documentation","title":"Progress bars in httr2 — progress_bars","text":"purrr's progress bars powered cli, see Introduction progress bars cli Advanced cli progress bars details.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_aws_v4.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign a request with the AWS SigV4 signing protocol — req_auth_aws_v4","title":"Sign a request with the AWS SigV4 signing protocol — req_auth_aws_v4","text":"custom auth protocol implemented AWS.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_aws_v4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign a request with the AWS SigV4 signing protocol — req_auth_aws_v4","text":"","code":"req_auth_aws_v4(   req,   aws_access_key_id,   aws_secret_access_key,   aws_session_token = NULL,   aws_service = NULL,   aws_region = NULL )"},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_aws_v4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign a request with the AWS SigV4 signing protocol — req_auth_aws_v4","text":"req httr2 request object. aws_access_key_id, aws_secret_access_key AWS key secret. aws_session_token AWS session token, required. aws_service, aws_region AWS service region use request. supplied, automatically parsed URL hostname.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_aws_v4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign a request with the AWS SigV4 signing protocol — req_auth_aws_v4","text":"","code":"if (FALSE) { # httr2:::has_paws_credentials() creds <- paws.common::locate_credentials() model_id <- \"anthropic.claude-3-5-sonnet-20240620-v1:0\" req <- request(\"https://bedrock-runtime.us-east-1.amazonaws.com\") # https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_Converse.html req <- req_url_path_append(req, \"model\", model_id, \"converse\") req <- req_body_json(req, list(   messages = list(list(     role = \"user\",     content = list(list(text = \"What's your name?\"))   )) )) req <- req_auth_aws_v4(   req,   aws_access_key_id = creds$access_key_id,   aws_secret_access_key = creds$secret_access_key,   aws_session_token = creds$session_token ) resp <- req_perform_connection(req) str(resp_body_json(resp)) }"},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate request with HTTP basic authentication — req_auth_basic","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"sets Authorization header. See details https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"","code":"req_auth_basic(req, username, password = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"req httr2 request object. username User name. password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"","code":"req <- request(\"http://example.com\") |> req_auth_basic(\"hadley\", \"SECRET\") req #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: <REDACTED> #> Body: empty req |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> authorization: <REDACTED> #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # httr2 does its best to redact the Authorization header so that you don't # accidentally reveal confidential data. Use `redact_headers` to reveal it: print(req, redact_headers = FALSE) #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: \"Basic aGFkbGV5OlNFQ1JFVA==\" #> Body: empty req |> req_dry_run(redact_headers = FALSE) #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> authorization: <REDACTED> #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # We do this because the authorization header is not encrypted and the # so password can easily be discovered: rawToChar(jsonlite::base64_dec(\"aGFkbGV5OlNFQ1JFVA==\")) #> [1] \"hadley:SECRET\""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_bearer_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate request with bearer token — req_auth_bearer_token","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"bearer token gives bearer access confidential resources (keep secure like user name password). usually produced large authentication scheme (like various OAuth 2.0 flows), sometimes given directly.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_bearer_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"","code":"req_auth_bearer_token(req, token)"},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_bearer_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"req httr2 request object. token bearer token","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_bearer_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_auth_bearer_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"","code":"req <- request(\"http://example.com\") |> req_auth_bearer_token(\"sdaljsdf093lkfs\") req #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: <REDACTED> #> Body: empty  # httr2 does its best to redact the Authorization header so that you don't # accidentally reveal confidential data. Use `redact_headers` to reveal it: print(req, redact_headers = FALSE) #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: \"Bearer sdaljsdf093lkfs\" #> Body: empty"},{"path":"https://httr2.r-lib.org/dev/reference/req_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Send data in request body — req_body","title":"Send data in request body — req_body","text":"req_body_file() sends local file. req_body_raw() sends string raw vector. req_body_json() sends JSON encoded data. Named components data can later modified req_body_json_modify(). req_body_form() sends form encoded data. req_body_multipart() creates multi-part body. Adding body request automatically switch method POST.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send data in request body — req_body","text":"","code":"req_body_raw(req, body, type = NULL)  req_body_file(req, path, type = NULL)  req_body_json(   req,   data,   auto_unbox = TRUE,   digits = 22,   null = \"null\",   type = \"application/json\",   ... )  req_body_json_modify(req, ...)  req_body_form(.req, ..., .multi = c(\"error\", \"comma\", \"pipe\", \"explode\"))  req_body_multipart(.req, ...)"},{"path":"https://httr2.r-lib.org/dev/reference/req_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send data in request body — req_body","text":"req, .req httr2 request object. body literal string raw vector send body. type MIME content type. ignored manually set Content-Type header. path Path file upload. data Data include body. auto_unbox length-1 vectors automatically \"unboxed\" JSON scalars? digits many digits precision numbers use JSON? null NULL translated JSON's null (\"null\") empty list (\"list\"). ... <dynamic-dots> Name-data pairs used send data body. req_body_form(), values must strings (things easily coerced strings). Vectors convertd strings using value .multi. req_body_multipart() values must strings objects produced curl::form_file()/curl::form_data(). req_body_json_modify(), simple data made atomic vectors lists. req_body_json() uses argument differently; takes additional arguments passed  jsonlite::toJSON(). .multi Controls happens value vector: \"error\", default, throws error. \"comma\", separates values ,, e.g. ?x=1,2. \"pipe\", separates values |, e.g. ?x=1|2. \"explode\", turns element parameter, e.g. ?x=1&x=2 none options work needs, can instead supply function takes character vector argument values returns single string.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send data in request body — req_body","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_body.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send data in request body — req_body","text":"","code":"req <- request(example_url()) |>   req_url_path(\"/post\")  # Most APIs expect small amounts of data in either form or json encoded: req |>   req_body_form(x = \"A simple text string\") |>   req_dry_run() #> POST /post HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 28 #> content-type: application/x-www-form-urlencoded #> host: 127.0.0.1:34617 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> x=A%20simple%20text%20string  req |>   req_body_json(list(x = \"A simple text string\")) |>   req_dry_run() #> POST /post HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 28 #> content-type: application/json #> host: 127.0.0.1:34617 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> { #>   \"x\": \"A simple text string\" #> }  # For total control over the body, send a string or raw vector req |>   req_body_raw(\"A simple text string\") |>   req_dry_run() #> POST /post HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 20 #> host: 127.0.0.1:34617 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> <20 bytes>  # There are two main ways that APIs expect entire files path <- tempfile() writeLines(letters[1:6], path)  # You can send a single file as the body: req |>   req_body_file(path) |>   req_dry_run() #> POST /post HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 12 #> host: 127.0.0.1:34617 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> <12 bytes>  # You can send multiple files, or a mix of files and data # with multipart encoding req |>   req_body_multipart(a = curl::form_file(path), b = \"some data\") |>   req_dry_run() #> POST /post HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> content-length: 334 #> content-type: multipart/form-data; boundary=------------------------inBEDhsvE2C41vCJI9RUdb #> host: 127.0.0.1:34617 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>  #> --------------------------inBEDhsvE2C41vCJI9RUdb #> Content-Disposition: form-data; name=\"a\"; filename=\"file20db5af8e6c9\" #> Content-Type: application/octet-stream #>  #> a #> b #> c #> d #> e #> f #>  #> --------------------------inBEDhsvE2C41vCJI9RUdb #> Content-Disposition: form-data; name=\"b\" #>  #> some data #> --------------------------inBEDhsvE2C41vCJI9RUdb-- #>"},{"path":"https://httr2.r-lib.org/dev/reference/req_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically cache requests — req_cache","title":"Automatically cache requests — req_cache","text":"Use req_perform() automatically cache HTTP requests. API requests cacheable, static files often . req_cache() caches responses GET requests status code 200 least one standard caching headers (e.g. Expires, Etag, Last-Modified, Cache-Control), unless caching expressly prohibited Cache-Control: -store. Typically, request still sent server check cached value still --date, need re-download body value. learn HTTP caching, recommend MDN article HTTP caching.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically cache requests — req_cache","text":"","code":"req_cache(   req,   path,   use_on_error = FALSE,   debug = getOption(\"httr2_cache_debug\", FALSE),   max_age = Inf,   max_n = Inf,   max_size = 1024^3 )"},{"path":"https://httr2.r-lib.org/dev/reference/req_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically cache requests — req_cache","text":"req httr2 request object. path Path cache directory. created automatically exist. quick easy caching within session, can use tempfile(). cache requests within package, can use something like file.path(tools::R_user_dir(\"pkgdown\", \"cache\"), \"httr2\"). httr2 provide helpers manage cache, want empty , can use something like unlink(dir(cache_path, full.names = TRUE)). use_on_error request errors, cache response, req_perform() return instead generating error? debug TRUE emit useful messages telling cache hits misses. can helpful understand whether caching actually anything use case. max_n, max_age, max_size Automatically prune cache specifying one : max_age: delete files older number seconds. max_n: delete files (oldest newest) preserve many files. max_size: delete files (oldest newest) preserve many bytes. cache pruning performed per minute.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically cache requests — req_cache","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically cache requests — req_cache","text":"","code":"# GitHub uses HTTP caching for all raw files. url <- paste0(   \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/\",   \"master/inst/extdata/penguins.csv\" ) # Here I set debug = TRUE so you can see what's happening req <- request(url) |> req_cache(tempdir(), debug = TRUE)  # First request downloads the data resp <- req |> req_perform() #> Pruning cache #> Saving response to cache \"d5d1ddd7f99f55dbc920c63f942804c0\"  # Second request retrieves it from the cache resp <- req |> req_perform() #> Found url in cache \"d5d1ddd7f99f55dbc920c63f942804c0\" #> Cached value is fresh; using response from cache"},{"path":"https://httr2.r-lib.org/dev/reference/req_cookie_preserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and preserve cookies — req_cookie_preserve","title":"Set and preserve cookies — req_cookie_preserve","text":"Use req_cookie_set() set client side cookies sent server. default, httr2 uses clean slate every request meaning cookies automatically preserved across requests. preserve cookies, use req_cookie_preserve() along path cookie file read updated request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_cookie_preserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and preserve cookies — req_cookie_preserve","text":"","code":"req_cookie_preserve(req, path)  req_cookies_set(req, ...)"},{"path":"https://httr2.r-lib.org/dev/reference/req_cookie_preserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and preserve cookies — req_cookie_preserve","text":"req httr2 request object. path path file cookies read updated request. ... <dynamic-dots> Name-value pairs define query parameters. value must atomic vector, automatically escaped. opt-escaping, wrap strings ().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_cookie_preserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and preserve cookies — req_cookie_preserve","text":"","code":"# Use `req_cookies_set()` to set client-side cookies request(example_url()) |>   req_cookies_set(a = 1, b = 1) |>   req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> cookie: a=1;b=1 #> host: 127.0.0.1:34617 #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # Use `req_cookie_preserve()` to preserve server-side cookies across requests path <- tempfile()  # Set a server-side cookie request(example_url()) |>   req_cookie_preserve(path) |>   req_template(\"/cookies/set/:name/:value\", name = \"chocolate\", value = \"chip\") |>   req_perform() |>   resp_body_json() #> $cookies #> $cookies$chocolate #> [1] \"chip\" #>  #>   # Set another sever-side cookie request(example_url()) |>   req_cookie_preserve(path) |>   req_template(\"/cookies/set/:name/:value\", name = \"oatmeal\", value = \"raisin\") |>   req_perform() |>   resp_body_json() #> $cookies #> $cookies$chocolate #> [1] \"chip\" #>  #> $cookies$oatmeal #> [1] \"raisin\" #>  #>   # Add a client side cookie request(example_url()) |>   req_url_path(\"/cookies/set\") |>   req_cookie_preserve(path) |>   req_cookies_set(snicker = \"doodle\") |>   req_perform() |>   resp_body_json() #> $cookies #> $cookies$chocolate #> [1] \"chip\" #>  #> $cookies$oatmeal #> [1] \"raisin\" #>  #> $cookies$snicker #> [1] \"doodle\" #>  #>   # The cookie path has a straightforward format cat(readChar(path, nchars = 1e4)) #> # Netscape HTTP Cookie File #> # https://curl.se/docs/http-cookies.html #> # This file was generated by libcurl! Edit at your own risk. #>  #> 127.0.0.1\tFALSE\t/\tFALSE\t0\tchocolate\tchip #> 127.0.0.1\tFALSE\t/\tFALSE\t0\toatmeal\traisin"},{"path":"https://httr2.r-lib.org/dev/reference/req_dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a dry run — req_dry_run","title":"Perform a dry run — req_dry_run","text":"shows exactly httr2 send server, without actually sending anything. requires httpuv package works sending real HTTP request local webserver, thanks magic curl::curl_echo().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a dry run — req_dry_run","text":"","code":"req_dry_run(   req,   quiet = FALSE,   redact_headers = TRUE,   testing_headers = is_testing(),   pretty_json = getOption(\"httr2_pretty_json\", TRUE) )"},{"path":"https://httr2.r-lib.org/dev/reference/req_dry_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a dry run — req_dry_run","text":"req httr2 request object. quiet TRUE print anything. redact_headers Redact confidential data headers? Currently redacts contents Authorization header prevent accidentally leaking credentials debugging/reprexing. testing_headers TRUE, removes headers httr2 otherwise automatically added, likely change across test runs. currently includes: default User-Agent, varies based libcurl, curl, httr2 versions. `Host“ header, often set testing server. Content-Length header, often vary platform varying newline encodings. (also correct pretty_json = TRUE.) Accept-Encoding header, varies based libcurl built. pretty_json TRUE, automatically prettify JSON bodies.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_dry_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a dry run — req_dry_run","text":"Invisibly, list containing information request, including method, path, headers.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_dry_run.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Perform a dry run — req_dry_run","text":"HTTP version always HTTP/1.1 (since determine actually without connecting real server).","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_dry_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a dry run — req_dry_run","text":"","code":"# httr2 adds default User-Agent, Accept, and Accept-Encoding headers request(\"http://example.com\") |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # the Authorization header is automatically redacted to avoid leaking # credentials on the console req <- request(\"http://example.com\") |> req_auth_basic(\"user\", \"password\") req |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> authorization: <REDACTED> #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # if you need to see it, use redact_headers = FALSE req |> req_dry_run(redact_headers = FALSE) #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> authorization: <REDACTED> #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>"},{"path":"https://httr2.r-lib.org/dev/reference/req_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Control handling of HTTP errors — req_error","title":"Control handling of HTTP errors — req_error","text":"req_perform() automatically convert HTTP errors (.e. 4xx 5xx status code) R errors. Use req_error() either override defaults, extract additional information response useful expose user.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control handling of HTTP errors — req_error","text":"","code":"req_error(req, is_error = NULL, body = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/req_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control handling of HTTP errors — req_error","text":"req httr2 request object. is_error predicate function takes single argument (response) returns TRUE FALSE indicating whether R error signalled. body callback function takes single argument (response) returns character vector additional information include body error. vector passed along message argument rlang::abort() can use formatting supports.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control handling of HTTP errors — req_error","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_error.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Control handling of HTTP errors — req_error","text":"req_perform() designed succeed get valid HTTP response. two ways request can fail: HTTP request might fail, example connection dropped server exist. type error class c(\"httr2_failure\", \"httr2_error\"). HTTP request might succeed, return HTTP status code represents error, e.g. 404 Found specified resource found. type error (e.g.) class c(\"httr2_http_404\", \"httr2_http\", \"httr2_error\"). error classes designed used conjunction R's condition handling tools (https://adv-r.hadley.nz/conditions.html). example, want return default value server returns 404, use tryCatch():   want re-throw error additional context, use withCallingHandlers(), e.g.:   Learn error chaining rlang::topic-error-chaining.","code":"tryCatch(   req |> req_perform() |> resp_body_json(),   httr2_http_404 = function(cnd) NULL ) withCallingHandlers(   req |> req_perform() |> resp_body_json(),   httr2_http_404 = function(cnd) {     rlang::abort(\"Couldn't find user\", parent = cnd)   } )"},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control handling of HTTP errors — req_error","text":"","code":"# Performing this request usually generates an error because httr2 # converts HTTP errors into R errors: req <- request(example_url()) |>   req_url_path(\"/status/404\") try(req |> req_perform()) #> Error in req_perform(req) : HTTP 404 Not Found. # You can still retrieve it with last_response() last_response() #> <httr2_response> #> GET http://127.0.0.1:34617/status/404 #> Status: 404 Not Found #> Content-Type: text/plain #> Body: None  # But you might want to suppress this behaviour: resp <- req |>   req_error(is_error = \\(resp) FALSE) |>   req_perform() resp #> <httr2_response> #> GET http://127.0.0.1:34617/status/404 #> Status: 404 Not Found #> Content-Type: text/plain #> Body: None  # Or perhaps you're working with a server that routinely uses the # wrong HTTP error codes only 500s are really errors request(\"http://example.com\") |>   req_error(is_error = \\(resp) resp_status(resp) == 500) #> <httr2_request> #> GET http://example.com #> Body: empty #> Policies: #> • error_is_error: <function>  # Most typically you'll use req_error() to add additional information # extracted from the response body (or sometimes header): error_body <- function(resp) {   resp_body_json(resp)$error } request(\"http://example.com\") |>   req_error(body = error_body) #> <httr2_request> #> GET http://example.com #> Body: empty #> Policies: #> • error_body: <function> # Learn more in https://httr2.r-lib.org/articles/wrapping-apis.html"},{"path":"https://httr2.r-lib.org/dev/reference/req_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify request headers — req_headers","title":"Modify request headers — req_headers","text":"req_headers() allows set value header. req_headers_redacted() variation adds \"redacted\" headers, httr2 avoids printing console. good practice authentication headers avoid accidentally leaking log files.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify request headers — req_headers","text":"","code":"req_headers(.req, ..., .redact = NULL)  req_headers_redacted(.req, ...)"},{"path":"https://httr2.r-lib.org/dev/reference/req_headers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify request headers — req_headers","text":".req request. ... <dynamic-dots> Name-value pairs headers values. Use NULL reset value httr2's default. Use \"\" remove header. Use character vector repeat header. .redact character vector headers redact. Authorization header always redacted.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_headers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify request headers — req_headers","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_headers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify request headers — req_headers","text":"","code":"req <- request(\"http://example.com\")  # Use req_headers() to add arbitrary additional headers to the request req |>   req_headers(MyHeader = \"MyValue\") |>   req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> myheader: MyValue #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # Repeated use overrides the previous value: req |>   req_headers(MyHeader = \"Old value\") |>   req_headers(MyHeader = \"New value\") |>   req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> myheader: New value #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # Setting Accept to NULL uses curl's default: req |>   req_headers(Accept = NULL) |>   req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # Setting it to \"\" removes it: req |>   req_headers(Accept = \"\") |>   req_dry_run() #> GET / HTTP/1.1 #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # If you need to repeat a header, provide a vector of values # (this is rarely needed, but is important in a handful of cases) req |>   req_headers(HeaderName = c(\"Value 1\", \"Value 2\", \"Value 3\")) |>   req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> headername: Value 1,Value 2,Value 3 #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # If you have headers in a list, use !!! headers <- list(HeaderOne = \"one\", HeaderTwo = \"two\") req |>   req_headers(!!!headers, HeaderThree = \"three\") |>   req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> headerone: one #> headerthree: three #> headertwo: two #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   # Use `req_headers_redacted()`` to hide a header in the output req_secret <- req |>   req_headers_redacted(Secret = \"this-is-private\") |>   req_headers(Public = \"but-this-is-not\")  req_secret #> <httr2_request> #> GET http://example.com #> Headers: #> • Secret: <REDACTED> #> • Public: \"but-this-is-not\" #> Body: empty req_secret |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> public: but-this-is-not #> secret: <REDACTED> #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>"},{"path":"https://httr2.r-lib.org/dev/reference/req_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Set HTTP method in request — req_method","title":"Set HTTP method in request — req_method","text":"Use function use custom HTTP method like HEAD, DELETE, PATCH, UPDATE, OPTIONS. default method GET requests without body, POST requests body.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set HTTP method in request — req_method","text":"","code":"req_method(req, method)"},{"path":"https://httr2.r-lib.org/dev/reference/req_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set HTTP method in request — req_method","text":"req httr2 request object. method Custom HTTP method","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set HTTP method in request — req_method","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set HTTP method in request — req_method","text":"","code":"request(example_url()) |> req_method(\"PATCH\") #> <httr2_request> #> PATCH http://127.0.0.1:34617/ #> Body: empty request(example_url()) |> req_method(\"PUT\") #> <httr2_request> #> PUT http://127.0.0.1:34617/ #> Body: empty request(example_url()) |> req_method(\"HEAD\") #> <httr2_request> #> HEAD http://127.0.0.1:34617/ #> Body: empty"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication — req_oauth","title":"OAuth authentication — req_oauth","text":"low-level helper automatically authenticating request OAuth flow, caching access token refreshing possible. need use function implementing OAuth flow.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication — req_oauth","text":"","code":"req_oauth(req, flow, flow_params, cache)"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication — req_oauth","text":"req httr2 request object. flow oauth_flow_ function used generate access token. flow_params Parameters flow. named list whose names match argument names flow. cache object controls token cached. list containing three functions: get() retrieves token cache, returning NULL cached yet. set() saves token cache. clear() removes token cache","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication — req_oauth","text":"oauth_token.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_auth_code.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth with authorization code — req_oauth_auth_code","title":"OAuth with authorization code — req_oauth_auth_code","text":"Authenticate using OAuth authorization code flow, defined Section 4.1 RFC 6749. flow commonly used OAuth flow user opens page browser, approves access, returns R. possible, redirects browser back temporary local webserver capture authorization code. possible (e.g., running hosted platform like RStudio Server), provide custom redirect_uri httr2 prompt user enter code manually. Learn overall OAuth authentication flow https://httr2.r-lib.org/articles/oauth.html, motivations behind flow https://stack-auth.com/blog/oauth--first-principles.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_auth_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth with authorization code — req_oauth_auth_code","text":"","code":"req_oauth_auth_code(   req,   client,   auth_url,   scope = NULL,   pkce = TRUE,   auth_params = list(),   token_params = list(),   redirect_uri = oauth_redirect_uri(),   cache_disk = FALSE,   cache_key = NULL,   host_name = deprecated(),   host_ip = deprecated(),   port = deprecated() )  oauth_flow_auth_code(   client,   auth_url,   scope = NULL,   pkce = TRUE,   auth_params = list(),   token_params = list(),   redirect_uri = oauth_redirect_uri(),   host_name = deprecated(),   host_ip = deprecated(),   port = deprecated() )"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_auth_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth with authorization code — req_oauth_auth_code","text":"req httr2 request object. client oauth_client(). auth_url Authorization url; need discover reading documentation. scope Scopes requested resource owner. pkce Use \"Proof Key Code Exchange\"? adds extra layer security always used supported server. auth_params list containing additional parameters passed oauth_flow_auth_code_url(). token_params List containing additional parameters passed token_url. redirect_uri URL redirect back authorization complete. Often must registered API advance. httr2 supports three forms redirect. Firstly, can use localhost url (default), httr2 set temporary webserver listen OAuth redirect. case, httr2 automatically append random port. need set fixed port API requires , specify (e.g.) \"http://localhost:1011\". technique works well working computer. Secondly, can provide URL website uses Javascript give user code copy paste back R session (see https://www.tidyverse.org/google-callback/ https://github.com/r-lib/gargle/blob/main/inst/pseudo-oob/google-callback/index.html examples). less convenient (requires user interaction) also works hosted environments like RStudio Server. Finally, hosted platforms might set HTTR2_OAUTH_REDIRECT_URL HTTR2_OAUTH_CODE_SOURCE_URL environment variables. case, httr2 use HTTR2_OAUTH_REDIRECT_URL redirects default, poll HTTR2_OAUTH_CODE_SOURCE_URL endpoint state parameter receives code response (encounters error). delegates completion authorization flow hosted platform. cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Learn https://httr2.r-lib.org/articles/oauth.html. cache_key want cache multiple tokens per app, use key disambiguate . host_name, host_ip, port Now use redirect_uri instead.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_auth_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth with authorization code — req_oauth_auth_code","text":"req_oauth_auth_code() returns modified HTTP request use OAuth; oauth_flow_auth_code() returns oauth_token.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_auth_code.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"OAuth with authorization code — req_oauth_auth_code","text":"authorization code flow used web applications native applications (equivalent R packages). RFC 8252 spells important considerations native apps. importantly way native apps keep secrets users. means server either require client_secret (.e. public client confidential client) ensure possession client_secret grant significant privileges. modern APIs major providers (like Azure Google) explicitly support native apps. However, cases, even older APIs, possessing client_secret provides limited ability perform harmful actions. Therefore, general principle acceptable include R package, long mildly obfuscated protect credential scraping attacks (aim acquire large numbers client secrets scanning public sites like GitHub). goal ensure obtaining client credentials work just creating new client.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_auth_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth with authorization code — req_oauth_auth_code","text":"","code":"req_auth_github <- function(req) {   req_oauth_auth_code(     req,     client = example_github_client(),     auth_url = \"https://github.com/login/oauth/authorize\"   ) }  request(\"https://api.github.com/user\") |>   req_auth_github() #> <httr2_request> #> GET https://api.github.com/user #> Body: empty #> Policies: #> • auth_sign : <list> #> • auth_oauth: TRUE"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_bearer_jwt.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth with a bearer JWT (JSON web token) — req_oauth_bearer_jwt","title":"OAuth with a bearer JWT (JSON web token) — req_oauth_bearer_jwt","text":"Authenticate using Bearer JWT (JSON web token) authorization grant get access token, defined Section 2.1 RFC 7523. often used service accounts, accounts used primarily automated environments. Learn overall OAuth authentication flow https://httr2.r-lib.org/articles/oauth.html.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_bearer_jwt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth with a bearer JWT (JSON web token) — req_oauth_bearer_jwt","text":"","code":"req_oauth_bearer_jwt(   req,   client,   claim,   signature = \"jwt_encode_sig\",   signature_params = list(),   scope = NULL,   token_params = list() )  oauth_flow_bearer_jwt(   client,   claim,   signature = \"jwt_encode_sig\",   signature_params = list(),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_bearer_jwt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth with a bearer JWT (JSON web token) — req_oauth_bearer_jwt","text":"req httr2 request object. client oauth_client(). claim list claims. elements claim set static apart iat, nbf, exp, jti, provide list jwt_claim() automatically fill dynamic components. components need vary, can instead provide zero-argument callback function call jwt_claim(). signature Function use sign claim, e.g. jwt_encode_sig(). signature_params Additional arguments passed signature, e.g. size, header. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_bearer_jwt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth with a bearer JWT (JSON web token) — req_oauth_bearer_jwt","text":"req_oauth_bearer_jwt() returns modified HTTP request use OAuth; oauth_flow_bearer_jwt() returns oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_bearer_jwt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth with a bearer JWT (JSON web token) — req_oauth_bearer_jwt","text":"","code":"req_auth <- function(req) {   req_oauth_bearer_jwt(     req,     client = oauth_client(\"example\", \"https://example.com/get_token\"),     claim = jwt_claim()   ) }  request(\"https://example.com\") |>  req_auth() #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • auth_sign : <list> #> • auth_oauth: TRUE"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_client_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth with client credentials — req_oauth_client_credentials","title":"OAuth with client credentials — req_oauth_client_credentials","text":"Authenticate using OAuth client credentials flow, defined Section 4.4 RFC 6749. used allow client access resources controls directly, behalf user. Learn overall OAuth authentication flow https://httr2.r-lib.org/articles/oauth.html.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_client_credentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth with client credentials — req_oauth_client_credentials","text":"","code":"req_oauth_client_credentials(req, client, scope = NULL, token_params = list())  oauth_flow_client_credentials(client, scope = NULL, token_params = list())"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_client_credentials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth with client credentials — req_oauth_client_credentials","text":"req httr2 request object. client oauth_client(). scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_client_credentials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth with client credentials — req_oauth_client_credentials","text":"req_oauth_client_credentials() returns modified HTTP request use OAuth; oauth_flow_client_credentials() returns oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_client_credentials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth with client credentials — req_oauth_client_credentials","text":"","code":"req_auth <- function(req) {   req_oauth_client_credentials(     req,     client = oauth_client(\"example\", \"https://example.com/get_token\")   ) }  request(\"https://example.com\") |>   req_auth() #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • auth_sign : <list> #> • auth_oauth: TRUE"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_device.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth with device flow — req_oauth_device","title":"OAuth with device flow — req_oauth_device","text":"Authenticate using OAuth device flow, defined RFC 8628. designed devices access web browser (ever authenticated app TV, probably flow used), also works well within R. Learn overall OAuth authentication flow https://httr2.r-lib.org/articles/oauth.html.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth with device flow — req_oauth_device","text":"","code":"req_oauth_device(   req,   client,   auth_url,   scope = NULL,   auth_params = list(),   token_params = list(),   cache_disk = FALSE,   cache_key = NULL )  oauth_flow_device(   client,   auth_url,   pkce = FALSE,   scope = NULL,   auth_params = list(),   token_params = list() )"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth with device flow — req_oauth_device","text":"req httr2 request object. client oauth_client(). auth_url Authorization url; need discover reading documentation. scope Scopes requested resource owner. auth_params list containing additional parameters passed oauth_flow_auth_code_url(). token_params List containing additional parameters passed token_url. cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Learn https://httr2.r-lib.org/articles/oauth.html. cache_key want cache multiple tokens per app, use key disambiguate . pkce Use \"Proof Key Code Exchange\"? adds extra layer security always used supported server.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_device.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth with device flow — req_oauth_device","text":"req_oauth_device() returns modified HTTP request use OAuth; oauth_flow_device() returns oauth_token.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_device.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth with device flow — req_oauth_device","text":"","code":"req_auth_github <- function(req) {   req_oauth_device(     req,     client = example_github_client(),     auth_url = \"https://github.com/login/device/code\"   ) }  request(\"https://api.github.com/user\") |>   req_auth_github() #> <httr2_request> #> GET https://api.github.com/user #> Body: empty #> Policies: #> • auth_sign : <list> #> • auth_oauth: TRUE"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_password.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth with username and password — req_oauth_password","title":"OAuth with username and password — req_oauth_password","text":"function implements OAuth resource owner password flow, defined Section 4.3 RFC 6749. allows user supply password , exchanging access token can cached locally. Learn overall OAuth authentication flow https://httr2.r-lib.org/articles/oauth.html","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth with username and password — req_oauth_password","text":"","code":"req_oauth_password(   req,   client,   username,   password = NULL,   scope = NULL,   token_params = list(),   cache_disk = FALSE,   cache_key = username )  oauth_flow_password(   client,   username,   password = NULL,   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth with username and password — req_oauth_password","text":"req httr2 request object. client oauth_client(). username User name. password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url. cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Learn https://httr2.r-lib.org/articles/oauth.html. cache_key want cache multiple tokens per app, use key disambiguate .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_password.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth with username and password — req_oauth_password","text":"req_oauth_password() returns modified HTTP request use OAuth; oauth_flow_password() returns oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_password.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth with username and password — req_oauth_password","text":"","code":"req_auth <- function(req) {   req_oauth_password(req,     client = oauth_client(\"example\", \"https://example.com/get_token\"),     username = \"username\"   ) } if (interactive()) {   request(\"https://example.com\") |>     req_auth() }"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_refresh.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth with a refresh token — req_oauth_refresh","title":"OAuth with a refresh token — req_oauth_refresh","text":"Authenticate using refresh token, following process described Section 6 RFC 6749. technique primarily useful testing: can manually retrieve OAuth token using another OAuth flow (e.g. oauth_flow_auth_code()), extract refresh token result, save environment variable use automated tests. requesting access token, server may also return new refresh token. happens, oauth_flow_refresh() warn, retrieve new update refresh token update stored value. find happening lot, sign using different flow automated tests. Learn overall OAuth authentication flow https://httr2.r-lib.org/articles/oauth.html.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_refresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth with a refresh token — req_oauth_refresh","text":"","code":"req_oauth_refresh(   req,   client,   refresh_token = Sys.getenv(\"HTTR2_REFRESH_TOKEN\"),   scope = NULL,   token_params = list() )  oauth_flow_refresh(   client,   refresh_token = Sys.getenv(\"HTTR2_REFRESH_TOKEN\"),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_refresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth with a refresh token — req_oauth_refresh","text":"req httr2 request object. client oauth_client(). refresh_token refresh token. equivalent password typed console stored script. Instead, recommend placing environment variable; default behaviour look HTTR2_REFRESH_TOKEN. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_refresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth with a refresh token — req_oauth_refresh","text":"req_oauth_refresh() returns modified HTTP request use OAuth; oauth_flow_refresh() returns oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_refresh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth with a refresh token — req_oauth_refresh","text":"","code":"client <- oauth_client(\"example\", \"https://example.com/get_token\") req <- request(\"https://example.com\") req |> req_oauth_refresh(client) #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • auth_sign : <list> #> • auth_oauth: TRUE"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_token_exchange.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth token exchange — req_oauth_token_exchange","title":"OAuth token exchange — req_oauth_token_exchange","text":"Authenticate exchanging one security token another, defined Section 2 RFC 8693. typically used advanced authorization flows involve \"delegation\" \"impersonation\" semantics, client accesses resource behalf another party, client's identity federated another provider. Learn overall OAuth authentication flow https://httr2.r-lib.org/articles/oauth.html.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_token_exchange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth token exchange — req_oauth_token_exchange","text":"","code":"req_oauth_token_exchange(   req,   client,   subject_token,   subject_token_type,   resource = NULL,   audience = NULL,   scope = NULL,   requested_token_type = NULL,   actor_token = NULL,   actor_token_type = NULL,   token_params = list() )  oauth_flow_token_exchange(   client,   subject_token,   subject_token_type,   resource = NULL,   audience = NULL,   scope = NULL,   requested_token_type = NULL,   actor_token = NULL,   actor_token_type = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_token_exchange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth token exchange — req_oauth_token_exchange","text":"req httr2 request object. client oauth_client(). subject_token security token exchange. usually OpenID Connect ID token SAML2 assertion. subject_token_type URI describes type security token. Usually one options Section 3 RFC 8693. resource URI identifies resource client trying access, applicable. audience logical name identifies resource client trying access, applicable. Usually one resource audience must supplied. scope Scopes requested resource owner. requested_token_type optional URI describes type security token requested. Usually one options Section 3 RFC 8693. actor_token optional security token represents client, rather identity behind subject token. actor_token_type actor_token NULL, must URI describes type security token requested. Usually one options Section 3 RFC 8693. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_token_exchange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth token exchange — req_oauth_token_exchange","text":"req_oauth_token_exchange() returns modified HTTP request exchange one security token another; oauth_flow_token_exchange() returns resulting oauth_token directly.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_oauth_token_exchange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth token exchange — req_oauth_token_exchange","text":"","code":"# List Google Cloud storage buckets using an OIDC token obtained # from e.g. Microsoft Entra ID or Okta and federated to Google. (A real # project ID and workforce pool would be required for this in practice.) # # See: https://cloud.google.com/iam/docs/workforce-obtaining-short-lived-credentials oidc_token <- \"an ID token from Okta\" request(\"https://storage.googleapis.com/storage/v1/b?project=123456\") |>   req_oauth_token_exchange(     client = oauth_client(\"gcp\", \"https://sts.googleapis.com/v1/token\"),     subject_token = oidc_token,     subject_token_type = \"urn:ietf:params:oauth:token-type:id_token\",     scope = \"https://www.googleapis.com/auth/cloud-platform\",     requested_token_type = \"urn:ietf:params:oauth:token-type:access_token\",     audience = \"//iam.googleapis.com/locations/global/workforcePools/123/providers/456\",     token_params = list(       options = '{\"userProject\":\"123456\"}'     )   ) #> <httr2_request> #> GET https://storage.googleapis.com/storage/v1/b?project=123456 #> Body: empty #> Policies: #> • auth_sign : <list> #> • auth_oauth: TRUE"},{"path":"https://httr2.r-lib.org/dev/reference/req_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set arbitrary curl options in request — req_options","title":"Set arbitrary curl options in request — req_options","text":"req_options() expert use ; allows directly set libcurl options access features otherwise available httr2.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set arbitrary curl options in request — req_options","text":"","code":"req_options(.req, ...)"},{"path":"https://httr2.r-lib.org/dev/reference/req_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set arbitrary curl options in request — req_options","text":".req request. ... <dynamic-dots> Name-value pairs. name valid curl option, found curl::curl_options().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set arbitrary curl options in request — req_options","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set arbitrary curl options in request — req_options","text":"","code":"# req_options() allows you to access curl options that are not otherwise # exposed by httr2. For example, in very special cases you may need to # turn off SSL verification. This is generally a bad idea so httr2 doesn't # provide a convenient wrapper, but if you really know what you're doing # you can still access this libcurl option: req <- request(\"https://example.com\") |>   req_options(ssl_verifypeer = 0)"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request to get a response — req_perform","title":"Perform a request to get a response — req_perform","text":"preparing request, call req_perform() perform , fetching results back R response. default HTTP method GET unless body (set req_body_json friends) present, case POST. can override defaults req_method().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request to get a response — req_perform","text":"","code":"req_perform(   req,   path = NULL,   verbosity = NULL,   mock = getOption(\"httr2_mock\", NULL),   error_call = current_env() )"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a request to get a response — req_perform","text":"req httr2 request object. path Optionally, path save body response. useful large responses since avoids storing response memory. verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly. mock mocking function. supplied, function called request. return either NULL (want handle request) response (). See with_mock()/ local_mock() details. error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a request to get a response — req_perform","text":"HTTP request succeeds, status code ok (e.g. 200), HTTP response. HTTP request succeeds, status code error (e.g 404), error class c(\"httr2_http_404\", \"httr2_http\"). default, 400 500 status codes treated error, can customise req_error(). HTTP request fails (e.g. connection dropped server exist), error class \"httr2_failure\".","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform.html","id":"requests","dir":"Reference","previous_headings":"","what":"Requests","title":"Perform a request to get a response — req_perform","text":"Note one call req_perform() may perform multiple HTTP requests: url redirected 301, 302, 303, 307, curl automatically follow Location header new location. configured retries req_retry() request fails transient problem, req_perform() try waiting bit. See req_retry() details. using OAuth, cached token expired, req_perform() get new token either using refresh token (available) running OAuth flow.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform.html","id":"progress-bar","dir":"Reference","previous_headings":"","what":"Progress bar","title":"Perform a request to get a response — req_perform","text":"req_perform() automatically add progress bar needs wait requests req_throttle() req_retry(). can turn progress bar (just show total time wait) setting options(httr2_progress = FALSE).","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_perform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a request to get a response — req_perform","text":"","code":"request(\"https://google.com\") |>   req_perform() #> <httr2_response> #> GET https://www.google.com/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (16883 bytes)"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request and return a streaming connection — req_perform_connection","title":"Perform a request and return a streaming connection — req_perform_connection","text":"Use req_perform_connection() perform request want stream response body. response returned req_perform_connection() includes connection body. can use resp_stream_raw(), resp_stream_lines(), resp_stream_sse() retrieve data chunk time. Always finish closing connection calling close(response). alternative interface req_perform_stream() returns connection can use pull data, rather providing callbacks data pushed . useful want work handling inputs stream.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request and return a streaming connection — req_perform_connection","text":"","code":"req_perform_connection(req, blocking = TRUE, verbosity = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a request and return a streaming connection — req_perform_connection","text":"req httr2 request object. blocking retrieving data, connection block wait desired information immediately return (possibly nothing)? verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies streamed 3: show headers, bodies, curl status messages, raw SSEs, stream buffer management Use with_verbosity() control verbosity requests affect directly.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a request and return a streaming connection — req_perform_connection","text":"","code":"req <- request(example_url()) |>   req_url_path(\"/stream-bytes/32768\") resp <- req_perform_connection(req)  length(resp_stream_raw(resp, kb = 16)) #> [1] 16384 length(resp_stream_raw(resp, kb = 16)) #> [1] 16384 # When the stream has no more data, you'll get an empty result: length(resp_stream_raw(resp, kb = 16)) #> [1] 0  # Always close the response when you're done close(resp)  # You can loop until complete with resp_stream_is_complete() resp <- req_perform_connection(req) while (!resp_stream_is_complete(resp)) {   print(length(resp_stream_raw(resp, kb = 12))) } #> [1] 12288 #> [1] 12288 #> [1] 8192 close(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_iterative.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform requests iteratively, generating new requests from previous responses — req_perform_iterative","title":"Perform requests iteratively, generating new requests from previous responses — req_perform_iterative","text":"req_perform_iterative() iteratively generates performs requests, using callback function, next_req, define next request based current request response. probably want pair iteration helper use multi-response handler process result.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_iterative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform requests iteratively, generating new requests from previous responses — req_perform_iterative","text":"","code":"req_perform_iterative(   req,   next_req,   path = NULL,   max_reqs = 20,   on_error = c(\"stop\", \"return\"),   progress = TRUE )"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_iterative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform requests iteratively, generating new requests from previous responses — req_perform_iterative","text":"req first request perform. next_req function takes previous response (resp) request (req) returns request next page NULL iteration terminate. See details. path Optionally, path save body request. glue string uses {} distinguish different requests. Useful large responses avoids storing response memory. max_reqs maximum number requests perform. Use Inf perform requests next_req() returns NULL. on_error happen request fails? \"stop\", default: stop iterating error. \"return\": stop iterating, returning successful responses far, well error object failed request. progress Display progress bar status requests? Use TRUE turn basic progress bar, use string give name, see progress_bars customize ways. compatible req_progress(), httr2 can display single progress bar time.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_iterative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform requests iteratively, generating new requests from previous responses — req_perform_iterative","text":"list, length max_reqs, containing responses possibly one error object, on_error \"return\" one requests errors. present, error object always last element list. httr2 errors captured; see req_error() details.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_iterative.html","id":"next-req-","dir":"Reference","previous_headings":"","what":"next_req()","title":"Perform requests iteratively, generating new requests from previous responses — req_perform_iterative","text":"key piece makes req_perform_iterative() work next_req() argument. common cases, can use one canned helpers, like iterate_with_offset(). , however, API wrapping uses different pagination system, need write . section gives advice. Generally, function needs inspect response, extract data , use modify previous request. example, imagine response returns cursor, needs added body request. simplest version function might look like :   one problem : pages return, cursor NULL, req_body_json_modify() still generate meaningful request. need handle specifically returning NULL:   value NULL lets req_perform_iterative() know pages remaining. one last feature might want add iterator: know total number pages, nice let req_perform_iterative() know can adjust progress bar. (ever decrease number pages, increase .) can signal total number pages calling signal_total_pages(), like :","code":"next_req <- function(resp, req) {   cursor <- resp_body_json(resp)$next_cursor   req |> req_body_json_modify(cursor = cursor) } next_req <- function(resp, req) {   cursor <- resp_body_json(resp)$next_cursor   if (is.null(cursor))     return(NULL)   req |> req_body_json_modify(cursor = cursor) } next_req <- function(resp, req) {   body <- resp_body_json(resp)   cursor <- body$next_cursor   if (is.null(cursor))     return(NULL)    signal_total_pages(body$pages)   req |> req_body_json_modify(cursor = cursor) }"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_iterative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform requests iteratively, generating new requests from previous responses — req_perform_iterative","text":"","code":"req <- request(example_url()) |>   req_url_path(\"/iris\") |>   req_throttle(10) |>   req_url_query(limit = 5)  resps <- req_perform_iterative(req, iterate_with_offset(\"page_index\"))  data <- resps |> resps_data(function(resp) {   data <- resp_body_json(resp)$data   data.frame(     Sepal.Length = sapply(data, `[[`, \"Sepal.Length\"),     Sepal.Width = sapply(data, `[[`, \"Sepal.Width\"),     Petal.Length = sapply(data, `[[`, \"Petal.Length\"),     Petal.Width = sapply(data, `[[`, \"Petal.Width\"),     Species = sapply(data, `[[`, \"Species\")   ) }) str(data) #> 'data.frame':\t100 obs. of  5 variables: #>  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>  $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ..."},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a list of requests in parallel — req_perform_parallel","title":"Perform a list of requests in parallel — req_perform_parallel","text":"variation req_perform_sequential() performs multiple requests parallel. Never use without req_throttle(); otherwise easy pummel server large number simultaneous requests. running, get progress bar looks like: [working] (1 + 4) -> 5 -> 5. string tells current status queue (e.g. working, waiting, errored) followed (number pending requests + pending retried requests) -> number active requests -> number complete requests.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_parallel.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Perform a list of requests in parallel — req_perform_parallel","text":"main limitation req_perform_parallel() assumes applies req_throttle() req_retry() across requests. means, example, request 1 throttled, request 2 , req_perform_parallel() wait request 1 performing request 2. makes suitable performing many parallel requests host, rather mix different hosts. probably possible remove limitation, enough work unlikely unless know people fine useful: please let know! Additionally, respect max_tries argument req_retry() five requests flight first one gets rate limited, likely others . also means circuit breaker never triggered.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a list of requests in parallel — req_perform_parallel","text":"","code":"req_perform_parallel(   reqs,   paths = NULL,   pool = deprecated(),   on_error = c(\"stop\", \"return\", \"continue\"),   progress = TRUE,   max_active = 10 )"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a list of requests in parallel — req_perform_parallel","text":"reqs list requests. paths optional character vector paths, want download response bodies disk. supplied, must length reqs. pool . longer supported; control maximum number concurrent requests, set max_active. on_error happen one requests fails? stop, default: stop iterating error. return: stop iterating, returning successful responses received far, well error object failed request. continue: continue iterating, recording errors result. progress Display progress bar status requests? Use TRUE turn basic progress bar, use string give name, see progress_bars customize ways. compatible req_progress(), httr2 can display single progress bar time. max_active Maximum number concurrent requests.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a list of requests in parallel — req_perform_parallel","text":"list, length reqs, containing responses possibly error objects, on_error \"return\" \"continue\" one responses errors. on_error \"return\" errors ith request, ith element result error object, remaining elements NULL. on_error \"continue\", mix requests error objects. httr2 errors captured; see req_error() details.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a list of requests in parallel — req_perform_parallel","text":"","code":"# Requesting these 4 pages one at a time would take 2 seconds: request_base <- request(example_url()) |>   req_throttle(capacity = 100, fill_time_s = 60) reqs <- list(   request_base |> req_url_path(\"/delay/0.5\"),   request_base |> req_url_path(\"/delay/0.5\"),   request_base |> req_url_path(\"/delay/0.5\"),   request_base |> req_url_path(\"/delay/0.5\") ) # But it's much faster if you request in parallel system.time(resps <- req_perform_parallel(reqs)) #> [working] (0 + 0) -> 2 -> 2 | ■■■■■■■■■■■■■■■■                  50% #> [working] (0 + 0) -> 0 -> 4 | ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #>    user  system elapsed  #>   0.051   0.000   1.064   # req_perform_parallel() will fail on error reqs <- list(   request_base |> req_url_path(\"/status/200\"),   request_base |> req_url_path(\"/status/400\"),   request(\"FAILURE\") ) try(resps <- req_perform_parallel(reqs)) #> Error in req_perform_parallel(reqs) : HTTP 400 Bad Request.  # but can use on_error to capture all successful results resps <- req_perform_parallel(reqs, on_error = \"continue\")  # Inspect the successful responses resps |> resps_successes() #> [[1]] #> <httr2_response> #> GET http://127.0.0.1:34617/status/200 #> Status: 200 OK #> Content-Type: text/plain #> Body: None #>   # And the failed responses resps |> resps_failures() |> resps_requests() #> [[1]] #> <httr2_request> #> GET http://127.0.0.1:34617/status/400 #> Body: empty #> Policies: #> • throttle_realm: \"127.0.0.1\" #>  #> [[2]] #> <httr2_request> #> GET FAILURE #> Body: empty #>"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_promise.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform request asynchronously using the promises package — req_perform_promise","title":"Perform request asynchronously using the promises package — req_perform_promise","text":"variation req_perform() returns promises::promise() object immediately performs request background, returning program control request finished. See promises package documentation details work resulting promise object. using together later::with_temp_loop() private event loops, new curl pool made curl::new_pool() created requests made within loop ensure requests polled loop. Like req_perform_parallel(), exercise caution using function; easy pummel server many simultaneous requests. Also, servers can handle 1 request time, responses may still return sequentially. req_perform_promise() also similar limitations req_perform_parallel() function, : retrieve new OAuth token expires promised request created actually requested. perform throttling req_throttle(). attempt retries described req_retry(). consults cache set req_cache() request promised.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_promise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform request asynchronously using the promises package — req_perform_promise","text":"","code":"req_perform_promise(req, path = NULL, pool = NULL, verbosity = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_promise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform request asynchronously using the promises package — req_perform_promise","text":"req httr2 request object. path Optionally, path save body response. useful large responses since avoids storing response memory. pool . longer supported; control maximum number concurrent requests, set max_active. verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_promise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform request asynchronously using the promises package — req_perform_promise","text":"promises::promise() object resolves response successful rejects errors thrown req_perform().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_promise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform request asynchronously using the promises package — req_perform_promise","text":"","code":"if (FALSE) { # \\dontrun{ library(promises) request_base <- request(example_url()) |> req_url_path_append(\"delay\")  p <- request_base |> req_url_path_append(2) |> req_perform_promise()  # A promise object, not particularly useful on its own p  # Use promise chaining functions to access results p %...>%   resp_body_json() %...>%   print()   # Can run two requests at the same time p1 <- request_base |> req_url_path_append(2) |> req_perform_promise() p2 <- request_base |> req_url_path_append(1) |> req_perform_promise()  p1 %...>%   resp_url_path %...>%   paste0(., \" finished\") %...>%   print()  p2 %...>%   resp_url_path %...>%   paste0(., \" finished\") %...>%   print()  # See the [promises package documentation](https://rstudio.github.io/promises/) # for more information on working with promises } # }"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_sequential.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform multiple requests in sequence — req_perform_sequential","title":"Perform multiple requests in sequence — req_perform_sequential","text":"Given list requests, function performs turn, returning list responses. serial equivalent req_perform_parallel().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_sequential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform multiple requests in sequence — req_perform_sequential","text":"","code":"req_perform_sequential(   reqs,   paths = NULL,   on_error = c(\"stop\", \"return\", \"continue\"),   progress = TRUE )"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_sequential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform multiple requests in sequence — req_perform_sequential","text":"reqs list requests. paths optional character vector paths, want download response bodies disk. supplied, must length reqs. on_error happen one requests fails? stop, default: stop iterating error. return: stop iterating, returning successful responses received far, well error object failed request. continue: continue iterating, recording errors result. progress Display progress bar status requests? Use TRUE turn basic progress bar, use string give name, see progress_bars customize ways. compatible req_progress(), httr2 can display single progress bar time.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_sequential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform multiple requests in sequence — req_perform_sequential","text":"list, length reqs, containing responses possibly error objects, on_error \"return\" \"continue\" one responses errors. on_error \"return\" errors ith request, ith element result error object, remaining elements NULL. on_error \"continue\", mix requests error objects. httr2 errors captured; see req_error() details.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_sequential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform multiple requests in sequence — req_perform_sequential","text":"","code":"# One use of req_perform_sequential() is if the API allows you to request # data for multiple objects, you want data for more objects than can fit # in one request. req <- request(\"https://api.restful-api.dev/objects\")  # Imagine we have 50 ids: ids <- sort(sample(100, 50))  # But the API only allows us to request 10 at time. So we first use split # and some modulo arithmetic magic to generate chunks of length 10 chunks <- unname(split(ids, (seq_along(ids) - 1) %/% 10))  # Then we use lapply to generate one request for each chunk: reqs <- chunks |> lapply(\\(idx) req |> req_url_query(id = idx, .multi = \"comma\"))  # Then we can perform them all and get the results if (FALSE) { # \\dontrun{ resps <- reqs |> req_perform_sequential() resps_data(resps, \\(resp) resp_body_json(resp)) } # }"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request and handle data as it streams back — req_perform_stream","title":"Perform a request and handle data as it streams back — req_perform_stream","text":"now recommend req_perform_connection() since considerably flexible interface. Unless hear compelling reasons otherwise, likely deprecate req_perform_stream() future release. preparing request, call req_perform_stream() perform request handle result streaming callback. useful streaming HTTP APIs potentially stream never ends. callback called result successful. need stream error response, can use req_error() suppress error handling body streamed .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request and handle data as it streams back — req_perform_stream","text":"","code":"req_perform_stream(   req,   callback,   timeout_sec = Inf,   buffer_kb = 64,   round = c(\"byte\", \"line\") )"},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a request and handle data as it streams back — req_perform_stream","text":"req httr2 request object. callback single argument callback function. called repeatedly raw vector whenever least buffer_kb worth data process. must return TRUE continue streaming. timeout_sec Number seconds process stream . buffer_kb Buffer size, kilobytes. round raw vector sent callback rounded? Choose \"byte\", \"line\", supply function takes raw vector bytes returns locations possible cut points (integer() none).","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a request and handle data as it streams back — req_perform_stream","text":"HTTP response. body empty request successful (since callback function handled ). body contain HTTP response body request unsuccessful.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_perform_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a request and handle data as it streams back — req_perform_stream","text":"","code":"show_bytes <- function(x) {   cat(\"Got \", length(x), \" bytes\\n\", sep = \"\")   TRUE } resp <- request(example_url()) |>   req_url_path(\"/stream-bytes/100000\") |>   req_perform_stream(show_bytes, buffer_kb = 32) #> Got 32768 bytes #> Got 32768 bytes #> Got 32768 bytes #> Got 1696 bytes resp #> <httr2_response> #> GET http://127.0.0.1:34617/stream-bytes/100000 #> Status: 200 OK #> Content-Type: application/octet-stream #> Body: None"},{"path":"https://httr2.r-lib.org/dev/reference/req_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a progress bar to long downloads or uploads — req_progress","title":"Add a progress bar to long downloads or uploads — req_progress","text":"uploading downloading large file, often useful provide progress bar know long wait.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a progress bar to long downloads or uploads — req_progress","text":"","code":"req_progress(req, type = c(\"down\", \"up\"))"},{"path":"https://httr2.r-lib.org/dev/reference/req_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a progress bar to long downloads or uploads — req_progress","text":"req request. type Type progress display: either number bytes uploaded downloaded.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a progress bar to long downloads or uploads — req_progress","text":"","code":"req <- request(\"https://r4ds.s3.us-west-2.amazonaws.com/seattle-library-checkouts.csv\") |>   req_progress()  if (FALSE) { # \\dontrun{ path <- tempfile() req |> req_perform(path = path) } # }"},{"path":"https://httr2.r-lib.org/dev/reference/req_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a proxy for a request — req_proxy","title":"Use a proxy for a request — req_proxy","text":"Use proxy request","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a proxy for a request — req_proxy","text":"","code":"req_proxy(   req,   url,   port = NULL,   username = NULL,   password = NULL,   auth = \"basic\" )"},{"path":"https://httr2.r-lib.org/dev/reference/req_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a proxy for a request — req_proxy","text":"req httr2 request object. url, port Location proxy. username, password Login details proxy, needed. auth Type HTTP authentication use. one following: basic, digest, digest_ie, gssnegotiate, ntlm, .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_proxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a proxy for a request — req_proxy","text":"","code":"# Proxy from https://www.proxynova.com/proxy-server-list/ if (FALSE) { # \\dontrun{ request(\"http://hadley.nz\") |>   req_proxy(\"20.116.130.70\", 3128) |>   req_perform() } # }"},{"path":"https://httr2.r-lib.org/dev/reference/req_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically retry a request on failure — req_retry","title":"Automatically retry a request on failure — req_retry","text":"req_retry() allows req_perform() automatically retry failing requests. particularly important APIs rate limiting, can also useful dealing flaky servers. default, req_perform() retry response 429 (\"many requests\", often used rate limiting) 503 (\"service unavailable\"). API wrapping transient status codes (conveys transience property response), can override default is_transient. set retry_on_failure = TRUE, request retry either HTTP request HTTP response complete successfully, leading error curl, lower-level library httr2 uses perform HTTP requests. occurs, example, Wi-Fi .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_retry.html","id":"delay","dir":"Reference","previous_headings":"","what":"Delay","title":"Automatically retry a request on failure — req_retry","text":"bad idea immediately retry request, req_perform() wait little trying : response contains Retry-header, httr2 wait amount time specifies. API wrapping conveys information different header (property response), can override default behavior retry_after. Otherwise, httr2 use \"truncated exponential backoff full jitter\", .e., wait random amount time one second 2 ^ tries seconds, capped maximum 60 seconds. words, waits runif(1, 1, 2) seconds first failure, runif(1, 1, 4) second, runif(1, 1, 8) third, . prefer different strategy, can override default backoff.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically retry a request on failure — req_retry","text":"","code":"req_retry(   req,   max_tries = NULL,   max_seconds = NULL,   retry_on_failure = FALSE,   is_transient = NULL,   backoff = NULL,   after = NULL,   failure_threshold = Inf,   failure_timeout = 30,   failure_realm = NULL )"},{"path":"https://httr2.r-lib.org/dev/reference/req_retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically retry a request on failure — req_retry","text":"req httr2 request object. max_tries, max_seconds Cap maximum number attempts (max_tries), total elapsed time first request (max_seconds), . max_tries total number attempts made, always greater one. retry_on_failure Treat low-level failures transient errors can retried. is_transient predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error. backoff function takes single argument (number failed attempts far) returns number seconds wait. function takes single argument (response) returns either number seconds wait NA. NA indicates precise wait time available backoff strategy used instead. failure_threshold, failure_timeout, failure_realm Set failure_threshold activate \"circuit breaking\" request continues fail failure_threshold times, cause request error timeout failure_timeout seconds elapsed. timeout persist across requests failure_realm (defaults hostname request) intended detect failing servers without needing wait time.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically retry a request on failure — req_retry","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically retry a request on failure — req_retry","text":"","code":"# google APIs assume that a 500 is also a transient error request(\"http://google.com\") |>   req_retry(is_transient = \\(resp) resp_status(resp) %in% c(429, 500, 503)) #> Setting `max_tries = 2`. #> <httr2_request> #> GET http://google.com #> Body: empty #> Policies: #> • retry_max_tries        : 2 #> • retry_on_failure       : FALSE #> • retry_is_transient     : <function> #> • retry_failure_threshold: Inf #> • retry_failure_timeout  : 30 #> • retry_realm            : \"google.com\"  # use a constant 10s delay after every failure request(\"http://example.com\") |>   req_retry(backoff = \\(resp) 10) #> Setting `max_tries = 2`. #> <httr2_request> #> GET http://example.com #> Body: empty #> Policies: #> • retry_max_tries        : 2 #> • retry_on_failure       : FALSE #> • retry_backoff          : <function> #> • retry_failure_threshold: Inf #> • retry_failure_timeout  : 30 #> • retry_realm            : \"example.com\"  # When rate-limited, GitHub's API returns a 403 with # `X-RateLimit-Remaining: 0` and an Unix time stored in the # `X-RateLimit-Reset` header. This takes a bit more work to handle: github_is_transient <- function(resp) {   resp_status(resp) == 403 &&     identical(resp_header(resp, \"X-RateLimit-Remaining\"), \"0\") } github_after <- function(resp) {   time <- as.numeric(resp_header(resp, \"X-RateLimit-Reset\"))   time - unclass(Sys.time()) } request(\"http://api.github.com\") |>   req_retry(     is_transient = github_is_transient,     after = github_after   ) #> Setting `max_tries = 2`. #> <httr2_request> #> GET http://api.github.com #> Body: empty #> Policies: #> • retry_max_tries        : 2 #> • retry_on_failure       : FALSE #> • retry_is_transient     : <function> #> • retry_after            : <function> #> • retry_failure_threshold: Inf #> • retry_failure_timeout  : 30 #> • retry_realm            : \"api.github.com\""},{"path":"https://httr2.r-lib.org/dev/reference/req_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Set request method/path from a template — req_template","title":"Set request method/path from a template — req_template","text":"Many APIs document methods lightweight template mechanism looks like GET /user/{user} POST /organisation/:org. function makes easy copy paste snippets retrieve template variables either function arguments current environment. req_template() append existing path can set base url initial request(). means generally want avoid multiple req_template() calls request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set request method/path from a template — req_template","text":"","code":"req_template(req, template, ..., .env = parent.frame())"},{"path":"https://httr2.r-lib.org/dev/reference/req_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set request method/path from a template — req_template","text":"req httr2 request object. template template string consists optional HTTP method path containing variables labelled like either :foo {foo}. ... Template variables. .env Environment look template variables found .... Expert use .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set request method/path from a template — req_template","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set request method/path from a template — req_template","text":"","code":"httpbin <- request(example_url())  # You can supply template parameters in `...` httpbin |> req_template(\"GET /bytes/{n}\", n = 100) #> <httr2_request> #> GET http://127.0.0.1:34617/bytes/100 #> Body: empty  # or you retrieve from the current environment n <- 200 httpbin |> req_template(\"GET /bytes/{n}\") #> <httr2_request> #> GET http://127.0.0.1:34617/bytes/200 #> Body: empty  # Existing path is preserved: httpbin_test <- request(example_url()) |> req_url_path(\"/test\") name <- \"id\" value <- \"a3fWa\" httpbin_test |> req_template(\"GET /set/{name}/{value}\") #> <httr2_request> #> GET http://127.0.0.1:34617/test/set/id/a3fWa #> Body: empty"},{"path":"https://httr2.r-lib.org/dev/reference/req_throttle.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate limit a request by automatically adding a delay — req_throttle","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"Use req_throttle() ensure repeated calls req_perform() never exceed specified rate. Throttling implemented using \"token bucket\", steadily fills maximum capacity tokens fill_time_s. time make request, takes token bucket, bucket empty, request wait bucket refills. ensures never make capacity requests fill_time_s, can make requests quickly bucket full. example, capacity = 10 fill_time_s = 60, can make 10 requests without waiting, next request wait 60 seconds. gives average throttling rate previous approach, gives much better performance making small number requests.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_throttle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"","code":"req_throttle(req, rate, capacity, fill_time_s = 60, realm = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/req_throttle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"req httr2 request object. rate backwards compatibility, can still specify rate, converted capacity multiplying fill_time_s. However, recommend using capacity fill_time_s gives control. capacity size bucket, .e. maximum number tokens can accumulate. fill_time_s Time seconds fill capacity. Defaults 60s. realm string uniquely identifies throttle pool use (throttling limits always apply per pool). supplied, defaults hostname request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_throttle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_throttle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"","code":"# Ensure we never send more than 30 requests a minute req <- request(example_url()) |>   req_throttle(capacity = 30, fill_time_s = 60)  resp <- req_perform(req) throttle_status() #>       realm tokens to_wait #> 1 127.0.0.1     29       0 resp <- req_perform(req) throttle_status() #>       realm tokens to_wait #> 1 127.0.0.1     28       0"},{"path":"https://httr2.r-lib.org/dev/reference/req_timeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Set time limit for a request — req_timeout","title":"Set time limit for a request — req_timeout","text":"error thrown request complete time limit.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_timeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set time limit for a request — req_timeout","text":"","code":"req_timeout(req, seconds)"},{"path":"https://httr2.r-lib.org/dev/reference/req_timeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set time limit for a request — req_timeout","text":"req httr2 request object. seconds Maximum number seconds wait","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_timeout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set time limit for a request — req_timeout","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_timeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set time limit for a request — req_timeout","text":"","code":"# Give up after at most 10 seconds request(\"http://example.com\") |> req_timeout(10) #> <httr2_request> #> GET http://example.com #> Body: empty #> Options: #> • timeout_ms    : 10000 #> • connecttimeout: 0"},{"path":"https://httr2.r-lib.org/dev/reference/req_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify request URL — req_url","title":"Modify request URL — req_url","text":"req_url() replaces entire URL. req_url_relative() navigates relative URL. req_url_query() modifies individual query components. req_url_path() modifies just path. req_url_path_append() adds path.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify request URL — req_url","text":"","code":"req_url(req, url)  req_url_relative(req, url)  req_url_query(   .req,   ...,   .multi = c(\"error\", \"comma\", \"pipe\", \"explode\"),   .space = c(\"percent\", \"form\") )  req_url_path(req, ...)  req_url_path_append(req, ...)"},{"path":"https://httr2.r-lib.org/dev/reference/req_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify request URL — req_url","text":"req, .req httr2 request object. url new URL; either absolute URL req_url() relative URL req_url_relative(). ... req_url_query(): <dynamic-dots> Name-value pairs define query parameters. value must either atomic vector NULL (removes corresponding parameters). want opt escaping, wrap strings (). req_url_path() req_url_path_append(): sequence path components combined /. .multi Controls happens value vector: \"error\", default, throws error. \"comma\", separates values ,, e.g. ?x=1,2. \"pipe\", separates values |, e.g. ?x=1|2. \"explode\", turns element parameter, e.g. ?x=1&x=2 none options work needs, can instead supply function takes character vector argument values returns single string. .space spaces query params escaped? default, \"percent\", uses standard percent encoding (.e. %20), can opt-\"form\" encoding, uses + instead.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify request URL — req_url","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify request URL — req_url","text":"","code":"# Change complete url req <- request(\"http://example.com\") req |> req_url(\"http://google.com\") #> <httr2_request> #> GET http://google.com #> Body: empty  # Use a relative url req <- request(\"http://example.com/a/b/c\") req |> req_url_relative(\"..\") #> <httr2_request> #> GET http://example.com/a/ #> Body: empty req |> req_url_relative(\"/d/e/f\") #> <httr2_request> #> GET http://example.com/d/e/f #> Body: empty  # Change url components req |>   req_url_path_append(\"a\") |>   req_url_path_append(\"b\") |>   req_url_path_append(\"search.html\") |>   req_url_query(q = \"the cool ice\") #> <httr2_request> #> GET http://example.com/a/b/c/a/b/search.html?q=the%20cool%20ice #> Body: empty  # Modify individual query parameters req <- request(\"http://example.com?a=1&b=2\") req |> req_url_query(a = 10) #> <httr2_request> #> GET http://example.com/?b=2&a=10 #> Body: empty req |> req_url_query(a = NULL) #> <httr2_request> #> GET http://example.com/?b=2 #> Body: empty req |> req_url_query(c = 3) #> <httr2_request> #> GET http://example.com/?a=1&b=2&c=3 #> Body: empty  # Use .multi to control what happens with vector parameters: req |> req_url_query(id = 100:105, .multi = \"comma\") #> <httr2_request> #> GET http://example.com/?a=1&b=2&id=100,101,102,103,104,105 #> Body: empty req |> req_url_query(id = 100:105, .multi = \"explode\") #> <httr2_request> #> GET #> http://example.com/?a=1&b=2&id=100&id=101&id=102&id=103&id=104&id=105 #> Body: empty  # If you have query parameters in a list, use !!! params <- list(a = \"1\", b = \"2\") req |>   req_url_query(!!!params, c = \"3\") #> <httr2_request> #> GET http://example.com/?a=1&b=2&c=3 #> Body: empty"},{"path":"https://httr2.r-lib.org/dev/reference/req_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Set user-agent for a request — req_user_agent","title":"Set user-agent for a request — req_user_agent","text":"overrides default user-agent set httr2 includes version numbers httr2, curl package, libcurl.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set user-agent for a request — req_user_agent","text":"","code":"req_user_agent(req, string = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/req_user_agent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set user-agent for a request — req_user_agent","text":"req httr2 request object. string String sent User-Agent header. NULL, user default.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set user-agent for a request — req_user_agent","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_user_agent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set user-agent for a request — req_user_agent","text":"","code":"# Default user-agent: request(\"http://example.com\") |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> user-agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #>   request(\"http://example.com\") |> req_user_agent(\"MyString\") |> req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> user-agent: MyString #>   # If you're wrapping in an API in a package, it's polite to set the # user agent to identify your package. request(\"http://example.com\") |>   req_user_agent(\"MyPackage (http://mypackage.com)\") |>   req_dry_run() #> GET / HTTP/1.1 #> accept: */* #> accept-encoding: deflate, gzip, br, zstd #> host: example.com #> user-agent: MyPackage (http://mypackage.com) #>"},{"path":"https://httr2.r-lib.org/dev/reference/req_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Show extra output when request is performed — req_verbose","title":"Show extra output when request is performed — req_verbose","text":"req_verbose() uses following prefixes distinguish different components HTTP requests responses: *  informative curl messages -> request headers >> request body <- response headers << response body","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show extra output when request is performed — req_verbose","text":"","code":"req_verbose(   req,   header_req = TRUE,   header_resp = TRUE,   body_req = FALSE,   body_resp = FALSE,   info = FALSE,   redact_headers = TRUE )"},{"path":"https://httr2.r-lib.org/dev/reference/req_verbose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show extra output when request is performed — req_verbose","text":"req httr2 request object. header_req, header_resp Show request/response headers? body_req, body_resp request/response bodies? response body compressed, show number bytes received \"chunk\". info Show informational text curl? mainly useful debugging https auth problems, disabled default. redact_headers Redact confidential data headers? Currently redacts contents Authorization header prevent accidentally leaking credentials debugging/reprexing.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/req_verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show extra output when request is performed — req_verbose","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/req_verbose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show extra output when request is performed — req_verbose","text":"","code":"# Use `req_verbose()` to see the headers that are sent back and forth when # making a request resp <- request(\"https://httr2.r-lib.org\") |>   req_verbose() |>   req_perform() #> -> GET / HTTP/2 #> -> Host: httr2.r-lib.org #> -> User-Agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #> -> Accept: */* #> -> Accept-Encoding: deflate, gzip, br, zstd #> ->  #> <- HTTP/2 200  #> <- server: GitHub.com #> <- content-type: text/html; charset=utf-8 #> <- x-origin-cache: HIT #> <- last-modified: Thu, 27 Mar 2025 16:51:51 GMT #> <- access-control-allow-origin: * #> <- etag: W/\"67e58227-4b42\" #> <- expires: Fri, 04 Apr 2025 10:35:59 GMT #> <- cache-control: max-age=600 #> <- content-encoding: gzip #> <- x-proxy-cache: MISS #> <- x-github-request-id: 9D40:2BAAAA:3561B05:3C1DF4E:67EFB3B7 #> <- accept-ranges: bytes #> <- date: Fri, 04 Apr 2025 12:47:35 GMT #> <- via: 1.1 varnish #> <- age: 102 #> <- x-served-by: cache-iad-kcgs7200142-IAD #> <- x-cache: HIT #> <- x-cache-hits: 2 #> <- x-timer: S1743770856.894116,VS0,VE0 #> <- vary: Accept-Encoding #> <- x-fastly-request-id: fa74c9d2b822075cc9fed32b2f22537b7e9dc533 #> <- content-length: 4746 #> <-   # Or use one of the convenient shortcuts: resp <- request(\"https://httr2.r-lib.org\") |>   req_perform(verbosity = 1) #> -> GET / HTTP/2 #> -> Host: httr2.r-lib.org #> -> User-Agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #> -> Accept: */* #> -> Accept-Encoding: deflate, gzip, br, zstd #> ->  #> <- HTTP/2 200  #> <- server: GitHub.com #> <- content-type: text/html; charset=utf-8 #> <- x-origin-cache: HIT #> <- last-modified: Thu, 27 Mar 2025 16:51:51 GMT #> <- access-control-allow-origin: * #> <- etag: W/\"67e58227-4b42\" #> <- expires: Fri, 04 Apr 2025 10:35:59 GMT #> <- cache-control: max-age=600 #> <- content-encoding: gzip #> <- x-proxy-cache: MISS #> <- x-github-request-id: 9D40:2BAAAA:3561B05:3C1DF4E:67EFB3B7 #> <- accept-ranges: bytes #> <- date: Fri, 04 Apr 2025 12:47:35 GMT #> <- via: 1.1 varnish #> <- age: 102 #> <- x-served-by: cache-iad-kcgs7200142-IAD #> <- x-cache: HIT #> <- x-cache-hits: 3 #> <- x-timer: S1743770856.908887,VS0,VE0 #> <- vary: Accept-Encoding #> <- x-fastly-request-id: 1d67d611dcce018ef3d84dc0537d5f13624f1805 #> <- content-length: 4746 #> <-"},{"path":"https://httr2.r-lib.org/dev/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new HTTP request — request","title":"Create a new HTTP request — request","text":"three steps needed perform HTTP request httr2: Create request object request(url) (function). Define behaviour req_ functions, e.g.: req_headers() set header values. req_url_path() friends modify url. req_body_json() friends add body. req_auth_basic() perform basic HTTP authentication. req_oauth_auth_code() use OAuth auth code flow. Perform request fetch response req_perform().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new HTTP request — request","text":"","code":"request(base_url)"},{"path":"https://httr2.r-lib.org/dev/reference/request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new HTTP request — request","text":"base_url Base URL request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new HTTP request — request","text":"HTTP request: S3 list class httr2_request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new HTTP request — request","text":"","code":"request(\"http://r-project.org\") #> <httr2_request> #> GET http://r-project.org #> Body: empty"},{"path":"https://httr2.r-lib.org/dev/reference/resp_body_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract body from response — resp_body_raw","title":"Extract body from response — resp_body_raw","text":"resp_body_raw() returns raw bytes. resp_body_string() returns UTF-8 string. resp_body_json() returns parsed JSON. resp_body_html() returns parsed HTML. resp_body_xml() returns parsed XML. resp_has_body() returns TRUE response body. resp_body_json() resp_body_xml() check content-type header correct; server returns incorrect type can suppress check check_type = FALSE. two functions also cache parsed object second subsequent calls low-cost.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_body_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract body from response — resp_body_raw","text":"","code":"resp_body_raw(resp)  resp_has_body(resp)  resp_body_string(resp, encoding = NULL)  resp_body_json(resp, check_type = TRUE, simplifyVector = FALSE, ...)  resp_body_html(resp, check_type = TRUE, ...)  resp_body_xml(resp, check_type = TRUE, ...)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_body_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract body from response — resp_body_raw","text":"resp httr2 response object, created req_perform(). encoding Character encoding body text. specified, use encoding specified content-type, falling back UTF-8 warning found. resulting string always re-encoded UTF-8. check_type Check response expected content type? Set FALSE suppress automated check simplifyVector JSON arrays containing primitives (.e. booleans, numbers, strings) caused atomic vectors? ... arguments passed jsonlite::fromJSON() xml2::read_xml() respectively.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_body_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract body from response — resp_body_raw","text":"resp_body_raw() returns raw vector. resp_body_string() returns string. resp_body_json() returns NULL, atomic vector, list. resp_body_html() resp_body_xml() return xml2::xml_document","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_body_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract body from response — resp_body_raw","text":"","code":"resp <- request(\"https://httr2.r-lib.org\") |> req_perform() resp #> <httr2_response> #> GET https://httr2.r-lib.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (19266 bytes)  resp |> resp_has_body() #> [1] TRUE resp |> resp_body_raw() #>     [1] 3c 21 44 4f 43 54 59 50 45 20 68 74 6d 6c 3e 0a 3c 21 2d 2d 20 #>    [22] 47 65 6e 65 72 61 74 65 64 20 62 79 20 70 6b 67 64 6f 77 6e 3a #>    [43] 20 64 6f 20 6e 6f 74 20 65 64 69 74 20 62 79 20 68 61 6e 64 20 #>    [64] 2d 2d 3e 3c 68 74 6d 6c 20 6c 61 6e 67 3d 22 65 6e 22 3e 0a 3c #>    [85] 68 65 61 64 3e 0a 3c 6d 65 74 61 20 68 74 74 70 2d 65 71 75 69 #>   [106] 76 3d 22 43 6f 6e 74 65 6e 74 2d 54 79 70 65 22 20 63 6f 6e 74 #>   [127] 65 6e 74 3d 22 74 65 78 74 2f 68 74 6d 6c 3b 20 63 68 61 72 73 #>   [148] 65 74 3d 55 54 46 2d 38 22 3e 0a 3c 6d 65 74 61 20 63 68 61 72 #>   [169] 73 65 74 3d 22 75 74 66 2d 38 22 3e 0a 3c 6d 65 74 61 20 68 74 #>   [190] 74 70 2d 65 71 75 69 76 3d 22 58 2d 55 41 2d 43 6f 6d 70 61 74 #>   [211] 69 62 6c 65 22 20 63 6f 6e 74 65 6e 74 3d 22 49 45 3d 65 64 67 #>   [232] 65 22 3e 0a 3c 6d 65 74 61 20 6e 61 6d 65 3d 22 76 69 65 77 70 #>   [253] 6f 72 74 22 20 63 6f 6e 74 65 6e 74 3d 22 77 69 64 74 68 3d 64 #>   [274] 65 76 69 63 65 2d 77 69 64 74 68 2c 20 69 6e 69 74 69 61 6c 2d #>   [295] 73 63 61 6c 65 3d 31 2c 20 73 68 72 69 6e 6b 2d 74 6f 2d 66 69 #>   [316] 74 3d 6e 6f 22 3e 0a 3c 74 69 74 6c 65 3e 50 65 72 66 6f 72 6d #>   [337] 20 48 54 54 50 20 52 65 71 75 65 73 74 73 20 61 6e 64 20 50 72 #>   [358] 6f 63 65 73 73 20 74 68 65 20 52 65 73 70 6f 6e 73 65 73 20 e2 #>   [379] 80 a2 20 68 74 74 72 32 3c 2f 74 69 74 6c 65 3e 0a 3c 21 2d 2d #>   [400] 20 66 61 76 69 63 6f 6e 73 20 2d 2d 3e 3c 6c 69 6e 6b 20 72 65 #>   [421] 6c 3d 22 69 63 6f 6e 22 20 74 79 70 65 3d 22 69 6d 61 67 65 2f #>   [442] 70 6e 67 22 20 73 69 7a 65 73 3d 22 31 36 78 31 36 22 20 68 72 #>   [463] 65 66 3d 22 66 61 76 69 63 6f 6e 2d 31 36 78 31 36 2e 70 6e 67 #>   [484] 22 3e 0a 3c 6c 69 6e 6b 20 72 65 6c 3d 22 69 63 6f 6e 22 20 74 #>   [505] 79 70 65 3d 22 69 6d 61 67 65 2f 70 6e 67 22 20 73 69 7a 65 73 #>   [526] 3d 22 33 32 78 33 32 22 20 68 72 65 66 3d 22 66 61 76 69 63 6f #>   [547] 6e 2d 33 32 78 33 32 2e 70 6e 67 22 3e 0a 3c 6c 69 6e 6b 20 72 #>   [568] 65 6c 3d 22 61 70 70 6c 65 2d 74 6f 75 63 68 2d 69 63 6f 6e 22 #>   [589] 20 74 79 70 65 3d 22 69 6d 61 67 65 2f 70 6e 67 22 20 73 69 7a #>   [610] 65 73 3d 22 31 38 30 78 31 38 30 22 20 68 72 65 66 3d 22 61 70 #>   [631] 70 6c 65 2d 74 6f 75 63 68 2d 69 63 6f 6e 2e 70 6e 67 22 3e 0a #>   [652] 3c 6c 69 6e 6b 20 72 65 6c 3d 22 61 70 70 6c 65 2d 74 6f 75 63 #>   [673] 68 2d 69 63 6f 6e 22 20 74 79 70 65 3d 22 69 6d 61 67 65 2f 70 #>   [694] 6e 67 22 20 73 69 7a 65 73 3d 22 31 32 30 78 31 32 30 22 20 68 #>   [715] 72 65 66 3d 22 61 70 70 6c 65 2d 74 6f 75 63 68 2d 69 63 6f 6e #>   [736] 2d 31 32 30 78 31 32 30 2e 70 6e 67 22 3e 0a 3c 6c 69 6e 6b 20 #>   [757] 72 65 6c 3d 22 61 70 70 6c 65 2d 74 6f 75 63 68 2d 69 63 6f 6e #>   [778] 22 20 74 79 70 65 3d 22 69 6d 61 67 65 2f 70 6e 67 22 20 73 69 #>   [799] 7a 65 73 3d 22 37 36 78 37 36 22 20 68 72 65 66 3d 22 61 70 70 #>   [820] 6c 65 2d 74 6f 75 63 68 2d 69 63 6f 6e 2d 37 36 78 37 36 2e 70 #>   [841] 6e 67 22 3e 0a 3c 6c 69 6e 6b 20 72 65 6c 3d 22 61 70 70 6c 65 #>   [862] 2d 74 6f 75 63 68 2d 69 63 6f 6e 22 20 74 79 70 65 3d 22 69 6d #>   [883] 61 67 65 2f 70 6e 67 22 20 73 69 7a 65 73 3d 22 36 30 78 36 30 #>   [904] 22 20 68 72 65 66 3d 22 61 70 70 6c 65 2d 74 6f 75 63 68 2d 69 #>   [925] 63 6f 6e 2d 36 30 78 36 30 2e 70 6e 67 22 3e 0a 3c 73 63 72 69 #>   [946] 70 74 20 73 72 63 3d 22 64 65 70 73 2f 6a 71 75 65 72 79 2d 33 #>   [967] 2e 36 2e 30 2f 6a 71 75 65 72 79 2d 33 2e 36 2e 30 2e 6d 69 6e #>   [988] 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 6d 65 74 61 20 6e #>  [1009] 61 6d 65 3d 22 76 69 65 77 70 6f 72 74 22 20 63 6f 6e 74 65 6e #>  [1030] 74 3d 22 77 69 64 74 68 3d 64 65 76 69 63 65 2d 77 69 64 74 68 #>  [1051] 2c 20 69 6e 69 74 69 61 6c 2d 73 63 61 6c 65 3d 31 2c 20 73 68 #>  [1072] 72 69 6e 6b 2d 74 6f 2d 66 69 74 3d 6e 6f 22 3e 0a 3c 6c 69 6e #>  [1093] 6b 20 68 72 65 66 3d 22 64 65 70 73 2f 62 6f 6f 74 73 74 72 61 #>  [1114] 70 2d 35 2e 33 2e 31 2f 62 6f 6f 74 73 74 72 61 70 2e 6d 69 6e #>  [1135] 2e 63 73 73 22 20 72 65 6c 3d 22 73 74 79 6c 65 73 68 65 65 74 #>  [1156] 22 3e 0a 3c 73 63 72 69 70 74 20 73 72 63 3d 22 64 65 70 73 2f #>  [1177] 62 6f 6f 74 73 74 72 61 70 2d 35 2e 33 2e 31 2f 62 6f 6f 74 73 #>  [1198] 74 72 61 70 2e 62 75 6e 64 6c 65 2e 6d 69 6e 2e 6a 73 22 3e 3c #>  [1219] 2f 73 63 72 69 70 74 3e 3c 6c 69 6e 6b 20 68 72 65 66 3d 22 64 #>  [1240] 65 70 73 2f 53 6f 75 72 63 65 5f 53 61 6e 73 5f 50 72 6f 2d 30 #>  [1261] 2e 34 2e 39 2f 66 6f 6e 74 2e 63 73 73 22 20 72 65 6c 3d 22 73 #>  [1282] 74 79 6c 65 73 68 65 65 74 22 3e 0a 3c 6c 69 6e 6b 20 68 72 65 #>  [1303] 66 3d 22 64 65 70 73 2f 53 6f 75 72 63 65 5f 43 6f 64 65 5f 50 #>  [1324] 72 6f 2d 30 2e 34 2e 39 2f 66 6f 6e 74 2e 63 73 73 22 20 72 65 #>  [1345] 6c 3d 22 73 74 79 6c 65 73 68 65 65 74 22 3e 0a 3c 6c 69 6e 6b #>  [1366] 20 68 72 65 66 3d 22 64 65 70 73 2f 66 6f 6e 74 2d 61 77 65 73 #>  [1387] 6f 6d 65 2d 36 2e 35 2e 32 2f 63 73 73 2f 61 6c 6c 2e 6d 69 6e #>  [1408] 2e 63 73 73 22 20 72 65 6c 3d 22 73 74 79 6c 65 73 68 65 65 74 #>  [1429] 22 3e 0a 3c 6c 69 6e 6b 20 68 72 65 66 3d 22 64 65 70 73 2f 66 #>  [1450] 6f 6e 74 2d 61 77 65 73 6f 6d 65 2d 36 2e 35 2e 32 2f 63 73 73 #>  [1471] 2f 76 34 2d 73 68 69 6d 73 2e 6d 69 6e 2e 63 73 73 22 20 72 65 #>  [1492] 6c 3d 22 73 74 79 6c 65 73 68 65 65 74 22 3e 0a 3c 73 63 72 69 #>  [1513] 70 74 20 73 72 63 3d 22 64 65 70 73 2f 68 65 61 64 72 6f 6f 6d #>  [1534] 2d 30 2e 31 31 2e 30 2f 68 65 61 64 72 6f 6f 6d 2e 6d 69 6e 2e #>  [1555] 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 73 63 72 69 70 74 20 #>  [1576] 73 72 63 3d 22 64 65 70 73 2f 68 65 61 64 72 6f 6f 6d 2d 30 2e #>  [1597] 31 31 2e 30 2f 6a 51 75 65 72 79 2e 68 65 61 64 72 6f 6f 6d 2e #>  [1618] 6d 69 6e 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 73 63 72 #>  [1639] 69 70 74 20 73 72 63 3d 22 64 65 70 73 2f 62 6f 6f 74 73 74 72 #>  [1660] 61 70 2d 74 6f 63 2d 31 2e 30 2e 31 2f 62 6f 6f 74 73 74 72 61 #>  [1681] 70 2d 74 6f 63 2e 6d 69 6e 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 #>  [1702] 74 3e 3c 73 63 72 69 70 74 20 73 72 63 3d 22 64 65 70 73 2f 63 #>  [1723] 6c 69 70 62 6f 61 72 64 2e 6a 73 2d 32 2e 30 2e 31 31 2f 63 6c #>  [1744] 69 70 62 6f 61 72 64 2e 6d 69 6e 2e 6a 73 22 3e 3c 2f 73 63 72 #>  [1765] 69 70 74 3e 3c 73 63 72 69 70 74 20 73 72 63 3d 22 64 65 70 73 #>  [1786] 2f 73 65 61 72 63 68 2d 31 2e 30 2e 30 2f 61 75 74 6f 63 6f 6d #>  [1807] 70 6c 65 74 65 2e 6a 71 75 65 72 79 2e 6d 69 6e 2e 6a 73 22 3e #>  [1828] 3c 2f 73 63 72 69 70 74 3e 3c 73 63 72 69 70 74 20 73 72 63 3d #>  [1849] 22 64 65 70 73 2f 73 65 61 72 63 68 2d 31 2e 30 2e 30 2f 66 75 #>  [1870] 73 65 2e 6d 69 6e 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c #>  [1891] 73 63 72 69 70 74 20 73 72 63 3d 22 64 65 70 73 2f 73 65 61 72 #>  [1912] 63 68 2d 31 2e 30 2e 30 2f 6d 61 72 6b 2e 6d 69 6e 2e 6a 73 22 #>  [1933] 3e 3c 2f 73 63 72 69 70 74 3e 3c 21 2d 2d 20 70 6b 67 64 6f 77 #>  [1954] 6e 20 2d 2d 3e 3c 73 63 72 69 70 74 20 73 72 63 3d 22 70 6b 67 #>  [1975] 64 6f 77 6e 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 6d 65 #>  [1996] 74 61 20 70 72 6f 70 65 72 74 79 3d 22 6f 67 3a 74 69 74 6c 65 #>  [2017] 22 20 63 6f 6e 74 65 6e 74 3d 22 50 65 72 66 6f 72 6d 20 48 54 #>  [2038] 54 50 20 52 65 71 75 65 73 74 73 20 61 6e 64 20 50 72 6f 63 65 #>  [2059] 73 73 20 74 68 65 20 52 65 73 70 6f 6e 73 65 73 22 3e 0a 3c 6d #>  [2080] 65 74 61 20 6e 61 6d 65 3d 22 64 65 73 63 72 69 70 74 69 6f 6e #>  [2101] 22 20 63 6f 6e 74 65 6e 74 3d 22 54 6f 6f 6c 73 20 66 6f 72 20 #>  [2122] 63 72 65 61 74 69 6e 67 20 61 6e 64 20 6d 6f 64 69 66 79 69 6e #>  [2143] 67 20 48 54 54 50 20 72 65 71 75 65 73 74 73 2c 20 74 68 65 6e #>  [2164] 20 70 65 72 66 6f 72 6d 69 6e 67 20 74 68 65 6d 20 61 6e 64 20 #>  [2185] 70 72 6f 63 65 73 73 69 6e 67 20 74 68 65 20 72 65 73 75 6c 74 #>  [2206] 73 2e 20 68 74 74 72 32 20 69 73 20 61 20 6d 6f 64 65 72 6e 20 #>  [2227] 72 65 2d 69 6d 61 67 69 6e 69 6e 67 20 6f 66 20 68 74 74 72 20 #>  [2248] 74 68 61 74 20 75 73 65 73 20 61 20 70 69 70 65 2d 62 61 73 65 #>  [2269] 64 20 69 6e 74 65 72 66 61 63 65 20 61 6e 64 20 73 6f 6c 76 65 #>  [2290] 73 20 6d 6f 72 65 20 6f 66 20 74 68 65 20 70 72 6f 62 6c 65 6d #>  [2311] 73 20 74 68 61 74 20 41 50 49 20 77 72 61 70 70 69 6e 67 20 70 #>  [2332] 61 63 6b 61 67 65 73 20 66 61 63 65 2e 22 3e 0a 3c 6d 65 74 61 #>  [2353] 20 70 72 6f 70 65 72 74 79 3d 22 6f 67 3a 64 65 73 63 72 69 70 #>  [2374] 74 69 6f 6e 22 20 63 6f 6e 74 65 6e 74 3d 22 54 6f 6f 6c 73 20 #>  [2395] 66 6f 72 20 63 72 65 61 74 69 6e 67 20 61 6e 64 20 6d 6f 64 69 #>  [2416] 66 79 69 6e 67 20 48 54 54 50 20 72 65 71 75 65 73 74 73 2c 20 #>  [2437] 74 68 65 6e 20 70 65 72 66 6f 72 6d 69 6e 67 20 74 68 65 6d 20 #>  [2458] 61 6e 64 20 70 72 6f 63 65 73 73 69 6e 67 20 74 68 65 20 72 65 #>  [2479] 73 75 6c 74 73 2e 20 68 74 74 72 32 20 69 73 20 61 20 6d 6f 64 #>  [2500] 65 72 6e 20 72 65 2d 69 6d 61 67 69 6e 69 6e 67 20 6f 66 20 68 #>  [2521] 74 74 72 20 74 68 61 74 20 75 73 65 73 20 61 20 70 69 70 65 2d #>  [2542] 62 61 73 65 64 20 69 6e 74 65 72 66 61 63 65 20 61 6e 64 20 73 #>  [2563] 6f 6c 76 65 73 20 6d 6f 72 65 20 6f 66 20 74 68 65 20 70 72 6f #>  [2584] 62 6c 65 6d 73 20 74 68 61 74 20 41 50 49 20 77 72 61 70 70 69 #>  [2605] 6e 67 20 70 61 63 6b 61 67 65 73 20 66 61 63 65 2e 22 3e 0a 3c #>  [2626] 6d 65 74 61 20 70 72 6f 70 65 72 74 79 3d 22 6f 67 3a 69 6d 61 #>  [2647] 67 65 22 20 63 6f 6e 74 65 6e 74 3d 22 68 74 74 70 73 3a 2f 2f #>  [2668] 68 74 74 72 32 2e 72 2d 6c 69 62 2e 6f 72 67 2f 6c 6f 67 6f 2e #>  [2689] 70 6e 67 22 3e 0a 3c 73 63 72 69 70 74 20 64 65 66 65 72 20 64 #>  [2710] 61 74 61 2d 64 6f 6d 61 69 6e 3d 22 68 74 74 72 32 2e 72 2d 6c #>  [2731] 69 62 2e 6f 72 67 2c 61 6c 6c 2e 74 69 64 79 76 65 72 73 65 2e #>  [2752] 6f 72 67 22 20 73 72 63 3d 22 68 74 74 70 73 3a 2f 2f 70 6c 61 #>  [2773] 75 73 69 62 6c 65 2e 69 6f 2f 6a 73 2f 70 6c 61 75 73 69 62 6c #>  [2794] 65 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 0a 3c 2f 68 65 61 #>  [2815] 64 3e 0a 3c 62 6f 64 79 3e 0a 20 20 20 20 3c 61 20 68 72 65 66 #>  [2836] 3d 22 23 63 6f 6e 74 61 69 6e 65 72 22 20 63 6c 61 73 73 3d 22 #>  [2857] 76 69 73 75 61 6c 6c 79 2d 68 69 64 64 65 6e 2d 66 6f 63 75 73 #>  [2878] 61 62 6c 65 22 3e 53 6b 69 70 20 74 6f 20 63 6f 6e 74 65 6e 74 #>  [2899] 3c 2f 61 3e 0a 0a 0a 20 20 20 20 3c 6e 61 76 20 63 6c 61 73 73 #>  [2920] 3d 22 6e 61 76 62 61 72 20 6e 61 76 62 61 72 2d 65 78 70 61 6e #>  [2941] 64 2d 6c 67 20 66 69 78 65 64 2d 74 6f 70 20 62 67 2d 6e 6f 6e #>  [2962] 65 22 20 64 61 74 61 2d 62 73 2d 74 68 65 6d 65 3d 22 6c 69 67 #>  [2983] 68 74 22 20 61 72 69 61 2d 6c 61 62 65 6c 3d 22 53 69 74 65 20 #>  [3004] 6e 61 76 69 67 61 74 69 6f 6e 22 3e 3c 64 69 76 20 63 6c 61 73 #>  [3025] 73 3d 22 63 6f 6e 74 61 69 6e 65 72 22 3e 0a 0a 20 20 20 20 3c #>  [3046] 61 20 63 6c 61 73 73 3d 22 6e 61 76 62 61 72 2d 62 72 61 6e 64 #>  [3067] 20 6d 65 2d 32 22 20 68 72 65 66 3d 22 69 6e 64 65 78 2e 68 74 #>  [3088] 6d 6c 22 3e 68 74 74 72 32 3c 2f 61 3e 0a 0a 20 20 20 20 3c 73 #>  [3109] 6d 61 6c 6c 20 63 6c 61 73 73 3d 22 6e 61 76 2d 74 65 78 74 20 #>  [3130] 74 65 78 74 2d 6d 75 74 65 64 20 6d 65 2d 61 75 74 6f 22 20 64 #>  [3151] 61 74 61 2d 62 73 2d 74 6f 67 67 6c 65 3d 22 74 6f 6f 6c 74 69 #>  [3172] 70 22 20 64 61 74 61 2d 62 73 2d 70 6c 61 63 65 6d 65 6e 74 3d #>  [3193] 22 62 6f 74 74 6f 6d 22 20 74 69 74 6c 65 3d 22 52 65 6c 65 61 #>  [3214] 73 65 64 20 76 65 72 73 69 6f 6e 22 3e 31 2e 31 2e 31 3c 2f 73 #>  [3235] 6d 61 6c 6c 3e 0a 0a 0a 20 20 20 20 3c 62 75 74 74 6f 6e 20 63 #>  [3256] 6c 61 73 73 3d 22 6e 61 76 62 61 72 2d 74 6f 67 67 6c 65 72 22 #>  [3277] 20 74 79 70 65 3d 22 62 75 74 74 6f 6e 22 20 64 61 74 61 2d 62 #>  [3298] 73 2d 74 6f 67 67 6c 65 3d 22 63 6f 6c 6c 61 70 73 65 22 20 64 #>  [3319] 61 74 61 2d 62 73 2d 74 61 72 67 65 74 3d 22 23 6e 61 76 62 61 #>  [3340] 72 22 20 61 72 69 61 2d 63 6f 6e 74 72 6f 6c 73 3d 22 6e 61 76 #>  [3361] 62 61 72 22 20 61 72 69 61 2d 65 78 70 61 6e 64 65 64 3d 22 66 #>  [3382] 61 6c 73 65 22 20 61 72 69 61 2d 6c 61 62 65 6c 3d 22 54 6f 67 #>  [3403] 67 6c 65 20 6e 61 76 69 67 61 74 69 6f 6e 22 3e 0a 20 20 20 20 #>  [3424] 20 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6e 61 76 62 61 72 #>  [3445] 2d 74 6f 67 67 6c 65 72 2d 69 63 6f 6e 22 3e 3c 2f 73 70 61 6e #>  [3466] 3e 0a 20 20 20 20 3c 2f 62 75 74 74 6f 6e 3e 0a 0a 20 20 20 20 #>  [3487] 3c 64 69 76 20 69 64 3d 22 6e 61 76 62 61 72 22 20 63 6c 61 73 #>  [3508] 73 3d 22 63 6f 6c 6c 61 70 73 65 20 6e 61 76 62 61 72 2d 63 6f #>  [3529] 6c 6c 61 70 73 65 20 6d 73 2d 33 22 3e 0a 20 20 20 20 20 20 3c #>  [3550] 75 6c 20 63 6c 61 73 73 3d 22 6e 61 76 62 61 72 2d 6e 61 76 20 #>  [3571] 6d 65 2d 61 75 74 6f 22 3e 0a 3c 6c 69 20 63 6c 61 73 73 3d 22 #>  [3592] 6e 61 76 2d 69 74 65 6d 22 3e 3c 61 20 63 6c 61 73 73 3d 22 6e #>  [3613] 61 76 2d 6c 69 6e 6b 22 20 68 72 65 66 3d 22 61 72 74 69 63 6c #>  [3634] 65 73 2f 68 74 74 72 32 2e 68 74 6d 6c 22 3e 47 65 74 20 73 74 #>  [3655] 61 72 74 65 64 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 6c 69 20 63 6c #>  [3676] 61 73 73 3d 22 6e 61 76 2d 69 74 65 6d 22 3e 3c 61 20 63 6c 61 #>  [3697] 73 73 3d 22 6e 61 76 2d 6c 69 6e 6b 22 20 68 72 65 66 3d 22 72 #>  [3718] 65 66 65 72 65 6e 63 65 2f 69 6e 64 65 78 2e 68 74 6d 6c 22 3e #>  [3739] 52 65 66 65 72 65 6e 63 65 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 6c #>  [3760] 69 20 63 6c 61 73 73 3d 22 6e 61 76 2d 69 74 65 6d 20 64 72 6f #>  [3781] 70 64 6f 77 6e 22 3e 0a 20 20 3c 62 75 74 74 6f 6e 20 63 6c 61 #>  [3802] 73 73 3d 22 6e 61 76 2d 6c 69 6e 6b 20 64 72 6f 70 64 6f 77 6e #>  [3823] 2d 74 6f 67 67 6c 65 22 20 74 79 70 65 3d 22 62 75 74 74 6f 6e #>  [3844] 22 20 69 64 3d 22 64 72 6f 70 64 6f 77 6e 2d 61 72 74 69 63 6c #>  [3865] 65 73 22 20 64 61 74 61 2d 62 73 2d 74 6f 67 67 6c 65 3d 22 64 #>  [3886] 72 6f 70 64 6f 77 6e 22 20 61 72 69 61 2d 65 78 70 61 6e 64 65 #>  [3907] 64 3d 22 66 61 6c 73 65 22 20 61 72 69 61 2d 68 61 73 70 6f 70 #>  [3928] 75 70 3d 22 74 72 75 65 22 3e 41 72 74 69 63 6c 65 73 3c 2f 62 #>  [3949] 75 74 74 6f 6e 3e 0a 20 20 3c 75 6c 20 63 6c 61 73 73 3d 22 64 #>  [3970] 72 6f 70 64 6f 77 6e 2d 6d 65 6e 75 22 20 61 72 69 61 2d 6c 61 #>  [3991] 62 65 6c 6c 65 64 62 79 3d 22 64 72 6f 70 64 6f 77 6e 2d 61 72 #>  [4012] 74 69 63 6c 65 73 22 3e 0a 3c 6c 69 3e 3c 61 20 63 6c 61 73 73 #>  [4033] 3d 22 64 72 6f 70 64 6f 77 6e 2d 69 74 65 6d 22 20 68 72 65 66 #>  [4054] 3d 22 61 72 74 69 63 6c 65 73 2f 77 72 61 70 70 69 6e 67 2d 61 #>  [4075] 70 69 73 2e 68 74 6d 6c 22 3e 57 72 61 70 70 69 6e 67 20 41 50 #>  [4096] 49 73 3c 2f 61 3e 3c 2f 6c 69 3e 0a 20 20 20 20 3c 6c 69 3e 3c #>  [4117] 61 20 63 6c 61 73 73 3d 22 64 72 6f 70 64 6f 77 6e 2d 69 74 65 #>  [4138] 6d 22 20 68 72 65 66 3d 22 61 72 74 69 63 6c 65 73 2f 6f 61 75 #>  [4159] 74 68 2e 68 74 6d 6c 22 3e 4f 41 75 74 68 3c 2f 61 3e 3c 2f 6c #>  [4180] 69 3e 0a 20 20 3c 2f 75 6c 3e 0a 3c 2f 6c 69 3e 0a 3c 6c 69 20 #>  [4201] 63 6c 61 73 73 3d 22 6e 61 76 2d 69 74 65 6d 20 64 72 6f 70 64 #>  [4222] 6f 77 6e 22 3e 0a 20 20 3c 62 75 74 74 6f 6e 20 63 6c 61 73 73 #>  [4243] 3d 22 6e 61 76 2d 6c 69 6e 6b 20 64 72 6f 70 64 6f 77 6e 2d 74 #>  [4264] 6f 67 67 6c 65 22 20 74 79 70 65 3d 22 62 75 74 74 6f 6e 22 20 #>  [4285] 69 64 3d 22 64 72 6f 70 64 6f 77 6e 2d 6e 65 77 73 22 20 64 61 #>  [4306] 74 61 2d 62 73 2d 74 6f 67 67 6c 65 3d 22 64 72 6f 70 64 6f 77 #>  [4327] 6e 22 20 61 72 69 61 2d 65 78 70 61 6e 64 65 64 3d 22 66 61 6c #>  [4348] 73 65 22 20 61 72 69 61 2d 68 61 73 70 6f 70 75 70 3d 22 74 72 #>  [4369] 75 65 22 3e 4e 65 77 73 3c 2f 62 75 74 74 6f 6e 3e 0a 20 20 3c #>  [4390] 75 6c 20 63 6c 61 73 73 3d 22 64 72 6f 70 64 6f 77 6e 2d 6d 65 #>  [4411] 6e 75 22 20 61 72 69 61 2d 6c 61 62 65 6c 6c 65 64 62 79 3d 22 #>  [4432] 64 72 6f 70 64 6f 77 6e 2d 6e 65 77 73 22 3e 0a 3c 6c 69 3e 3c #>  [4453] 68 36 20 63 6c 61 73 73 3d 22 64 72 6f 70 64 6f 77 6e 2d 68 65 #>  [4474] 61 64 65 72 22 20 64 61 74 61 2d 74 6f 63 2d 73 6b 69 70 3e 52 #>  [4495] 65 6c 65 61 73 65 73 3c 2f 68 36 3e 3c 2f 6c 69 3e 0a 20 20 20 #>  [4516] 20 3c 6c 69 3e 3c 61 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e #>  [4537] 61 6c 2d 6c 69 6e 6b 20 64 72 6f 70 64 6f 77 6e 2d 69 74 65 6d #>  [4558] 22 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 77 77 77 2e 74 #>  [4579] 69 64 79 76 65 72 73 65 2e 6f 72 67 2f 62 6c 6f 67 2f 32 30 32 #>  [4600] 35 2f 30 31 2f 68 74 74 72 32 2d 31 2d 31 2d 30 2f 22 3e 68 74 #>  [4621] 74 72 32 20 31 2e 31 2e 30 3c 2f 61 3e 3c 2f 6c 69 3e 0a 20 20 #>  [4642] 20 20 3c 6c 69 3e 3c 61 20 63 6c 61 73 73 3d 22 65 78 74 65 72 #>  [4663] 6e 61 6c 2d 6c 69 6e 6b 20 64 72 6f 70 64 6f 77 6e 2d 69 74 65 #>  [4684] 6d 22 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 77 77 77 2e #>  [4705] 74 69 64 79 76 65 72 73 65 2e 6f 72 67 2f 62 6c 6f 67 2f 32 30 #>  [4726] 32 33 2f 31 31 2f 68 74 74 72 32 2d 31 2d 30 2d 30 2f 22 3e 68 #>  [4747] 74 74 72 32 20 31 2e 30 2e 30 3c 2f 61 3e 3c 2f 6c 69 3e 0a 20 #>  [4768] 20 20 20 3c 6c 69 3e 3c 68 72 20 63 6c 61 73 73 3d 22 64 72 6f #>  [4789] 70 64 6f 77 6e 2d 64 69 76 69 64 65 72 22 3e 3c 2f 6c 69 3e 0a #>  [4810] 20 20 20 20 3c 6c 69 3e 3c 61 20 63 6c 61 73 73 3d 22 64 72 6f #>  [4831] 70 64 6f 77 6e 2d 69 74 65 6d 22 20 68 72 65 66 3d 22 6e 65 77 #>  [4852] 73 2f 69 6e 64 65 78 2e 68 74 6d 6c 22 3e 43 68 61 6e 67 65 6c #>  [4873] 6f 67 3c 2f 61 3e 3c 2f 6c 69 3e 0a 20 20 3c 2f 75 6c 3e 0a 3c #>  [4894] 2f 6c 69 3e 0a 20 20 20 20 20 20 3c 2f 75 6c 3e 0a 3c 75 6c 20 #>  [4915] 63 6c 61 73 73 3d 22 6e 61 76 62 61 72 2d 6e 61 76 22 3e 0a 3c #>  [4936] 6c 69 20 63 6c 61 73 73 3d 22 6e 61 76 2d 69 74 65 6d 22 3e 3c #>  [4957] 66 6f 72 6d 20 63 6c 61 73 73 3d 22 66 6f 72 6d 2d 69 6e 6c 69 #>  [4978] 6e 65 22 20 72 6f 6c 65 3d 22 73 65 61 72 63 68 22 3e 0a 20 3c #>  [4999] 69 6e 70 75 74 20 63 6c 61 73 73 3d 22 66 6f 72 6d 2d 63 6f 6e #>  [5020] 74 72 6f 6c 22 20 74 79 70 65 3d 22 73 65 61 72 63 68 22 20 6e #>  [5041] 61 6d 65 3d 22 73 65 61 72 63 68 2d 69 6e 70 75 74 22 20 69 64 #>  [5062] 3d 22 73 65 61 72 63 68 2d 69 6e 70 75 74 22 20 61 75 74 6f 63 #>  [5083] 6f 6d 70 6c 65 74 65 3d 22 6f 66 66 22 20 61 72 69 61 2d 6c 61 #>  [5104] 62 65 6c 3d 22 53 65 61 72 63 68 20 73 69 74 65 22 20 70 6c 61 #>  [5125] 63 65 68 6f 6c 64 65 72 3d 22 53 65 61 72 63 68 20 66 6f 72 22 #>  [5146] 20 64 61 74 61 2d 73 65 61 72 63 68 2d 69 6e 64 65 78 3d 22 73 #>  [5167] 65 61 72 63 68 2e 6a 73 6f 6e 22 3e 0a 3c 2f 66 6f 72 6d 3e 3c #>  [5188] 2f 6c 69 3e 0a 3c 6c 69 20 63 6c 61 73 73 3d 22 6e 61 76 2d 69 #>  [5209] 74 65 6d 22 3e 3c 61 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e #>  [5230] 61 6c 2d 6c 69 6e 6b 20 6e 61 76 2d 6c 69 6e 6b 22 20 68 72 65 #>  [5251] 66 3d 22 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d #>  [5272] 2f 72 2d 6c 69 62 2f 68 74 74 72 32 2f 22 20 61 72 69 61 2d 6c #>  [5293] 61 62 65 6c 3d 22 47 69 74 48 75 62 22 3e 3c 73 70 61 6e 20 63 #>  [5314] 6c 61 73 73 3d 22 66 61 20 66 61 62 20 66 61 2d 67 69 74 68 75 #>  [5335] 62 20 66 61 2d 6c 67 22 3e 3c 2f 73 70 61 6e 3e 3c 2f 61 3e 3c #>  [5356] 2f 6c 69 3e 0a 20 20 20 20 20 20 3c 2f 75 6c 3e 0a 3c 2f 64 69 #>  [5377] 76 3e 0a 0a 0a 20 20 3c 2f 64 69 76 3e 0a 3c 2f 6e 61 76 3e 3c #>  [5398] 64 69 76 20 63 6c 61 73 73 3d 22 63 6f 6e 74 61 69 6e 65 72 20 #>  [5419] 74 65 6d 70 6c 61 74 65 2d 68 6f 6d 65 22 20 69 64 3d 22 63 6f #>  [5440] 6e 74 61 69 6e 65 72 22 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d #>  [5461] 22 72 6f 77 22 3e 0a 20 20 3c 6d 61 69 6e 20 69 64 3d 22 6d 61 #>  [5482] 69 6e 22 20 63 6c 61 73 73 3d 22 63 6f 6c 2d 6d 64 2d 39 22 3e #>  [5503] 3c 64 69 76 20 63 6c 61 73 73 3d 22 73 65 63 74 69 6f 6e 20 6c #>  [5524] 65 76 65 6c 31 22 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 70 #>  [5545] 61 67 65 2d 68 65 61 64 65 72 22 3e 0a 3c 69 6d 67 20 73 72 63 #>  [5566] 3d 22 6c 6f 67 6f 2e 70 6e 67 22 20 63 6c 61 73 73 3d 22 6c 6f #>  [5587] 67 6f 22 20 61 6c 74 3d 22 22 3e 3c 68 31 20 69 64 3d 22 68 74 #>  [5608] 74 72 32 2d 22 3e 68 74 74 72 32 20 0a 3c 61 20 63 6c 61 73 73 #>  [5629] 3d 22 61 6e 63 68 6f 72 22 20 61 72 69 61 2d 6c 61 62 65 6c 3d #>  [5650] 22 61 6e 63 68 6f 72 22 20 68 72 65 66 3d 22 23 68 74 74 72 32 #>  [5671] 2d 22 3e 3c 2f 61 3e 0a 3c 2f 68 31 3e 0a 3c 2f 64 69 76 3e 0a #>  [5692] 3c 21 2d 2d 20 62 61 64 67 65 73 3a 20 73 74 61 72 74 20 2d 2d #>  [5713] 3e 0a 0a 3c 70 3e 68 74 74 72 32 20 28 70 72 6f 6e 6f 75 6e 63 #>  [5734] 65 64 20 e2 80 9c 68 69 74 74 65 72 32 e2 80 9d 29 20 69 73 20 #>  [5755] 61 20 63 6f 6d 70 72 65 68 65 6e 73 69 76 65 20 48 54 54 50 20 #>  [5776] 63 6c 69 65 6e 74 20 74 68 61 74 20 70 72 6f 76 69 64 65 73 20 #>  [5797] 61 20 6d 6f 64 65 72 6e 2c 20 70 69 70 65 61 62 6c 65 20 41 50 #>  [5818] 49 20 66 6f 72 20 77 6f 72 6b 69 6e 67 20 77 69 74 68 20 77 65 #>  [5839] 62 20 41 50 49 73 2e 20 49 74 20 62 75 69 6c 64 73 20 6f 6e 20 #>  [5860] 74 6f 70 20 6f 66 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 #>  [5881] 3a 2f 2f 6a 65 72 6f 65 6e 2e 72 2d 75 6e 69 76 65 72 73 65 2e #>  [5902] 64 65 76 2f 63 75 72 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 #>  [5923] 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 7b 63 75 72 6c 7d 3c 2f 61 3e #>  [5944] 20 74 6f 20 70 72 6f 76 69 64 65 20 66 65 61 74 75 72 65 73 20 #>  [5965] 6c 69 6b 65 20 65 78 70 6c 69 63 69 74 20 72 65 71 75 65 73 74 #>  [5986] 20 6f 62 6a 65 63 74 73 2c 20 62 75 69 6c 74 2d 69 6e 20 72 61 #>  [6007] 74 65 20 6c 69 6d 69 74 69 6e 67 20 26 61 6d 70 3b 20 72 65 74 #>  [6028] 72 79 20 74 6f 6f 6c 69 6e 67 2c 20 63 6f 6d 70 72 65 68 65 6e #>  [6049] 73 69 76 65 20 4f 41 75 74 68 20 73 75 70 70 6f 72 74 2c 20 61 #>  [6070] 6e 64 20 73 65 63 75 72 65 20 68 61 6e 64 6c 69 6e 67 20 6f 66 #>  [6091] 20 73 65 63 72 65 74 73 20 61 6e 64 20 63 72 65 64 65 6e 74 69 #>  [6112] 61 6c 73 2e 3c 2f 70 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 #>  [6133] 73 65 63 74 69 6f 6e 20 6c 65 76 65 6c 32 22 3e 0a 3c 68 32 20 #>  [6154] 69 64 3d 22 69 6e 73 74 61 6c 6c 61 74 69 6f 6e 22 3e 49 6e 73 #>  [6175] 74 61 6c 6c 61 74 69 6f 6e 3c 61 20 63 6c 61 73 73 3d 22 61 6e #>  [6196] 63 68 6f 72 22 20 61 72 69 61 2d 6c 61 62 65 6c 3d 22 61 6e 63 #>  [6217] 68 6f 72 22 20 68 72 65 66 3d 22 23 69 6e 73 74 61 6c 6c 61 74 #>  [6238] 69 6f 6e 22 3e 3c 2f 61 3e 0a 3c 2f 68 32 3e 0a 3c 70 3e 59 6f #>  [6259] 75 20 63 61 6e 20 69 6e 73 74 61 6c 6c 20 68 74 74 72 32 20 66 #>  [6280] 72 6f 6d 20 43 52 41 4e 20 77 69 74 68 3a 3c 2f 70 3e 0a 3c 64 #>  [6301] 69 76 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 #>  [6322] 20 69 64 3d 22 63 62 31 22 3e 3c 70 72 65 20 63 6c 61 73 73 3d #>  [6343] 22 64 6f 77 6e 6c 69 74 20 73 6f 75 72 63 65 43 6f 64 65 20 72 #>  [6364] 22 3e 0a 3c 63 6f 64 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 #>  [6385] 65 43 6f 64 65 20 52 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #>  [6406] 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 68 #>  [6427] 74 74 70 73 3a 2f 2f 72 64 72 72 2e 69 6f 2f 72 2f 75 74 69 6c #>  [6448] 73 2f 69 6e 73 74 61 6c 6c 2e 70 61 63 6b 61 67 65 73 2e 68 74 #>  [6469] 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c #>  [6490] 69 6e 6b 22 3e 69 6e 73 74 61 6c 6c 2e 70 61 63 6b 61 67 65 73 #>  [6511] 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 #>  [6532] 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 #>  [6553] 63 6c 61 73 73 3d 22 73 74 22 3e 22 68 74 74 72 32 22 3c 2f 73 #>  [6574] 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e #>  [6595] 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 #>  [6616] 3e 3c 2f 70 72 65 3e 3c 2f 64 69 76 3e 0a 3c 2f 64 69 76 3e 0a #>  [6637] 3c 64 69 76 20 63 6c 61 73 73 3d 22 73 65 63 74 69 6f 6e 20 6c #>  [6658] 65 76 65 6c 32 22 3e 0a 3c 68 32 20 69 64 3d 22 75 73 61 67 65 #>  [6679] 22 3e 55 73 61 67 65 3c 61 20 63 6c 61 73 73 3d 22 61 6e 63 68 #>  [6700] 6f 72 22 20 61 72 69 61 2d 6c 61 62 65 6c 3d 22 61 6e 63 68 6f #>  [6721] 72 22 20 68 72 65 66 3d 22 23 75 73 61 67 65 22 3e 3c 2f 61 3e #>  [6742] 0a 3c 2f 68 32 3e 0a 3c 70 3e 54 6f 20 75 73 65 20 68 74 74 72 #>  [6763] 32 2c 20 73 74 61 72 74 20 62 79 20 63 72 65 61 74 69 6e 67 20 #>  [6784] 61 20 3c 73 74 72 6f 6e 67 3e 72 65 71 75 65 73 74 3c 2f 73 74 #>  [6805] 72 6f 6e 67 3e 3a 3c 2f 70 3e 0a 3c 64 69 76 20 63 6c 61 73 73 #>  [6826] 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 20 69 64 3d 22 63 62 32 #>  [6847] 22 3e 3c 70 72 65 20 63 6c 61 73 73 3d 22 64 6f 77 6e 6c 69 74 #>  [6868] 20 73 6f 75 72 63 65 43 6f 64 65 20 72 22 3e 0a 3c 63 6f 64 65 #>  [6889] 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 20 52 22 #>  [6910] 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6b #>  [6931] 77 22 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 72 #>  [6952] 64 72 72 2e 69 6f 2f 72 2f 62 61 73 65 2f 6c 69 62 72 61 72 79 #>  [6973] 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 #>  [6994] 6c 2d 6c 69 6e 6b 22 3e 6c 69 62 72 61 72 79 3c 2f 61 3e 3c 2f #>  [7015] 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 #>  [7036] 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #>  [7057] 22 76 61 22 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f #>  [7078] 2f 68 74 74 72 32 2e 72 2d 6c 69 62 2e 6f 72 67 22 3e 68 74 74 #>  [7099] 72 32 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #>  [7120] 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #>  [7141] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 #>  [7162] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 #>  [7183] 65 71 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [7204] 3d 22 6f 70 22 3e 26 6c 74 3b 2d 3c 2f 73 70 61 6e 3e 20 3c 73 #>  [7225] 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 #>  [7246] 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 75 65 73 74 2e #>  [7267] 68 74 6d 6c 22 3e 72 65 71 75 65 73 74 3c 2f 61 3e 3c 2f 73 70 #>  [7288] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 #>  [7309] 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 73 #>  [7330] 74 22 3e 22 68 74 74 70 73 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 #>  [7351] 2e 6f 72 67 22 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #>  [7372] 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 #>  [7393] 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #>  [7414] 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #>  [7435] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #>  [7456] 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 72 32 5f 72 #>  [7477] 65 71 75 65 73 74 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #>  [7498] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [7519] 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 54 20 68 74 74 70 73 #>  [7540] 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 3c 2f 73 70 61 #>  [7561] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #>  [7582] 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 #>  [7603] 79 3a 20 65 6d 70 74 79 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #>  [7624] 3e 3c 2f 63 6f 64 65 3e 3c 2f 70 72 65 3e 3c 2f 64 69 76 3e 0a #>  [7645] 3c 70 3e 59 6f 75 20 63 61 6e 20 74 61 69 6c 6f 72 20 74 68 69 #>  [7666] 73 20 72 65 71 75 65 73 74 20 77 69 74 68 20 74 68 65 20 3c 63 #>  [7687] 6f 64 65 3e 72 65 71 5f 3c 2f 63 6f 64 65 3e 20 66 61 6d 69 6c #>  [7708] 79 20 6f 66 20 66 75 6e 63 74 69 6f 6e 73 3a 3c 2f 70 3e 0a 3c #>  [7729] 64 69 76 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 #>  [7750] 22 20 69 64 3d 22 63 62 33 22 3e 3c 70 72 65 20 63 6c 61 73 73 #>  [7771] 3d 22 64 6f 77 6e 6c 69 74 20 73 6f 75 72 63 65 43 6f 64 65 20 #>  [7792] 72 22 3e 0a 3c 63 6f 64 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 #>  [7813] 63 65 43 6f 64 65 20 52 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e #>  [7834] 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 20 41 64 64 20 63 75 73 #>  [7855] 74 6f 6d 20 68 65 61 64 65 72 73 3c 2f 73 70 61 6e 3e 3c 2f 73 #>  [7876] 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 #>  [7897] 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 20 3c 73 70 #>  [7918] 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 7c 26 67 74 3b 3c 2f #>  [7939] 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 #>  [7960] 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f #>  [7981] 72 65 71 5f 68 65 61 64 65 72 73 2e 68 74 6d 6c 22 3e 72 65 71 #>  [8002] 5f 68 65 61 64 65 72 73 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 #>  [8023] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 #>  [8044] 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 73 74 22 3e 22 41 #>  [8065] 63 63 65 70 74 22 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 #>  [8086] 6c 61 73 73 3d 22 6f 70 22 3e 3d 3c 2f 73 70 61 6e 3e 20 3c 73 #>  [8107] 70 61 6e 20 63 6c 61 73 73 3d 22 73 74 22 3e 22 61 70 70 6c 69 #>  [8128] 63 61 74 69 6f 6e 2f 6a 73 6f 6e 22 3c 2f 73 70 61 6e 3e 3c 73 #>  [8149] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 #>  [8170] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #>  [8191] 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 #>  [8212] 3b 68 74 74 72 32 5f 72 65 71 75 65 73 74 26 67 74 3b 3c 2f 73 #>  [8233] 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 #>  [8254] 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 #>  [8275] 45 54 20 68 74 74 70 73 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e #>  [8296] 6f 72 67 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 #>  [8317] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 #>  [8338] 26 67 74 3b 20 48 65 61 64 65 72 73 3a 3c 2f 73 70 61 6e 3e 3c #>  [8359] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #>  [8380] 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 e2 80 a2 20 41 63 #>  [8401] 63 65 70 74 3a 20 22 61 70 70 6c 69 63 61 74 69 6f 6e 2f 6a 73 #>  [8422] 6f 6e 22 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 #>  [8443] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 #>  [8464] 26 67 74 3b 20 42 6f 64 79 3a 20 65 6d 70 74 79 3c 2f 73 70 61 #>  [8485] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 2f 73 70 61 #>  [8506] 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #>  [8527] 22 63 6f 22 3e 23 20 41 64 64 20 61 20 62 6f 64 79 2c 20 74 75 #>  [8548] 72 6e 69 6e 67 20 69 74 20 69 6e 74 6f 20 61 20 50 4f 53 54 3c #>  [8569] 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c #>  [8590] 73 70 61 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f #>  [8611] 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 #>  [8632] 22 3e 7c 26 67 74 3b 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 #>  [8653] 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 #>  [8674] 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 62 6f 64 79 2e 68 74 6d #>  [8695] 6c 22 3e 72 65 71 5f 62 6f 64 79 5f 6a 73 6f 6e 3c 2f 61 3e 3c #>  [8716] 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 #>  [8737] 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [8758] 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a #>  [8779] 2f 2f 72 64 72 72 2e 69 6f 2f 72 2f 62 61 73 65 2f 6c 69 73 74 #>  [8800] 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 #>  [8821] 6c 2d 6c 69 6e 6b 22 3e 6c 69 73 74 3c 2f 61 3e 3c 2f 73 70 61 #>  [8842] 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c #>  [8863] 2f 73 70 61 6e 3e 78 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #>  [8884] 6f 70 22 3e 3d 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c #>  [8905] 61 73 73 3d 22 66 6c 22 3e 31 3c 2f 73 70 61 6e 3e 2c 20 79 20 #>  [8926] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3d 3c 2f 73 #>  [8947] 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 6c 22 #>  [8968] 3e 32 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #>  [8989] 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #>  [9010] 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #>  [9031] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [9052] 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 72 32 #>  [9073] 5f 72 65 71 75 65 73 74 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c 2f #>  [9094] 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #>  [9115] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 50 4f 53 54 20 68 74 #>  [9136] 74 70 73 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 3c 2f #>  [9157] 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 #>  [9178] 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 #>  [9199] 42 6f 64 79 3a 20 6a 73 6f 6e 20 65 6e 63 6f 64 65 64 20 64 61 #>  [9220] 74 61 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 #>  [9241] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #>  [9262] 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 20 4d 6f 64 69 66 79 20 #>  [9283] 74 68 65 20 70 61 74 68 20 69 6e 20 74 68 65 20 75 72 6c 3c 2f #>  [9304] 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 #>  [9325] 70 61 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 #>  [9346] 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 #>  [9367] 3e 7c 26 67 74 3b 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 #>  [9388] 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 #>  [9409] 66 65 72 65 6e 63 65 2f 72 65 71 5f 75 72 6c 2e 68 74 6d 6c 22 #>  [9430] 3e 72 65 71 5f 75 72 6c 5f 70 61 74 68 3c 2f 61 3e 3c 2f 73 70 #>  [9451] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 #>  [9472] 3c 2f 73 70 61 6e 3e 70 61 74 68 20 3c 73 70 61 6e 20 63 6c 61 #>  [9493] 73 73 3d 22 6f 70 22 3e 3d 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 #>  [9514] 6e 20 63 6c 61 73 73 3d 22 73 74 22 3e 22 70 61 74 68 2f 74 6f #>  [9535] 2f 6d 79 2f 66 69 6c 65 22 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e #>  [9556] 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c #>  [9577] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #>  [9598] 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 #>  [9619] 74 72 32 5f 72 65 71 75 65 73 74 26 67 74 3b 3c 2f 73 70 61 6e #>  [9640] 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #>  [9661] 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 54 20 #>  [9682] 68 74 74 70 73 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 #>  [9703] 2f 70 61 74 68 2f 74 6f 2f 6d 79 2f 66 69 6c 65 3c 2f 73 70 61 #>  [9724] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #>  [9745] 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 #>  [9766] 79 3a 20 65 6d 70 74 79 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #>  [9787] 3e 0a 3c 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e #>  [9808] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 20 41 #>  [9829] 75 74 6f 6d 61 74 69 63 61 6c 6c 79 20 72 65 74 72 79 20 69 66 #>  [9850] 20 74 68 65 20 72 65 71 75 65 73 74 20 66 61 69 6c 73 3c 2f 73 #>  [9871] 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 #>  [9892] 61 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 #>  [9913] 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e #>  [9934] 7c 26 67 74 3b 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c #>  [9955] 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 #>  [9976] 65 72 65 6e 63 65 2f 72 65 71 5f 72 65 74 72 79 2e 68 74 6d 6c #>  [9997] 22 3e 72 65 71 5f 72 65 74 72 79 3c 2f 61 3e 3c 2f 73 70 61 6e #> [10018] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f #> [10039] 73 70 61 6e 3e 6d 61 78 5f 74 72 69 65 73 20 3c 73 70 61 6e 20 #> [10060] 63 6c 61 73 73 3d 22 6f 70 22 3e 3d 3c 2f 73 70 61 6e 3e 20 3c #> [10081] 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 6c 22 3e 35 3c 2f 73 70 #> [10102] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 #> [10123] 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e #> [10144] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 #> [10165] 3b 20 26 6c 74 3b 68 74 74 72 32 5f 72 65 71 75 65 73 74 26 67 #> [10186] 74 3b 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 #> [10207] 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 #> [10228] 67 74 3b 20 47 45 54 20 68 74 74 70 73 3a 2f 2f 72 2d 70 72 6f #> [10249] 6a 65 63 74 2e 6f 72 67 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #> [10270] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #> [10291] 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 79 3a 20 65 6d 70 74 79 #> [10312] 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e #> [10333] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 #> [10354] 3b 20 50 6f 6c 69 63 69 65 73 3a 3c 2f 73 70 61 6e 3e 3c 2f 73 #> [10375] 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 #> [10396] 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 e2 80 a2 20 72 65 74 72 #> [10417] 79 5f 6d 61 78 5f 74 72 69 65 73 20 20 20 20 20 20 20 20 3a 20 #> [10438] 35 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e #> [10459] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 #> [10480] 74 3b 20 e2 80 a2 20 72 65 74 72 79 5f 6f 6e 5f 66 61 69 6c 75 #> [10501] 72 65 20 20 20 20 20 20 20 3a 20 46 41 4c 53 45 3c 2f 73 70 61 #> [10522] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #> [10543] 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 e2 80 a2 #> [10564] 20 72 65 74 72 79 5f 66 61 69 6c 75 72 65 5f 74 68 72 65 73 68 #> [10585] 6f 6c 64 3a 20 49 6e 66 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #> [10606] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #> [10627] 63 6f 22 3e 23 26 67 74 3b 20 e2 80 a2 20 72 65 74 72 79 5f 66 #> [10648] 61 69 6c 75 72 65 5f 74 69 6d 65 6f 75 74 20 20 3a 20 33 30 3c #> [10669] 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c #> [10690] 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b #> [10711] 20 e2 80 a2 20 72 65 74 72 79 5f 72 65 61 6c 6d 20 20 20 20 20 #> [10732] 20 20 20 20 20 20 20 3a 20 22 72 2d 70 72 6f 6a 65 63 74 2e 6f #> [10753] 72 67 22 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 #> [10774] 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 #> [10795] 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 20 43 68 61 6e 67 65 #> [10816] 20 74 68 65 20 48 54 54 50 20 6d 65 74 68 6f 64 3c 2f 73 70 61 #> [10837] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #> [10858] 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e #> [10879] 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 7c 26 #> [10900] 67 74 3b 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 #> [10921] 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 #> [10942] 65 6e 63 65 2f 72 65 71 5f 6d 65 74 68 6f 64 2e 68 74 6d 6c 22 #> [10963] 3e 72 65 71 5f 6d 65 74 68 6f 64 3c 2f 61 3e 3c 2f 73 70 61 6e #> [10984] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f #> [11005] 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 73 74 22 #> [11026] 3e 22 50 41 54 43 48 22 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 #> [11047] 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f #> [11068] 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [11089] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 #> [11110] 72 32 5f 72 65 71 75 65 73 74 26 67 74 3b 3c 2f 73 70 61 6e 3e #> [11131] 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 #> [11152] 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 50 41 54 43 48 #> [11173] 20 68 74 74 70 73 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 #> [11194] 67 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e #> [11215] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 #> [11236] 74 3b 20 42 6f 64 79 3a 20 65 6d 70 74 79 3c 2f 73 70 61 6e 3e #> [11257] 3c 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 3e 3c 2f 70 72 65 3e 3c #> [11278] 2f 64 69 76 3e 0a 3c 70 3e 41 6e 64 20 73 65 65 20 65 78 61 63 #> [11299] 74 6c 79 20 77 68 61 74 20 68 74 74 72 32 20 77 69 6c 6c 20 73 #> [11320] 65 6e 64 20 74 6f 20 74 68 65 20 73 65 72 76 65 72 20 77 69 74 #> [11341] 68 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 #> [11362] 72 65 6e 63 65 2f 72 65 71 5f 64 72 79 5f 72 75 6e 2e 68 74 6d #> [11383] 6c 22 3e 72 65 71 5f 64 72 79 5f 72 75 6e 28 29 3c 2f 61 3e 3c #> [11404] 2f 63 6f 64 65 3e 3a 3c 2f 70 3e 0a 3c 64 69 76 20 63 6c 61 73 #> [11425] 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 20 69 64 3d 22 63 62 #> [11446] 34 22 3e 3c 70 72 65 20 63 6c 61 73 73 3d 22 64 6f 77 6e 6c 69 #> [11467] 74 20 73 6f 75 72 63 65 43 6f 64 65 20 72 22 3e 0a 3c 63 6f 64 #> [11488] 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 20 52 #> [11509] 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #> [11530] 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 #> [11551] 63 6c 61 73 73 3d 22 6f 70 22 3e 7c 26 67 74 3b 3c 2f 73 70 61 #> [11572] 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c #> [11593] 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 #> [11614] 5f 64 72 79 5f 72 75 6e 2e 68 74 6d 6c 22 3e 72 65 71 5f 64 72 #> [11635] 79 5f 72 75 6e 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e #> [11656] 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c #> [11677] 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 #> [11698] 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 #> [11719] 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 #> [11740] 54 20 2f 20 48 54 54 50 2f 31 2e 31 3c 2f 73 70 61 6e 3e 3c 2f #> [11761] 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [11782] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 61 63 63 65 70 74 3a #> [11803] 20 2a 2f 2a 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 #> [11824] 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e #> [11845] 23 26 67 74 3b 20 61 63 63 65 70 74 2d 65 6e 63 6f 64 69 6e 67 #> [11866] 3a 20 64 65 66 6c 61 74 65 2c 20 67 7a 69 70 3c 2f 73 70 61 6e #> [11887] 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #> [11908] 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 68 6f 73 74 #> [11929] 3a 20 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 3c 2f 73 70 61 6e #> [11950] 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #> [11971] 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 75 73 65 72 #> [11992] 2d 61 67 65 6e 74 3a 20 68 74 74 72 32 2f 31 2e 31 2e 30 2e 39 #> [12013] 30 30 30 20 72 2d 63 75 72 6c 2f 36 2e 32 2e 31 20 6c 69 62 63 #> [12034] 75 72 6c 2f 38 2e 31 31 2e 31 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #> [12055] 61 6e 3e 3c 2f 63 6f 64 65 3e 3c 2f 70 72 65 3e 3c 2f 64 69 76 #> [12076] 3e 0a 3c 70 3e 55 73 65 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 #> [12097] 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 70 65 72 66 #> [12118] 6f 72 6d 2e 68 74 6d 6c 22 3e 72 65 71 5f 70 65 72 66 6f 72 6d #> [12139] 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 20 74 6f 20 70 65 72 66 #> [12160] 6f 72 6d 20 74 68 65 20 72 65 71 75 65 73 74 2c 20 72 65 74 72 #> [12181] 69 65 76 69 6e 67 20 61 20 3c 73 74 72 6f 6e 67 3e 72 65 73 70 #> [12202] 6f 6e 73 65 3c 2f 73 74 72 6f 6e 67 3e 3a 3c 2f 70 3e 0a 3c 64 #> [12223] 69 76 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 #> [12244] 20 69 64 3d 22 63 62 35 22 3e 3c 70 72 65 20 63 6c 61 73 73 3d #> [12265] 22 64 6f 77 6e 6c 69 74 20 73 6f 75 72 63 65 43 6f 64 65 20 72 #> [12286] 22 3e 0a 3c 63 6f 64 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 #> [12307] 65 43 6f 64 65 20 52 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #> [12328] 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e #> [12349] 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 26 6c #> [12370] 74 3b 2d 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 #> [12391] 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 #> [12412] 65 6e 63 65 2f 72 65 71 5f 70 65 72 66 6f 72 6d 2e 68 74 6d 6c #> [12433] 22 3e 72 65 71 5f 70 65 72 66 6f 72 6d 3c 2f 61 3e 3c 2f 73 70 #> [12454] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 #> [12475] 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 76 #> [12496] 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #> [12517] 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #> [12538] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #> [12559] 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #> [12580] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #> [12601] 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 72 32 #> [12622] 5f 72 65 73 70 6f 6e 73 65 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c #> [12643] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #> [12664] 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 54 20 68 74 #> [12685] 74 70 73 3a 2f 2f 77 77 77 2e 72 2d 70 72 6f 6a 65 63 74 2e 6f #> [12706] 72 67 2f 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 #> [12727] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 #> [12748] 26 67 74 3b 20 53 74 61 74 75 73 3a 20 32 30 30 20 4f 4b 3c 2f #> [12769] 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 #> [12790] 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 #> [12811] 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74 #> [12832] 6d 6c 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 #> [12853] 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 #> [12874] 67 74 3b 20 42 6f 64 79 3a 20 49 6e 20 6d 65 6d 6f 72 79 20 28 #> [12895] 36 39 36 33 20 62 79 74 65 73 29 3c 2f 73 70 61 6e 3e 3c 2f 73 #> [12916] 70 61 6e 3e 3c 2f 63 6f 64 65 3e 3c 2f 70 72 65 3e 3c 2f 64 69 #> [12937] 76 3e 0a 3c 70 3e 54 68 65 20 3c 63 6f 64 65 3e 72 65 73 70 5f #> [12958] 3c 2f 63 6f 64 65 3e 20 66 75 6e 63 74 69 6f 6e 73 20 68 65 6c #> [12979] 70 20 79 6f 75 20 65 78 74 72 61 63 74 20 76 61 72 69 6f 75 73 #> [13000] 20 75 73 65 66 75 6c 20 63 6f 6d 70 6f 6e 65 6e 74 73 20 6f 66 #> [13021] 20 74 68 65 20 72 65 73 70 6f 6e 73 65 3a 3c 2f 70 3e 0a 3c 64 #> [13042] 69 76 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 #> [13063] 20 69 64 3d 22 63 62 36 22 3e 3c 70 72 65 20 63 6c 61 73 73 3d #> [13084] 22 64 6f 77 6e 6c 69 74 20 73 6f 75 72 63 65 43 6f 64 65 20 72 #> [13105] 22 3e 0a 3c 63 6f 64 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 #> [13126] 65 43 6f 64 65 20 52 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #> [13147] 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e #> [13168] 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 7c 26 #> [13189] 67 74 3b 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 #> [13210] 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 #> [13231] 65 6e 63 65 2f 72 65 73 70 5f 63 6f 6e 74 65 6e 74 5f 74 79 70 #> [13252] 65 2e 68 74 6d 6c 22 3e 72 65 73 70 5f 63 6f 6e 74 65 6e 74 5f #> [13273] 74 79 70 65 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 #> [13294] 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 #> [13315] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 #> [13336] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #> [13357] 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 5b 31 5d #> [13378] 20 22 74 65 78 74 2f 68 74 6d 6c 22 3c 2f 73 70 61 6e 3e 3c 2f #> [13399] 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [13420] 73 73 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e 3e 20 3c #> [13441] 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 7c 26 67 74 3b #> [13462] 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #> [13483] 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 #> [13504] 65 2f 72 65 73 70 5f 73 74 61 74 75 73 2e 68 74 6d 6c 22 3e 72 #> [13525] 65 73 70 5f 73 74 61 74 75 73 5f 64 65 73 63 3c 2f 61 3e 3c 2f #> [13546] 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 #> [13567] 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #> [13588] 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a #> [13609] 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f #> [13630] 22 3e 23 26 67 74 3b 20 5b 31 5d 20 22 4f 4b 22 3c 2f 73 70 61 #> [13651] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e #> [13672] 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 #> [13693] 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 7c #> [13714] 26 67 74 3b 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 #> [13735] 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 #> [13756] 72 65 6e 63 65 2f 72 65 73 70 5f 62 6f 64 79 5f 72 61 77 2e 68 #> [13777] 74 6d 6c 22 3e 72 65 73 70 5f 62 6f 64 79 5f 68 74 6d 6c 3c 2f #> [13798] 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #> [13819] 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #> [13840] 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #> [13861] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #> [13882] 3d 22 63 6f 22 3e 23 26 67 74 3b 20 7b 68 74 6d 6c 5f 64 6f 63 #> [13903] 75 6d 65 6e 74 7d 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a #> [13924] 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f #> [13945] 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 6d 6c 20 6c 61 6e 67 #> [13966] 3d 22 65 6e 22 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 #> [13987] 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #> [14008] 22 63 6f 22 3e 23 26 67 74 3b 20 5b 31 5d 20 26 6c 74 3b 68 65 #> [14029] 61 64 26 67 74 3b 5c 6e 26 6c 74 3b 6d 65 74 61 20 68 74 74 70 #> [14050] 2d 65 71 75 69 76 3d 22 43 6f 6e 74 65 6e 74 2d 54 79 70 65 22 #> [14071] 20 63 6f 6e 74 65 6e 74 3d 22 74 65 78 74 2f 68 74 6d 6c 3b 20 #> [14092] 63 68 61 72 73 65 74 3d 55 54 46 2d 38 20 2e 2e 2e 3c 2f 73 70 #> [14113] 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 #> [14134] 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 5b 32 #> [14155] 5d 20 26 6c 74 3b 62 6f 64 79 26 67 74 3b 5c 6e 20 20 20 20 26 #> [14176] 6c 74 3b 64 69 76 20 63 6c 61 73 73 3d 22 63 6f 6e 74 61 69 6e #> [14197] 65 72 20 70 61 67 65 22 26 67 74 3b 5c 6e 20 20 20 20 20 20 26 #> [14218] 6c 74 3b 64 69 76 20 63 6c 61 73 73 3d 22 72 6f 77 22 26 67 74 #> [14239] 3b 5c 6e 20 20 20 20 20 20 20 2e 2e 2e 3c 2f 73 70 61 6e 3e 3c #> [14260] 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 3e 3c 2f 70 72 65 3e 3c 2f #> [14281] 64 69 76 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 69 76 20 63 6c 61 73 #> [14302] 73 3d 22 73 65 63 74 69 6f 6e 20 6c 65 76 65 6c 32 22 3e 0a 3c #> [14323] 68 32 20 69 64 3d 22 6d 61 6a 6f 72 2d 64 69 66 66 65 72 65 6e #> [14344] 63 65 73 2d 74 6f 2d 68 74 74 72 22 3e 4d 61 6a 6f 72 20 64 69 #> [14365] 66 66 65 72 65 6e 63 65 73 20 74 6f 20 68 74 74 72 3c 61 20 63 #> [14386] 6c 61 73 73 3d 22 61 6e 63 68 6f 72 22 20 61 72 69 61 2d 6c 61 #> [14407] 62 65 6c 3d 22 61 6e 63 68 6f 72 22 20 68 72 65 66 3d 22 23 6d #> [14428] 61 6a 6f 72 2d 64 69 66 66 65 72 65 6e 63 65 73 2d 74 6f 2d 68 #> [14449] 74 74 72 22 3e 3c 2f 61 3e 0a 3c 2f 68 32 3e 0a 3c 75 6c 3e 0a #> [14470] 3c 6c 69 3e 3c 70 3e 59 6f 75 20 63 61 6e 20 6e 6f 77 20 63 72 #> [14491] 65 61 74 65 20 61 6e 64 20 6d 6f 64 69 66 79 20 61 20 72 65 71 #> [14512] 75 65 73 74 20 77 69 74 68 6f 75 74 20 70 65 72 66 6f 72 6d 69 #> [14533] 6e 67 20 69 74 2e 20 54 68 69 73 20 6d 65 61 6e 73 20 74 68 61 #> [14554] 74 20 74 68 65 72 65 e2 80 99 73 20 6e 6f 77 20 61 20 73 69 6e #> [14575] 67 6c 65 20 66 75 6e 63 74 69 6f 6e 20 74 6f 20 70 65 72 66 6f #> [14596] 72 6d 20 74 68 65 20 72 65 71 75 65 73 74 20 61 6e 64 20 66 65 #> [14617] 74 63 68 20 74 68 65 20 72 65 73 75 6c 74 3a 20 3c 63 6f 64 65 #> [14638] 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 #> [14659] 65 71 5f 70 65 72 66 6f 72 6d 2e 68 74 6d 6c 22 3e 72 65 71 5f #> [14680] 70 65 72 66 6f 72 6d 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2e #> [14701] 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 #> [14722] 65 6e 63 65 2f 72 65 71 5f 70 65 72 66 6f 72 6d 2e 68 74 6d 6c #> [14743] 22 3e 72 65 71 5f 70 65 72 66 6f 72 6d 28 29 3c 2f 61 3e 3c 2f #> [14764] 63 6f 64 65 3e 20 72 65 70 6c 61 63 65 73 20 3c 63 6f 64 65 3e #> [14785] 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 68 74 74 72 #> [14806] 2e 72 2d 6c 69 62 2e 6f 72 67 2f 72 65 66 65 72 65 6e 63 65 2f #> [14827] 47 45 54 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 #> [14848] 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 68 74 74 72 3a 3a 47 45 54 28 #> [14869] 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2c 20 3c 63 6f 64 65 3e 3c #> [14890] 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 68 74 74 72 2e #> [14911] 72 2d 6c 69 62 2e 6f 72 67 2f 72 65 66 65 72 65 6e 63 65 2f 50 #> [14932] 4f 53 54 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 #> [14953] 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 68 74 74 72 3a 3a 50 4f 53 54 #> [14974] 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2c 20 3c 63 6f 64 65 3e #> [14995] 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 68 74 74 72 #> [15016] 2e 72 2d 6c 69 62 2e 6f 72 67 2f 72 65 66 65 72 65 6e 63 65 2f #> [15037] 44 45 4c 45 54 45 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 #> [15058] 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 68 74 74 72 3a 3a 44 #> [15079] 45 4c 45 54 45 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2c 20 61 #> [15100] 6e 64 20 6d 6f 72 65 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c 6c 69 #> [15121] 3e 3c 70 3e 48 54 54 50 20 65 72 72 6f 72 73 20 61 72 65 20 61 #> [15142] 75 74 6f 6d 61 74 69 63 61 6c 6c 79 20 63 6f 6e 76 65 72 74 65 #> [15163] 64 20 69 6e 74 6f 20 52 20 65 72 72 6f 72 73 2e 20 55 73 65 20 #> [15184] 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 #> [15205] 6e 63 65 2f 72 65 71 5f 65 72 72 6f 72 2e 68 74 6d 6c 22 3e 72 #> [15226] 65 71 5f 65 72 72 6f 72 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e #> [15247] 20 74 6f 20 6f 76 65 72 72 69 64 65 20 74 68 65 20 64 65 66 61 #> [15268] 75 6c 74 73 20 28 77 68 69 63 68 20 74 75 72 6e 20 61 6c 6c 20 #> [15289] 34 78 78 20 61 6e 64 20 35 78 78 20 72 65 73 70 6f 6e 73 65 73 #> [15310] 20 69 6e 74 6f 20 65 72 72 6f 72 73 29 20 6f 72 20 74 6f 20 61 #> [15331] 64 64 20 61 64 64 69 74 69 6f 6e 61 6c 20 64 65 74 61 69 6c 73 #> [15352] 20 74 6f 20 74 68 65 20 65 72 72 6f 72 20 6d 65 73 73 61 67 65 #> [15373] 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 70 3e 59 6f 75 #> [15394] 20 63 61 6e 20 61 75 74 6f 6d 61 74 69 63 61 6c 6c 79 20 72 65 #> [15415] 74 72 79 20 69 66 20 74 68 65 20 72 65 71 75 65 73 74 20 66 61 #> [15436] 69 6c 73 20 6f 72 20 65 6e 63 6f 75 6e 74 65 72 73 20 61 20 74 #> [15457] 72 61 6e 73 69 65 6e 74 20 48 54 54 50 20 65 72 72 6f 72 20 28 #> [15478] 65 2e 67 2e c2 a0 61 20 34 32 39 20 72 61 74 65 20 6c 69 6d 69 #> [15499] 74 20 72 65 71 75 65 73 74 29 2e 20 3c 63 6f 64 65 3e 3c 61 20 #> [15520] 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 72 #> [15541] 65 74 72 79 2e 68 74 6d 6c 22 3e 72 65 71 5f 72 65 74 72 79 28 #> [15562] 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 20 64 65 66 69 6e 65 73 20 #> [15583] 74 68 65 20 6d 61 78 69 6d 75 6d 20 6e 75 6d 62 65 72 20 6f 66 #> [15604] 20 72 65 74 72 69 65 73 2c 20 77 68 69 63 68 20 65 72 72 6f 72 #> [15625] 73 20 61 72 65 20 74 72 61 6e 73 69 65 6e 74 2c 20 61 6e 64 20 #> [15646] 68 6f 77 20 6c 6f 6e 67 20 74 6f 20 77 61 69 74 20 62 65 74 77 #> [15667] 65 65 6e 20 74 72 69 65 73 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c #> [15688] 6c 69 3e 3c 70 3e 4f 41 75 74 68 20 73 75 70 70 6f 72 74 20 68 #> [15709] 61 73 20 62 65 65 6e 20 74 6f 74 61 6c 6c 79 20 6f 76 65 72 68 #> [15730] 61 75 6c 65 64 20 74 6f 20 64 69 72 65 63 74 6c 79 20 73 75 70 #> [15751] 70 6f 72 74 20 6d 61 6e 79 20 6d 6f 72 65 20 66 6c 6f 77 73 20 #> [15772] 61 6e 64 20 74 6f 20 6d 61 6b 65 20 69 74 20 6d 75 63 68 20 65 #> [15793] 61 73 69 65 72 20 74 6f 20 62 6f 74 68 20 63 75 73 74 6f 6d 69 #> [15814] 73 65 20 74 68 65 20 62 75 69 6c 74 2d 69 6e 20 66 6c 6f 77 73 #> [15835] 20 61 6e 64 20 74 6f 20 63 72 65 61 74 65 20 79 6f 75 72 20 6f #> [15856] 77 6e 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 70 3e 59 #> [15877] 6f 75 20 63 61 6e 20 6d 61 6e 61 67 65 20 73 65 63 72 65 74 73 #> [15898] 20 28 6f 66 74 65 6e 20 6e 65 65 64 65 64 20 66 6f 72 20 74 65 #> [15919] 73 74 69 6e 67 29 20 77 69 74 68 20 3c 63 6f 64 65 3e 3c 61 20 #> [15940] 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 73 65 63 72 65 #> [15961] 74 73 2e 68 74 6d 6c 22 3e 73 65 63 72 65 74 5f 65 6e 63 72 79 #> [15982] 70 74 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 20 61 6e 64 20 66 #> [16003] 72 69 65 6e 64 73 2e 20 59 6f 75 20 63 61 6e 20 6f 62 66 75 73 #> [16024] 63 61 74 65 20 6d 69 6c 64 6c 79 20 63 6f 6e 66 69 64 65 6e 74 #> [16045] 69 61 6c 20 64 61 74 61 20 77 69 74 68 20 3c 63 6f 64 65 3e 3c #> [16066] 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 6f 62 66 #> [16087] 75 73 63 61 74 65 2e 68 74 6d 6c 22 3e 6f 62 66 75 73 63 61 74 #> [16108] 65 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2c 20 70 72 65 76 65 #> [16129] 6e 74 69 6e 67 20 69 74 20 66 72 6f 6d 20 62 65 69 6e 67 20 73 #> [16150] 63 72 61 70 65 64 20 66 72 6f 6d 20 70 75 62 6c 69 73 68 65 64 #> [16171] 20 63 6f 64 65 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c #> [16192] 70 3e 59 6f 75 20 63 61 6e 20 61 75 74 6f 6d 61 74 69 63 61 6c #> [16213] 6c 79 20 63 61 63 68 65 20 61 6c 6c 20 63 61 63 68 65 61 62 6c #> [16234] 65 20 72 65 73 75 6c 74 73 20 77 69 74 68 20 3c 63 6f 64 65 3e #> [16255] 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 #> [16276] 71 5f 63 61 63 68 65 2e 68 74 6d 6c 22 3e 72 65 71 5f 63 61 63 #> [16297] 68 65 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2e 20 52 65 6c 61 #> [16318] 74 69 76 65 6c 79 20 66 65 77 20 41 50 49 20 72 65 73 70 6f 6e #> [16339] 73 65 73 20 61 72 65 20 63 61 63 68 65 61 62 6c 65 2c 20 62 75 #> [16360] 74 20 77 68 65 6e 20 74 68 65 79 20 61 72 65 20 69 74 20 74 79 #> [16381] 70 69 63 61 6c 6c 79 20 6d 61 6b 65 73 20 61 20 62 69 67 20 64 #> [16402] 69 66 66 65 72 65 6e 63 65 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c #> [16423] 2f 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 69 76 20 63 6c 61 73 #> [16444] 73 3d 22 73 65 63 74 69 6f 6e 20 6c 65 76 65 6c 32 22 3e 0a 3c #> [16465] 68 32 20 69 64 3d 22 61 63 6b 6e 6f 77 6c 65 64 67 65 6d 65 6e #> [16486] 74 73 22 3e 41 63 6b 6e 6f 77 6c 65 64 67 65 6d 65 6e 74 73 3c #> [16507] 61 20 63 6c 61 73 73 3d 22 61 6e 63 68 6f 72 22 20 61 72 69 61 #> [16528] 2d 6c 61 62 65 6c 3d 22 61 6e 63 68 6f 72 22 20 68 72 65 66 3d #> [16549] 22 23 61 63 6b 6e 6f 77 6c 65 64 67 65 6d 65 6e 74 73 22 3e 3c #> [16570] 2f 61 3e 0a 3c 2f 68 32 3e 0a 3c 70 3e 68 74 74 72 32 20 77 6f #> [16591] 75 6c 64 6e e2 80 99 74 20 62 65 20 70 6f 73 73 69 62 6c 65 20 #> [16612] 77 69 74 68 6f 75 74 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 #> [16633] 73 3a 2f 2f 63 72 61 6e 2e 64 65 76 2f 63 75 72 6c 2f 22 20 63 #> [16654] 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e #> [16675] 63 75 72 6c 3c 2f 61 3e 2c 20 3c 61 20 68 72 65 66 3d 22 68 74 #> [16696] 74 70 73 3a 2f 2f 63 72 61 6e 2e 64 65 76 2f 6f 70 65 6e 73 73 #> [16717] 6c 2f 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c #> [16738] 69 6e 6b 22 3e 6f 70 65 6e 73 73 6c 3c 2f 61 3e 2c 20 3c 61 20 #> [16759] 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 63 72 61 6e 2e 64 65 #> [16780] 76 2f 6a 73 6f 6e 6c 69 74 65 2f 22 20 63 6c 61 73 73 3d 22 65 #> [16801] 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 6a 73 6f 6e 6c 69 74 #> [16822] 65 3c 2f 61 3e 2c 20 61 6e 64 20 3c 61 20 68 72 65 66 3d 22 68 #> [16843] 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 72 2d 6c #> [16864] 69 62 2f 6a 6f 73 65 2f 22 20 63 6c 61 73 73 3d 22 65 78 74 65 #> [16885] 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 6a 6f 73 65 3c 2f 61 3e 2c 20 #> [16906] 77 68 69 63 68 20 61 72 65 20 61 6c 6c 20 6d 61 69 6e 74 61 69 #> [16927] 6e 65 64 20 62 79 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 #> [16948] 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 6a 65 72 6f 65 6e 22 #> [16969] 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b #> [16990] 22 3e 4a 65 72 6f 65 6e 20 4f 6f 6d 73 3c 2f 61 3e 2e 20 41 20 #> [17011] 62 69 67 20 74 68 61 6e 6b 73 20 61 6c 73 6f 20 67 6f 20 74 6f #> [17032] 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 6a 65 6e #> [17053] 6e 79 62 72 79 61 6e 2e 6f 72 67 22 20 63 6c 61 73 73 3d 22 65 #> [17074] 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 4a 65 6e 6e 79 20 42 #> [17095] 72 79 61 6e 3c 2f 61 3e 20 61 6e 64 20 3c 61 20 68 72 65 66 3d #> [17116] 22 68 74 74 70 73 3a 2f 2f 77 77 77 2e 63 72 61 69 67 63 69 74 #> [17137] 72 6f 2e 6f 72 67 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e #> [17158] 61 6c 2d 6c 69 6e 6b 22 3e 43 72 61 69 67 20 43 69 74 72 6f 3c #> [17179] 2f 61 3e 20 77 68 6f 20 68 61 76 65 20 67 69 76 65 6e 20 6d 65 #> [17200] 20 6d 75 63 68 20 75 73 65 66 75 6c 20 66 65 65 64 62 61 63 6b #> [17221] 20 6f 6e 20 62 6f 74 68 20 74 68 65 20 64 65 73 69 67 6e 20 6f #> [17242] 66 20 74 68 65 20 69 6e 74 65 72 6e 61 6c 73 20 61 6e 64 20 74 #> [17263] 68 65 20 75 73 65 72 20 66 61 63 69 6e 67 20 41 50 49 2e 3c 2f #> [17284] 70 3e 0a 3c 2f 64 69 76 3e 0a 3c 2f 64 69 76 3e 0a 20 20 3c 2f #> [17305] 6d 61 69 6e 3e 3c 61 73 69 64 65 20 63 6c 61 73 73 3d 22 63 6f #> [17326] 6c 2d 6d 64 2d 33 22 3e 3c 64 69 76 20 63 6c 61 73 73 3d 22 6c #> [17347] 69 6e 6b 73 22 3e 0a 3c 68 32 20 64 61 74 61 2d 74 6f 63 2d 73 #> [17368] 6b 69 70 3e 4c 69 6e 6b 73 3c 2f 68 32 3e 0a 3c 75 6c 20 63 6c #> [17389] 61 73 73 3d 22 6c 69 73 74 2d 75 6e 73 74 79 6c 65 64 22 3e 0a #> [17410] 3c 6c 69 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f #> [17431] 63 6c 6f 75 64 2e 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 2f 70 #> [17452] 61 63 6b 61 67 65 3d 68 74 74 72 32 22 20 63 6c 61 73 73 3d 22 #> [17473] 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 56 69 65 77 20 6f #> [17494] 6e 20 43 52 41 4e 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c #> [17515] 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 #> [17536] 62 2e 63 6f 6d 2f 72 2d 6c 69 62 2f 68 74 74 72 32 2f 22 20 63 #> [17557] 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e #> [17578] 42 72 6f 77 73 65 20 73 6f 75 72 63 65 20 63 6f 64 65 3c 2f 61 #> [17599] 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 61 20 68 72 65 66 3d 22 68 #> [17620] 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 72 2d 6c #> [17641] 69 62 2f 68 74 74 72 32 2f 69 73 73 75 65 73 22 20 63 6c 61 73 #> [17662] 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 52 65 70 #> [17683] 6f 72 74 20 61 20 62 75 67 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 2f #> [17704] 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 0a 3c 64 69 76 20 63 6c 61 73 #> [17725] 73 3d 22 6c 69 63 65 6e 73 65 22 3e 0a 3c 68 32 20 64 61 74 61 #> [17746] 2d 74 6f 63 2d 73 6b 69 70 3e 4c 69 63 65 6e 73 65 3c 2f 68 32 #> [17767] 3e 0a 3c 75 6c 20 63 6c 61 73 73 3d 22 6c 69 73 74 2d 75 6e 73 #> [17788] 74 79 6c 65 64 22 3e 0a 3c 6c 69 3e 3c 61 20 68 72 65 66 3d 22 #> [17809] 4c 49 43 45 4e 53 45 2e 68 74 6d 6c 22 3e 46 75 6c 6c 20 6c 69 #> [17830] 63 65 6e 73 65 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 73 #> [17851] 6d 61 6c 6c 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f #> [17872] 2f 6f 70 65 6e 73 6f 75 72 63 65 2e 6f 72 67 2f 6c 69 63 65 6e #> [17893] 73 65 73 2f 6d 69 74 2d 6c 69 63 65 6e 73 65 2e 70 68 70 22 20 #> [17914] 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 #> [17935] 3e 4d 49 54 3c 2f 61 3e 20 2b 20 66 69 6c 65 20 3c 61 20 68 72 #> [17956] 65 66 3d 22 4c 49 43 45 4e 53 45 2d 74 65 78 74 2e 68 74 6d 6c #> [17977] 22 3e 4c 49 43 45 4e 53 45 3c 2f 61 3e 3c 2f 73 6d 61 6c 6c 3e #> [17998] 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 0a 0a #> [18019] 3c 64 69 76 20 63 6c 61 73 73 3d 22 63 69 74 61 74 69 6f 6e 22 #> [18040] 3e 0a 3c 68 32 20 64 61 74 61 2d 74 6f 63 2d 73 6b 69 70 3e 43 #> [18061] 69 74 61 74 69 6f 6e 3c 2f 68 32 3e 0a 3c 75 6c 20 63 6c 61 73 #> [18082] 73 3d 22 6c 69 73 74 2d 75 6e 73 74 79 6c 65 64 22 3e 0a 3c 6c #> [18103] 69 3e 3c 61 20 68 72 65 66 3d 22 61 75 74 68 6f 72 73 2e 68 74 #> [18124] 6d 6c 23 63 69 74 61 74 69 6f 6e 22 3e 43 69 74 69 6e 67 20 68 #> [18145] 74 74 72 32 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c #> [18166] 2f 64 69 76 3e 0a 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 64 65 #> [18187] 76 65 6c 6f 70 65 72 73 22 3e 0a 3c 68 32 20 64 61 74 61 2d 74 #> [18208] 6f 63 2d 73 6b 69 70 3e 44 65 76 65 6c 6f 70 65 72 73 3c 2f 68 #> [18229] 32 3e 0a 3c 75 6c 20 63 6c 61 73 73 3d 22 6c 69 73 74 2d 75 6e #> [18250] 73 74 79 6c 65 64 22 3e 0a 3c 6c 69 3e 0a 3c 61 20 68 72 65 66 #> [18271] 3d 22 68 74 74 70 73 3a 2f 2f 68 61 64 6c 65 79 2e 6e 7a 22 20 #> [18292] 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 #> [18313] 3e 48 61 64 6c 65 79 20 57 69 63 6b 68 61 6d 3c 2f 61 3e 20 3c #> [18334] 62 72 3e 3c 73 6d 61 6c 6c 20 63 6c 61 73 73 3d 22 72 6f 6c 65 #> [18355] 73 22 3e 20 41 75 74 68 6f 72 2c 20 6d 61 69 6e 74 61 69 6e 65 #> [18376] 72 20 3c 2f 73 6d 61 6c 6c 3e 20 20 3c 2f 6c 69 3e 0a 3c 6c 69 #> [18397] 3e 0a 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 77 77 #> [18418] 77 2e 70 6f 73 69 74 2e 63 6f 22 20 63 6c 61 73 73 3d 22 65 78 #> [18439] 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 3c 69 6d 67 20 73 72 63 #> [18460] 3d 22 68 74 74 70 73 3a 2f 2f 77 77 77 2e 74 69 64 79 76 65 72 #> [18481] 73 65 2e 6f 72 67 2f 70 6f 73 69 74 2d 6c 6f 67 6f 2e 73 76 67 #> [18502] 22 20 61 6c 74 3d 22 50 6f 73 69 74 22 20 68 65 69 67 68 74 3d #> [18523] 22 31 36 22 20 77 69 64 74 68 3d 22 36 32 22 20 73 74 79 6c 65 #> [18544] 3d 22 6d 61 72 67 69 6e 2d 62 6f 74 74 6f 6d 3a 20 33 70 78 3b #> [18565] 22 3e 3c 2f 61 3e 20 3c 62 72 3e 3c 73 6d 61 6c 6c 20 63 6c 61 #> [18586] 73 73 3d 22 72 6f 6c 65 73 22 3e 20 43 6f 70 79 72 69 67 68 74 #> [18607] 20 68 6f 6c 64 65 72 2c 20 66 75 6e 64 65 72 20 3c 2f 73 6d 61 #> [18628] 6c 6c 3e 20 20 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 61 20 68 72 65 #> [18649] 66 3d 22 61 75 74 68 6f 72 73 2e 68 74 6d 6c 22 3e 4d 6f 72 65 #> [18670] 20 61 62 6f 75 74 20 61 75 74 68 6f 72 73 2e 2e 2e 3c 2f 61 3e #> [18691] 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 0a 0a #> [18712] 0a 20 20 3c 2f 61 73 69 64 65 3e 0a 3c 2f 64 69 76 3e 0a 0a 0a #> [18733] 20 20 20 3c 2f 64 69 76 3e 0a 20 20 3c 66 6f 6f 74 65 72 3e 3c #> [18754] 64 69 76 20 63 6c 61 73 73 3d 22 63 6f 6e 74 61 69 6e 65 72 22 #> [18775] 3e 0a 20 20 3c 64 69 76 20 63 6c 61 73 73 3d 22 70 6b 67 64 6f #> [18796] 77 6e 2d 66 6f 6f 74 65 72 2d 6c 65 66 74 22 3e 0a 20 20 3c 70 #> [18817] 3e 44 65 76 65 6c 6f 70 65 64 20 62 79 20 3c 61 20 68 72 65 66 #> [18838] 3d 22 68 74 74 70 73 3a 2f 2f 68 61 64 6c 65 79 2e 6e 7a 22 20 #> [18859] 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 #> [18880] 3e 48 61 64 6c 65 79 20 57 69 63 6b 68 61 6d 3c 2f 61 3e 2c 20 #> [18901] 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 77 77 77 2e #> [18922] 70 6f 73 69 74 2e 63 6f 22 20 63 6c 61 73 73 3d 22 65 78 74 65 #> [18943] 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 3c 69 6d 67 20 73 72 63 3d 22 #> [18964] 68 74 74 70 73 3a 2f 2f 77 77 77 2e 74 69 64 79 76 65 72 73 65 #> [18985] 2e 6f 72 67 2f 70 6f 73 69 74 2d 6c 6f 67 6f 2e 73 76 67 22 20 #> [19006] 61 6c 74 3d 22 50 6f 73 69 74 22 20 68 65 69 67 68 74 3d 22 31 #> [19027] 36 22 20 77 69 64 74 68 3d 22 36 32 22 20 73 74 79 6c 65 3d 22 #> [19048] 6d 61 72 67 69 6e 2d 62 6f 74 74 6f 6d 3a 20 33 70 78 3b 22 3e #> [19069] 3c 2f 61 3e 2e 3c 2f 70 3e 0a 3c 2f 64 69 76 3e 0a 0a 3c 64 69 #> [19090] 76 20 63 6c 61 73 73 3d 22 70 6b 67 64 6f 77 6e 2d 66 6f 6f 74 #> [19111] 65 72 2d 72 69 67 68 74 22 3e 0a 20 20 3c 70 3e 53 69 74 65 20 #> [19132] 62 75 69 6c 74 20 77 69 74 68 20 3c 61 20 68 72 65 66 3d 22 68 #> [19153] 74 74 70 73 3a 2f 2f 70 6b 67 64 6f 77 6e 2e 72 2d 6c 69 62 2e #> [19174] 6f 72 67 2f 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c #> [19195] 2d 6c 69 6e 6b 22 3e 70 6b 67 64 6f 77 6e 3c 2f 61 3e 20 32 2e #> [19216] 31 2e 31 2e 3c 2f 70 3e 0a 3c 2f 64 69 76 3e 0a 0a 20 20 3c 2f #> [19237] 64 69 76 3e 3c 2f 66 6f 6f 74 65 72 3e 0a 3c 2f 62 6f 64 79 3e #> [19258] 0a 3c 2f 68 74 6d 6c 3e 0a resp |> resp_body_string() #> [1] \"<!DOCTYPE html>\\n<!-- Generated by pkgdown: do not edit by hand --><html lang=\\\"en\\\">\\n<head>\\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n<meta charset=\\\"utf-8\\\">\\n<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n<title>Perform HTTP Requests and Process the Responses • httr2<\/title>\\n<!-- favicons --><link rel=\\\"icon\\\" type=\\\"image/png\\\" sizes=\\\"16x16\\\" href=\\\"favicon-16x16.png\\\">\\n<link rel=\\\"icon\\\" type=\\\"image/png\\\" sizes=\\\"32x32\\\" href=\\\"favicon-32x32.png\\\">\\n<link rel=\\\"apple-touch-icon\\\" type=\\\"image/png\\\" sizes=\\\"180x180\\\" href=\\\"apple-touch-icon.png\\\">\\n<link rel=\\\"apple-touch-icon\\\" type=\\\"image/png\\\" sizes=\\\"120x120\\\" href=\\\"apple-touch-icon-120x120.png\\\">\\n<link rel=\\\"apple-touch-icon\\\" type=\\\"image/png\\\" sizes=\\\"76x76\\\" href=\\\"apple-touch-icon-76x76.png\\\">\\n<link rel=\\\"apple-touch-icon\\\" type=\\\"image/png\\\" sizes=\\\"60x60\\\" href=\\\"apple-touch-icon-60x60.png\\\">\\n<script src=\\\"deps/jquery-3.6.0/jquery-3.6.0.min.js\\\"><\/script><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n<link href=\\\"deps/bootstrap-5.3.1/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\n<script src=\\\"deps/bootstrap-5.3.1/bootstrap.bundle.min.js\\\"><\/script><link href=\\\"deps/Source_Sans_Pro-0.4.9/font.css\\\" rel=\\\"stylesheet\\\">\\n<link href=\\\"deps/Source_Code_Pro-0.4.9/font.css\\\" rel=\\\"stylesheet\\\">\\n<link href=\\\"deps/font-awesome-6.5.2/css/all.min.css\\\" rel=\\\"stylesheet\\\">\\n<link href=\\\"deps/font-awesome-6.5.2/css/v4-shims.min.css\\\" rel=\\\"stylesheet\\\">\\n<script src=\\\"deps/headroom-0.11.0/headroom.min.js\\\"><\/script><script src=\\\"deps/headroom-0.11.0/jQuery.headroom.min.js\\\"><\/script><script src=\\\"deps/bootstrap-toc-1.0.1/bootstrap-toc.min.js\\\"><\/script><script src=\\\"deps/clipboard.js-2.0.11/clipboard.min.js\\\"><\/script><script src=\\\"deps/search-1.0.0/autocomplete.jquery.min.js\\\"><\/script><script src=\\\"deps/search-1.0.0/fuse.min.js\\\"><\/script><script src=\\\"deps/search-1.0.0/mark.min.js\\\"><\/script><!-- pkgdown --><script src=\\\"pkgdown.js\\\"><\/script><meta property=\\\"og:title\\\" content=\\\"Perform HTTP Requests and Process the Responses\\\">\\n<meta name=\\\"description\\\" content=\\\"Tools for creating and modifying HTTP requests, then performing them and processing the results. httr2 is a modern re-imagining of httr that uses a pipe-based interface and solves more of the problems that API wrapping packages face.\\\">\\n<meta property=\\\"og:description\\\" content=\\\"Tools for creating and modifying HTTP requests, then performing them and processing the results. httr2 is a modern re-imagining of httr that uses a pipe-based interface and solves more of the problems that API wrapping packages face.\\\">\\n<meta property=\\\"og:image\\\" content=\\\"https://httr2.r-lib.org/logo.png\\\">\\n<script defer data-domain=\\\"httr2.r-lib.org,all.tidyverse.org\\\" src=\\\"https://plausible.io/js/plausible.js\\\"><\/script>\\n<\/head>\\n<body>\\n    <a href=\\\"#container\\\" class=\\\"visually-hidden-focusable\\\">Skip to content<\/a>\\n\\n\\n    <nav class=\\\"navbar navbar-expand-lg fixed-top bg-none\\\" data-bs-theme=\\\"light\\\" aria-label=\\\"Site navigation\\\"><div class=\\\"container\\\">\\n\\n    <a class=\\\"navbar-brand me-2\\\" href=\\\"index.html\\\">httr2<\/a>\\n\\n    <small class=\\\"nav-text text-muted me-auto\\\" data-bs-toggle=\\\"tooltip\\\" data-bs-placement=\\\"bottom\\\" title=\\\"Released version\\\">1.1.1<\/small>\\n\\n\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-bs-toggle=\\\"collapse\\\" data-bs-target=\\\"#navbar\\\" aria-controls=\\\"navbar\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n      <span class=\\\"navbar-toggler-icon\\\"><\/span>\\n    <\/button>\\n\\n    <div id=\\\"navbar\\\" class=\\\"collapse navbar-collapse ms-3\\\">\\n      <ul class=\\\"navbar-nav me-auto\\\">\\n<li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" href=\\\"articles/httr2.html\\\">Get started<\/a><\/li>\\n<li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" href=\\\"reference/index.html\\\">Reference<\/a><\/li>\\n<li class=\\\"nav-item dropdown\\\">\\n  <button class=\\\"nav-link dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdown-articles\\\" data-bs-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\" aria-haspopup=\\\"true\\\">Articles<\/button>\\n  <ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdown-articles\\\">\\n<li><a class=\\\"dropdown-item\\\" href=\\\"articles/wrapping-apis.html\\\">Wrapping APIs<\/a><\/li>\\n    <li><a class=\\\"dropdown-item\\\" href=\\\"articles/oauth.html\\\">OAuth<\/a><\/li>\\n  <\/ul>\\n<\/li>\\n<li class=\\\"nav-item dropdown\\\">\\n  <button class=\\\"nav-link dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdown-news\\\" data-bs-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\" aria-haspopup=\\\"true\\\">News<\/button>\\n  <ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdown-news\\\">\\n<li><h6 class=\\\"dropdown-header\\\" data-toc-skip>Releases<\/h6><\/li>\\n    <li><a class=\\\"external-link dropdown-item\\\" href=\\\"https://www.tidyverse.org/blog/2025/01/httr2-1-1-0/\\\">httr2 1.1.0<\/a><\/li>\\n    <li><a class=\\\"external-link dropdown-item\\\" href=\\\"https://www.tidyverse.org/blog/2023/11/httr2-1-0-0/\\\">httr2 1.0.0<\/a><\/li>\\n    <li><hr class=\\\"dropdown-divider\\\"><\/li>\\n    <li><a class=\\\"dropdown-item\\\" href=\\\"news/index.html\\\">Changelog<\/a><\/li>\\n  <\/ul>\\n<\/li>\\n      <\/ul>\\n<ul class=\\\"navbar-nav\\\">\\n<li class=\\\"nav-item\\\"><form class=\\\"form-inline\\\" role=\\\"search\\\">\\n <input class=\\\"form-control\\\" type=\\\"search\\\" name=\\\"search-input\\\" id=\\\"search-input\\\" autocomplete=\\\"off\\\" aria-label=\\\"Search site\\\" placeholder=\\\"Search for\\\" data-search-index=\\\"search.json\\\">\\n<\/form><\/li>\\n<li class=\\\"nav-item\\\"><a class=\\\"external-link nav-link\\\" href=\\\"https://github.com/r-lib/httr2/\\\" aria-label=\\\"GitHub\\\"><span class=\\\"fa fab fa-github fa-lg\\\"><\/span><\/a><\/li>\\n      <\/ul>\\n<\/div>\\n\\n\\n  <\/div>\\n<\/nav><div class=\\\"container template-home\\\" id=\\\"container\\\">\\n<div class=\\\"row\\\">\\n  <main id=\\\"main\\\" class=\\\"col-md-9\\\"><div class=\\\"section level1\\\">\\n<div class=\\\"page-header\\\">\\n<img src=\\\"logo.png\\\" class=\\\"logo\\\" alt=\\\"\\\"><h1 id=\\\"httr2-\\\">httr2 \\n<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#httr2-\\\"><\/a>\\n<\/h1>\\n<\/div>\\n<!-- badges: start -->\\n\\n<p>httr2 (pronounced “hitter2”) is a comprehensive HTTP client that provides a modern, pipeable API for working with web APIs. It builds on top of <a href=\\\"https://jeroen.r-universe.dev/curl\\\" class=\\\"external-link\\\">{curl}<\/a> to provide features like explicit request objects, built-in rate limiting &amp; retry tooling, comprehensive OAuth support, and secure handling of secrets and credentials.<\/p>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"installation\\\">Installation<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#installation\\\"><\/a>\\n<\/h2>\\n<p>You can install httr2 from CRAN with:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb1\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"fu\\\"><a href=\\\"https://rdrr.io/r/utils/install.packages.html\\\" class=\\\"external-link\\\">install.packages<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"httr2\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span><\/code><\/pre><\/div>\\n<\/div>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"usage\\\">Usage<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#usage\\\"><\/a>\\n<\/h2>\\n<p>To use httr2, start by creating a <strong>request<\/strong>:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb2\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"kw\\\"><a href=\\\"https://rdrr.io/r/base/library.html\\\" class=\\\"external-link\\\">library<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"va\\\"><a href=\\\"https://httr2.r-lib.org\\\">httr2<\/a><\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">&lt;-<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/request.html\\\">request<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"https://r-project.org\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span><\/code><\/pre><\/div>\\n<p>You can tailor this request with the <code>req_<\/code> family of functions:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb3\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"co\\\"># Add custom headers<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_headers.html\\\">req_headers<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"Accept\\\"<\/span> <span class=\\\"op\\\">=<\/span> <span class=\\\"st\\\">\\\"application/json\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Headers:<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • Accept: \\\"application/json\\\"<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"co\\\"># Add a body, turning it into a POST<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_body.html\\\">req_body_json<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"fu\\\"><a href=\\\"https://rdrr.io/r/base/list.html\\\" class=\\\"external-link\\\">list<\/a><\/span><span class=\\\"op\\\">(<\/span>x <span class=\\\"op\\\">=<\/span> <span class=\\\"fl\\\">1<\/span>, y <span class=\\\"op\\\">=<\/span> <span class=\\\"fl\\\">2<\/span><span class=\\\"op\\\">)<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; POST https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: json encoded data<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"co\\\"># Modify the path in the url<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_url.html\\\">req_url_path<\/a><\/span><span class=\\\"op\\\">(<\/span>path <span class=\\\"op\\\">=<\/span> <span class=\\\"st\\\">\\\"path/to/my/file\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://r-project.org/path/to/my/file<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"co\\\"># Automatically retry if the request fails<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_retry.html\\\">req_retry<\/a><\/span><span class=\\\"op\\\">(<\/span>max_tries <span class=\\\"op\\\">=<\/span> <span class=\\\"fl\\\">5<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Policies:<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • retry_max_tries        : 5<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • retry_on_failure       : FALSE<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • retry_failure_threshold: Inf<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • retry_failure_timeout  : 30<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • retry_realm            : \\\"r-project.org\\\"<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"co\\\"># Change the HTTP method<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_method.html\\\">req_method<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"PATCH\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; PATCH https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span><\/code><\/pre><\/div>\\n<p>And see exactly what httr2 will send to the server with <code><a href=\\\"reference/req_dry_run.html\\\">req_dry_run()<\/a><\/code>:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb4\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_dry_run.html\\\">req_dry_run<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET / HTTP/1.1<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; accept: */*<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; accept-encoding: deflate, gzip<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; host: r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; user-agent: httr2/1.1.0.9000 r-curl/6.2.1 libcurl/8.11.1<\/span><\/span><\/code><\/pre><\/div>\\n<p>Use <code><a href=\\\"reference/req_perform.html\\\">req_perform()<\/a><\/code> to perform the request, retrieving a <strong>response<\/strong>:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb5\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\">&lt;-<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_perform.html\\\">req_perform<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"va\\\">req<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"va\\\">resp<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_response&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://www.r-project.org/<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Status: 200 OK<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Content-Type: text/html<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: In memory (6963 bytes)<\/span><\/span><\/code><\/pre><\/div>\\n<p>The <code>resp_<\/code> functions help you extract various useful components of the response:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb6\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/resp_content_type.html\\\">resp_content_type<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [1] \\\"text/html\\\"<\/span><\/span>\\n<span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/resp_status.html\\\">resp_status_desc<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [1] \\\"OK\\\"<\/span><\/span>\\n<span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\">|&gt;<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/resp_body_raw.html\\\">resp_body_html<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; {html_document}<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;html lang=\\\"en\\\"&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [1] &lt;head&gt;\\\\n&lt;meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8 ...<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [2] &lt;body&gt;\\\\n    &lt;div class=\\\"container page\\\"&gt;\\\\n      &lt;div class=\\\"row\\\"&gt;\\\\n       ...<\/span><\/span><\/code><\/pre><\/div>\\n<\/div>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"major-differences-to-httr\\\">Major differences to httr<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#major-differences-to-httr\\\"><\/a>\\n<\/h2>\\n<ul>\\n<li><p>You can now create and modify a request without performing it. This means that there’s now a single function to perform the request and fetch the result: <code><a href=\\\"reference/req_perform.html\\\">req_perform()<\/a><\/code>. <code><a href=\\\"reference/req_perform.html\\\">req_perform()<\/a><\/code> replaces <code><a href=\\\"https://httr.r-lib.org/reference/GET.html\\\" class=\\\"external-link\\\">httr::GET()<\/a><\/code>, <code><a href=\\\"https://httr.r-lib.org/reference/POST.html\\\" class=\\\"external-link\\\">httr::POST()<\/a><\/code>, <code><a href=\\\"https://httr.r-lib.org/reference/DELETE.html\\\" class=\\\"external-link\\\">httr::DELETE()<\/a><\/code>, and more.<\/p><\/li>\\n<li><p>HTTP errors are automatically converted into R errors. Use <code><a href=\\\"reference/req_error.html\\\">req_error()<\/a><\/code> to override the defaults (which turn all 4xx and 5xx responses into errors) or to add additional details to the error message.<\/p><\/li>\\n<li><p>You can automatically retry if the request fails or encounters a transient HTTP error (e.g. a 429 rate limit request). <code><a href=\\\"reference/req_retry.html\\\">req_retry()<\/a><\/code> defines the maximum number of retries, which errors are transient, and how long to wait between tries.<\/p><\/li>\\n<li><p>OAuth support has been totally overhauled to directly support many more flows and to make it much easier to both customise the built-in flows and to create your own.<\/p><\/li>\\n<li><p>You can manage secrets (often needed for testing) with <code><a href=\\\"reference/secrets.html\\\">secret_encrypt()<\/a><\/code> and friends. You can obfuscate mildly confidential data with <code><a href=\\\"reference/obfuscate.html\\\">obfuscate()<\/a><\/code>, preventing it from being scraped from published code.<\/p><\/li>\\n<li><p>You can automatically cache all cacheable results with <code><a href=\\\"reference/req_cache.html\\\">req_cache()<\/a><\/code>. Relatively few API responses are cacheable, but when they are it typically makes a big difference.<\/p><\/li>\\n<\/ul>\\n<\/div>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"acknowledgements\\\">Acknowledgements<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#acknowledgements\\\"><\/a>\\n<\/h2>\\n<p>httr2 wouldn’t be possible without <a href=\\\"https://cran.dev/curl/\\\" class=\\\"external-link\\\">curl<\/a>, <a href=\\\"https://cran.dev/openssl/\\\" class=\\\"external-link\\\">openssl<\/a>, <a href=\\\"https://cran.dev/jsonlite/\\\" class=\\\"external-link\\\">jsonlite<\/a>, and <a href=\\\"https://github.com/r-lib/jose/\\\" class=\\\"external-link\\\">jose<\/a>, which are all maintained by <a href=\\\"https://github.com/jeroen\\\" class=\\\"external-link\\\">Jeroen Ooms<\/a>. A big thanks also go to <a href=\\\"https://jennybryan.org\\\" class=\\\"external-link\\\">Jenny Bryan<\/a> and <a href=\\\"https://www.craigcitro.org\\\" class=\\\"external-link\\\">Craig Citro<\/a> who have given me much useful feedback on both the design of the internals and the user facing API.<\/p>\\n<\/div>\\n<\/div>\\n  <\/main><aside class=\\\"col-md-3\\\"><div class=\\\"links\\\">\\n<h2 data-toc-skip>Links<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li><a href=\\\"https://cloud.r-project.org/package=httr2\\\" class=\\\"external-link\\\">View on CRAN<\/a><\/li>\\n<li><a href=\\\"https://github.com/r-lib/httr2/\\\" class=\\\"external-link\\\">Browse source code<\/a><\/li>\\n<li><a href=\\\"https://github.com/r-lib/httr2/issues\\\" class=\\\"external-link\\\">Report a bug<\/a><\/li>\\n<\/ul>\\n<\/div>\\n\\n<div class=\\\"license\\\">\\n<h2 data-toc-skip>License<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li><a href=\\\"LICENSE.html\\\">Full license<\/a><\/li>\\n<li><small><a href=\\\"https://opensource.org/licenses/mit-license.php\\\" class=\\\"external-link\\\">MIT<\/a> + file <a href=\\\"LICENSE-text.html\\\">LICENSE<\/a><\/small><\/li>\\n<\/ul>\\n<\/div>\\n\\n\\n<div class=\\\"citation\\\">\\n<h2 data-toc-skip>Citation<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li><a href=\\\"authors.html#citation\\\">Citing httr2<\/a><\/li>\\n<\/ul>\\n<\/div>\\n\\n<div class=\\\"developers\\\">\\n<h2 data-toc-skip>Developers<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li>\\n<a href=\\\"https://hadley.nz\\\" class=\\\"external-link\\\">Hadley Wickham<\/a> <br><small class=\\\"roles\\\"> Author, maintainer <\/small>  <\/li>\\n<li>\\n<a href=\\\"https://www.posit.co\\\" class=\\\"external-link\\\"><img src=\\\"https://www.tidyverse.org/posit-logo.svg\\\" alt=\\\"Posit\\\" height=\\\"16\\\" width=\\\"62\\\" style=\\\"margin-bottom: 3px;\\\"><\/a> <br><small class=\\\"roles\\\"> Copyright holder, funder <\/small>  <\/li>\\n<li><a href=\\\"authors.html\\\">More about authors...<\/a><\/li>\\n<\/ul>\\n<\/div>\\n\\n\\n\\n  <\/aside>\\n<\/div>\\n\\n\\n   <\/div>\\n  <footer><div class=\\\"container\\\">\\n  <div class=\\\"pkgdown-footer-left\\\">\\n  <p>Developed by <a href=\\\"https://hadley.nz\\\" class=\\\"external-link\\\">Hadley Wickham<\/a>, <a href=\\\"https://www.posit.co\\\" class=\\\"external-link\\\"><img src=\\\"https://www.tidyverse.org/posit-logo.svg\\\" alt=\\\"Posit\\\" height=\\\"16\\\" width=\\\"62\\\" style=\\\"margin-bottom: 3px;\\\"><\/a>.<\/p>\\n<\/div>\\n\\n<div class=\\\"pkgdown-footer-right\\\">\\n  <p>Site built with <a href=\\\"https://pkgdown.r-lib.org/\\\" class=\\\"external-link\\\">pkgdown<\/a> 2.1.1.<\/p>\\n<\/div>\\n\\n  <\/div><\/footer>\\n<\/body>\\n<\/html>\\n\"  if (requireNamespace(\"xml2\", quietly = TRUE)) {   resp |> resp_body_html() } #> {html_document} #> <html lang=\"en\"> #> [1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; char ... #> [2] <body>\\n    <a href=\"#container\" class=\"visually-hidden-focusabl ..."},{"path":"https://httr2.r-lib.org/dev/reference/resp_check_content_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the content type of a response — resp_check_content_type","title":"Check the content type of a response — resp_check_content_type","text":"different content type expected often leads error parsing response body. function checks content type response expected fails otherwise.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_check_content_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the content type of a response — resp_check_content_type","text":"","code":"resp_check_content_type(   resp,   valid_types = NULL,   valid_suffix = NULL,   check_type = TRUE,   call = caller_env() )"},{"path":"https://httr2.r-lib.org/dev/reference/resp_check_content_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the content type of a response — resp_check_content_type","text":"resp httr2 response object, created req_perform(). valid_types character vector valid MIME types. specified type/subtype. valid_suffix string given \"structured media type\" suffix. check_type type actually checked? Provided convenience using function inside resp_body_* helpers. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_check_content_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the content type of a response — resp_check_content_type","text":"Called side-effect; erroring response expected content type.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_check_content_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the content type of a response — resp_check_content_type","text":"","code":"resp <- response(headers = list(`content-type` = \"application/json\")) resp_check_content_type(resp, \"application/json\") try(resp_check_content_type(resp, \"application/xml\")) #> Error in eval(expr, envir) :  #>   Unexpected content type \"application/json\". #> • Expecting type \"application/xml\"  # `types` can also specify multiple valid types resp_check_content_type(resp, c(\"application/xml\", \"application/json\"))"},{"path":"https://httr2.r-lib.org/dev/reference/resp_content_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract response content type and encoding — resp_content_type","title":"Extract response content type and encoding — resp_content_type","text":"resp_content_type() returns just type subtype Content-Type header. Content-Type provided; returns NA. Used resp_body_json(), resp_body_html(), resp_body_xml(). resp_encoding() returns likely character encoding text types, parsed charset parameter Content-Type header. header found, valid, charset parameter found, returns UTF-8. Used resp_body_string().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_content_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract response content type and encoding — resp_content_type","text":"","code":"resp_content_type(resp)  resp_encoding(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_content_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract response content type and encoding — resp_content_type","text":"resp httr2 response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_content_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract response content type and encoding — resp_content_type","text":"string. content type specified resp_content_type() return character NA; encoding specified, resp_encoding() return \"UTF-8\".","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_content_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract response content type and encoding — resp_content_type","text":"","code":"resp <- response(headers = \"Content-type: text/html; charset=utf-8\") resp |> resp_content_type() #> [1] \"text/html\" resp |> resp_encoding() #> [1] \"utf-8\"  # No Content-Type header resp <- response() resp |> resp_content_type() #> [1] NA resp |> resp_encoding() #> [1] \"UTF-8\""},{"path":"https://httr2.r-lib.org/dev/reference/resp_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract request date from response — resp_date","title":"Extract request date from response — resp_date","text":"responses contain request date Date header; provided server automatically added httr2.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract request date from response — resp_date","text":"","code":"resp_date(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract request date from response — resp_date","text":"resp httr2 response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract request date from response — resp_date","text":"POSIXct date-time.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract request date from response — resp_date","text":"","code":"resp <- response(headers = \"Date: Wed, 01 Jan 2020 09:23:15 UTC\") resp |> resp_date() #> [1] \"2020-01-01 09:23:15 UTC\"  # If server doesn't add header (unusual), you get the time the request # was created: resp <- response() resp |> resp_date() #> [1] \"2020-01-01 UTC\""},{"path":"https://httr2.r-lib.org/dev/reference/resp_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract headers from a response — resp_headers","title":"Extract headers from a response — resp_headers","text":"resp_headers() retrieves list headers. resp_header() retrieves single header. resp_header_exists() checks header present.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract headers from a response — resp_headers","text":"","code":"resp_headers(resp, filter = NULL)  resp_header(resp, header, default = NULL)  resp_header_exists(resp, header)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_headers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract headers from a response — resp_headers","text":"resp httr2 response object, created req_perform(). filter regular expression used filter header names. NULL, default, returns headers. header Header name (case insensitive) default Default value use header exist.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_headers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract headers from a response — resp_headers","text":"resp_headers() returns list. resp_header() returns string header exists NULL otherwise. resp_header_exists() returns TRUE FALSE.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_headers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract headers from a response — resp_headers","text":"","code":"resp <- request(\"https://httr2.r-lib.org\") |> req_perform() resp |> resp_headers() #> <httr2_headers> #> server: GitHub.com #> content-type: text/html; charset=utf-8 #> x-origin-cache: HIT #> last-modified: Thu, 27 Mar 2025 16:51:51 GMT #> access-control-allow-origin: * #> etag: W/\"67e58227-4b42\" #> expires: Fri, 04 Apr 2025 10:35:59 GMT #> cache-control: max-age=600 #> content-encoding: gzip #> x-proxy-cache: MISS #> x-github-request-id: 9D40:2BAAAA:3561B05:3C1DF4E:67EFB3B7 #> accept-ranges: bytes #> date: Fri, 04 Apr 2025 12:47:37 GMT #> via: 1.1 varnish #> age: 103 #> x-served-by: cache-iad-kcgs7200142-IAD #> x-cache: HIT #> x-cache-hits: 5 #> x-timer: S1743770858.570829,VS0,VE1 #> vary: Accept-Encoding #> x-fastly-request-id: c4ae3123ace491722a234e6892504c445037f33d #> content-length: 4746 resp |> resp_headers(\"x-\") #> <httr2_headers> #> x-origin-cache: HIT #> x-proxy-cache: MISS #> x-github-request-id: 9D40:2BAAAA:3561B05:3C1DF4E:67EFB3B7 #> x-served-by: cache-iad-kcgs7200142-IAD #> x-cache: HIT #> x-cache-hits: 5 #> x-timer: S1743770858.570829,VS0,VE1 #> x-fastly-request-id: c4ae3123ace491722a234e6892504c445037f33d  resp |> resp_header_exists(\"server\") #> [1] TRUE resp |> resp_header(\"server\") #> [1] \"GitHub.com\" # Headers are case insensitive resp |> resp_header(\"SERVER\") #> [1] \"GitHub.com\"  # Returns NULL if header doesn't exist resp |> resp_header(\"this-header-doesnt-exist\") #> NULL"},{"path":"https://httr2.r-lib.org/dev/reference/resp_link_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse link URL from a response — resp_link_url","title":"Parse link URL from a response — resp_link_url","text":"Parses URLs Link header defined RFC 8288.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_link_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse link URL from a response — resp_link_url","text":"","code":"resp_link_url(resp, rel)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_link_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse link URL from a response — resp_link_url","text":"resp httr2 response object, created req_perform(). rel \"link relation type\" value retrieve URL.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_link_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse link URL from a response — resp_link_url","text":"Either string providing URL, specified rel exists, NULL .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_link_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse link URL from a response — resp_link_url","text":"","code":"# Simulate response from GitHub code search resp <- response(headers = paste0(\"Link: \",   '<https://api.github.com/search/code?q=addClass+user%3Amozilla&page=2>; rel=\"next\",',   '<https://api.github.com/search/code?q=addClass+user%3Amozilla&page=34>; rel=\"last\"' ))  resp_link_url(resp, \"next\") #> [1] \"https://api.github.com/search/code?q=addClass+user%3Amozilla&page=2\" resp_link_url(resp, \"last\") #> [1] \"https://api.github.com/search/code?q=addClass+user%3Amozilla&page=34\" resp_link_url(resp, \"prev\") #> NULL"},{"path":"https://httr2.r-lib.org/dev/reference/resp_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the raw response — resp_raw","title":"Show the raw response — resp_raw","text":"function reconstructs HTTP message httr2 received server. unlikely exactly byte--byte identical (servers compress least body, HTTP/2 can also compress headers), conveys information.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the raw response — resp_raw","text":"","code":"resp_raw(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the raw response — resp_raw","text":"resp httr2 response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the raw response — resp_raw","text":"resp (invisibly).","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the raw response — resp_raw","text":"","code":"resp <- request(example_url()) |>   req_url_path(\"/json\") |>   req_perform() resp |> resp_raw() #> HTTP/1.1 200 OK #> Date: Fri, 04 Apr 2025 12:47:37 GMT #> Content-Type: application/json #> Content-Length: 407 #> ETag: \"de760e6d\" #>  #> { #>   \"firstName\": \"John\", #>   \"lastName\": \"Smith\", #>   \"isAlive\": true, #>   \"age\": 27, #>   \"address\": { #>     \"streetAddress\": \"21 2nd Street\", #>     \"city\": \"New York\", #>     \"state\": \"NY\", #>     \"postalCode\": \"10021-3100\" #>   }, #>   \"phoneNumbers\": [ #>     { #>       \"type\": \"home\", #>       \"number\": \"212 555-1234\" #>     }, #>     { #>       \"type\": \"office\", #>       \"number\": \"646 555-4567\" #>     } #>   ], #>   \"children\": [], #>   \"spouse\": null #> } #>"},{"path":"https://httr2.r-lib.org/dev/reference/resp_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the request responsible for a response — resp_request","title":"Find the request responsible for a response — resp_request","text":"make debugging easier, httr2 includes request used generate every response. can use function access .","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the request responsible for a response — resp_request","text":"","code":"resp_request(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the request responsible for a response — resp_request","text":"resp httr2 response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the request responsible for a response — resp_request","text":"","code":"req <- request(example_url()) resp <- req_perform(req) resp_request(resp) #> <httr2_request> #> GET http://127.0.0.1:34617/ #> Body: empty"},{"path":"https://httr2.r-lib.org/dev/reference/resp_retry_after.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract wait time from a response — resp_retry_after","title":"Extract wait time from a response — resp_retry_after","text":"Computes many seconds wait retrying request inspecting Retry-header. parses forms (absolute relative) returns number seconds wait. heading found, return NA.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_retry_after.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract wait time from a response — resp_retry_after","text":"","code":"resp_retry_after(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_retry_after.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract wait time from a response — resp_retry_after","text":"resp httr2 response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_retry_after.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract wait time from a response — resp_retry_after","text":"Scalar double giving number seconds wait retrying request.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_retry_after.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract wait time from a response — resp_retry_after","text":"","code":"resp <- response(headers = \"Retry-After: 30\") resp |> resp_retry_after() #> [1] 30  resp <- response(headers = \"Retry-After: Mon, 20 Sep 2025 21:44:05 UTC\") resp |> resp_retry_after() #> [1] 180567845"},{"path":"https://httr2.r-lib.org/dev/reference/resp_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract HTTP status from response — resp_status","title":"Extract HTTP status from response — resp_status","text":"resp_status() retrieves numeric HTTP status code resp_status_desc() retrieves brief textual description. resp_is_error() returns TRUE status code represents error (.e. 4xx 5xx status). resp_check_status() turns HTTPs errors R errors. functions mostly internal use cases ever see 200 response: 1xx handled internally curl. 3xx redirects automatically followed. see deliberately suppressed redirects req |> req_options(followlocation = FALSE). 4xx client 5xx server errors automatically turned R errors. can stop turned R errors req_error(), e.g. req |> req_error(is_error = ~ FALSE).","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract HTTP status from response — resp_status","text":"","code":"resp_status(resp)  resp_status_desc(resp)  resp_is_error(resp)  resp_check_status(resp, info = NULL, error_call = caller_env())"},{"path":"https://httr2.r-lib.org/dev/reference/resp_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract HTTP status from response — resp_status","text":"resp httr2 response object, created req_perform(). info character vector additional information include error message. Passed rlang::abort(). error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract HTTP status from response — resp_status","text":"resp_status() returns scalar integer resp_status_desc() returns string resp_is_error() returns TRUE FALSE resp_check_status() invisibly returns response ok; otherwise throws error class httr2_http_{status}.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract HTTP status from response — resp_status","text":"","code":"# An HTTP status code you're unlikely to see in the wild: resp <- response(418) resp |> resp_is_error() #> [1] TRUE resp |> resp_status() #> [1] 418 resp |> resp_status_desc() #> [1] \"I'm a teapot\""},{"path":"https://httr2.r-lib.org/dev/reference/resp_stream_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a streaming body a chunk at a time — resp_stream_raw","title":"Read a streaming body a chunk at a time — resp_stream_raw","text":"resp_stream_raw() retrieves bytes (raw vectors). resp_stream_lines() retrieves lines text (character vectors). resp_stream_sse() retrieves single server-sent event. resp_stream_aws() retrieves single event AWS stream (.e. mime type `application/vnd.amazon.eventstream“). Use resp_stream_is_complete() determine data waiting stream.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_stream_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a streaming body a chunk at a time — resp_stream_raw","text":"","code":"resp_stream_raw(resp, kb = 32)  resp_stream_lines(resp, lines = 1, max_size = Inf, warn = TRUE)  resp_stream_sse(resp, max_size = Inf)  resp_stream_aws(resp, max_size = Inf)  # S3 method for class 'httr2_response' close(con, ...)  resp_stream_is_complete(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_stream_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a streaming body a chunk at a time — resp_stream_raw","text":"resp, con streaming response created req_perform_connection(). kb many kilobytes (1024 bytes) data read. lines maximum number lines return . max_size maximum number bytes buffer; number bytes exceeded without line/event boundary, error thrown. warn Like readLines(): warn connection ends without final EOL. ... used; included compatibility generic.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_stream_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a streaming body a chunk at a time — resp_stream_raw","text":"resp_stream_raw(): raw vector. resp_stream_lines(): character vector. resp_stream_sse(): list components type, data, id. type, data, id always strings; data id may empty strings. resp_stream_aws(): list components headers body. body automatically parsed event contents :content-type header application/json. resp_stream_sse() resp_stream_aws() return NULL signal end stream reached , nonblocking mode, event currently available.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_stream_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a streaming body a chunk at a time — resp_stream_raw","text":"","code":"req <- request(example_url()) |>   req_template(\"GET /stream/:n\", n = 5)  con <- req |> req_perform_connection() while (!resp_stream_is_complete(con)) {   lines <- con |> resp_stream_lines(2)   cat(length(lines), \" lines received\\n\", sep = \"\") } #> 2 lines received #> 2 lines received #> 1 lines received close(con)  # You can also see what's happening by setting verbosity con <- req |> req_perform_connection(verbosity = 2) #> -> GET /stream/5 HTTP/1.1 #> -> Host: 127.0.0.1:34617 #> -> User-Agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #> -> Accept: */* #> -> Accept-Encoding: deflate, gzip, br, zstd #> ->  #> <- HTTP/1.1 200 OK #> <- Date: Fri, 04 Apr 2025 12:47:38 GMT #> <- Content-Type: application/json #> <- Transfer-Encoding: chunked #> <-  while (!resp_stream_is_complete(con)) {   lines <- con |> resp_stream_lines(2) } #> << {\"url\":\"http://127.0.0.1:34617/stream/5\",\"args\":{},\"headers\":{\"Host\":\"127.0.0.1:34617\",\"User-Agent\":\"httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0\",\"Accept\":\"*/*\",\"Accept-Encoding\":\"deflate, gzip, br, zstd\"},\"origin\":\"127.0.0.1\",\"id\":0}<< {\"url\":\"http://127.0.0.1:34617/stream/5\",\"args\":{},\"headers\":{\"Host\":\"127.0.0.1:34617\",\"User-Agent\":\"httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0\",\"Accept\":\"*/*\",\"Accept-Encoding\":\"deflate, gzip, br, zstd\"},\"origin\":\"127.0.0.1\",\"id\":1} #> << {\"url\":\"http://127.0.0.1:34617/stream/5\",\"args\":{},\"headers\":{\"Host\":\"127.0.0.1:34617\",\"User-Agent\":\"httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0\",\"Accept\":\"*/*\",\"Accept-Encoding\":\"deflate, gzip, br, zstd\"},\"origin\":\"127.0.0.1\",\"id\":2}<< {\"url\":\"http://127.0.0.1:34617/stream/5\",\"args\":{},\"headers\":{\"Host\":\"127.0.0.1:34617\",\"User-Agent\":\"httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0\",\"Accept\":\"*/*\",\"Accept-Encoding\":\"deflate, gzip, br, zstd\"},\"origin\":\"127.0.0.1\",\"id\":3} #> << {\"url\":\"http://127.0.0.1:34617/stream/5\",\"args\":{},\"headers\":{\"Host\":\"127.0.0.1:34617\",\"User-Agent\":\"httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0\",\"Accept\":\"*/*\",\"Accept-Encoding\":\"deflate, gzip, br, zstd\"},\"origin\":\"127.0.0.1\",\"id\":4} close(con)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URL/components from the response — resp_url","title":"Get URL/components from the response — resp_url","text":"resp_url() returns complete url. resp_url_path() returns path component. resp_url_query() returns single query component. resp_url_queries() returns query component named list.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URL/components from the response — resp_url","text":"","code":"resp_url(resp)  resp_url_path(resp)  resp_url_query(resp, name, default = NULL)  resp_url_queries(resp)"},{"path":"https://httr2.r-lib.org/dev/reference/resp_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URL/components from the response — resp_url","text":"resp httr2 response object, created req_perform(). name Query parameter name. default Default value use query parameter exist.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resp_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get URL/components from the response — resp_url","text":"","code":"resp <- request(example_url()) |>   req_url_path(\"/get?hello=world\") |>   req_perform()  resp |> resp_url() #> [1] \"http://127.0.0.1:34617/get?hello=world\" resp |> resp_url_path() #> [1] \"/get\" resp |> resp_url_queries() #> $hello #> [1] \"world\" #>  resp |> resp_url_query(\"hello\") #> [1] \"world\""},{"path":"https://httr2.r-lib.org/dev/reference/response.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new HTTP response — response","title":"Create a new HTTP response — response","text":"Generally, need call function directly; get real HTTP response calling req_perform() friends. function provided primarily testing, place describe key components response. response() creates generic response; response_json() creates response JSON body, automatically adding correct Content-Type header.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new HTTP response — response","text":"","code":"response(   status_code = 200,   url = \"https://example.com\",   method = \"GET\",   headers = list(),   body = raw() )  response_json(   status_code = 200,   url = \"https://example.com\",   method = \"GET\",   headers = list(),   body = list() )"},{"path":"https://httr2.r-lib.org/dev/reference/response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new HTTP response — response","text":"status_code HTTP status code. Must single integer. url URL response came ; might URL request redirects. method HTTP method used retrieve response. headers HTTP headers. Can supplied raw character vector parsed using standard rules, named list. body Response, , contained response body. response_json(), R data structure serialize JSON.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new HTTP response — response","text":"HTTP response: S3 list class httr2_response.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new HTTP response — response","text":"","code":"response() #> <httr2_response> #> GET https://example.com #> Status: 200 OK #> Body: None response(404, method = \"POST\") #> <httr2_response> #> POST https://example.com #> Status: 404 Not Found #> Body: None response(headers = c(\"Content-Type: text/html\", \"Content-Length: 300\")) #> <httr2_response> #> GET https://example.com #> Status: 200 OK #> Content-Type: text/html #> Body: None"},{"path":"https://httr2.r-lib.org/dev/reference/resps_successes.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for working with lists of responses — resps_successes","title":"Tools for working with lists of responses — resps_successes","text":"function provide basic toolkit operating lists responses possibly errors, returned req_perform_parallel(), req_perform_sequential() req_perform_iterative(). resps_successes() returns list successful responses. resps_failures() returns list failed responses (.e. errors). resps_requests() returns list requests corresponds request. resps_data() returns data single vector data frame. requires vctrs package installed.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resps_successes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for working with lists of responses — resps_successes","text":"","code":"resps_successes(resps)  resps_failures(resps)  resps_requests(resps)  resps_data(resps, resp_data)"},{"path":"https://httr2.r-lib.org/dev/reference/resps_successes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for working with lists of responses — resps_successes","text":"resps list responses (possibly including errors). resp_data function takes response (resp) returns data found inside response vector data frame. NB: using resp_body_raw(), likely want wrap output list() avoid combining bodies single raw vector, e.g. resps |> resps_data(\\(resp) list(resp_body_raw(resp))).","code":""},{"path":"https://httr2.r-lib.org/dev/reference/resps_successes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools for working with lists of responses — resps_successes","text":"","code":"reqs <- list(   request(example_url()) |> req_url_path(\"/ip\"),   request(example_url()) |> req_url_path(\"/user-agent\"),   request(example_url()) |> req_template(\"/status/:status\", status = 404),   request(\"INVALID\") ) resps <- req_perform_parallel(reqs, on_error = \"continue\")  # find successful responses resps |> resps_successes() #> [[1]] #> <httr2_response> #> GET http://127.0.0.1:34617/ip #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (27 bytes) #>  #> [[2]] #> <httr2_response> #> GET http://127.0.0.1:34617/user-agent #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (65 bytes) #>   # collect all their data resps |>   resps_successes() |>   resps_data(\\(resp) resp_body_json(resp)) #> $origin #> [1] \"127.0.0.1\" #>  #> $`user-agent` #> [1] \"httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0\" #>   # find requests corresponding to failure responses resps |>   resps_failures() |>   resps_requests() #> [[1]] #> <httr2_request> #> GET http://127.0.0.1:34617/status/404 #> Body: empty #>  #> [[2]] #> <httr2_request> #> GET INVALID #> Body: empty #>"},{"path":"https://httr2.r-lib.org/dev/reference/secrets.html","id":null,"dir":"Reference","previous_headings":"","what":"Secret management — secrets","title":"Secret management — secrets","text":"httr2 provides handful functions designed working confidential data. useful testing packages use httr2 often requires confidential data needs available testing, available package users. secret_encrypt() secret_decrypt() work individual strings secret_encrypt_file() encrypts file place secret_decrypt_file() decrypts file temporary location. secret_write_rds() secret_read_rds() work .rds files secret_make_key() generates random string use key. secret_has_key() returns TRUE key available; can use examples vignettes want evaluate CI, CRAN/package users. look key environment variable. used inside testthat, automatically testthat::skip() test env var found. (Outside testthat, error env var found.)","code":""},{"path":"https://httr2.r-lib.org/dev/reference/secrets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Secret management — secrets","text":"","code":"secret_make_key()  secret_encrypt(x, key)  secret_decrypt(encrypted, key)  secret_write_rds(x, path, key)  secret_read_rds(path, key)  secret_decrypt_file(path, key, envir = parent.frame())  secret_encrypt_file(path, key)  secret_has_key(key)"},{"path":"https://httr2.r-lib.org/dev/reference/secrets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Secret management — secrets","text":"x Object encrypt. Must string secret_encrypt(). key Encryption key; password allows \"lock\" \"unlock\" secret. easiest way specify name environment variable. Alternatively, already base64url encoded string, can wrap (), can pass raw vector directly. encrypted String decrypt path Path file encrypted file read write. secret_write_rds() secret_read_rds() .rds file. envir decrypted file automatically deleted environment exits. need set argument want pass unencrypted file another function.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/secrets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Secret management — secrets","text":"secret_decrypt() secret_encrypt() return strings. secret_decrypt_file() returns path temporary file; secret_encrypt_file() encrypts file place. secret_write_rds() returns x invisibly; secret_read_rds() returns saved object. secret_make_key() returns string class AsIs. secret_has_key() returns TRUE FALSE.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/secrets.html","id":"basic-workflow","dir":"Reference","previous_headings":"","what":"Basic workflow","title":"Secret management — secrets","text":"Use secret_make_key() generate password. Make available env var (e.g. {MYPACKAGE}_KEY) adding line .Renviron. Encrypt strings secret_encrypt(), files secret_encrypt_file(), data secret_write_rds(), setting key = \"{MYPACKAGE}_KEY\". tests, decrypt data secret_decrypt(), secret_decrypt_file(), secret_read_rds() match encrypt . push code CI server, already \"work\" functions automatically skip tests {MYPACKAGE}_KEY env var set. make tests actually run, need set env var using whatever tool CI system provides setting env vars. Make sure carefully inspect test output check skips actually gone away.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/secrets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Secret management — secrets","text":"","code":"key <- secret_make_key()  path <- tempfile() secret_write_rds(mtcars, path, key = key) secret_read_rds(path, key) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4 #>                     carb #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Datsun 710             1 #> Hornet 4 Drive         1 #> Hornet Sportabout      2 #> Valiant                1 #> Duster 360             4 #> Merc 240D              2 #> Merc 230               2 #> Merc 280               4 #> Merc 280C              4 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1 #> Toyota Corona          1 #> Dodge Challenger       2 #> AMC Javelin            2 #> Camaro Z28             4 #> Pontiac Firebird       2 #> Fiat X1-9              1 #> Porsche 914-2          2 #> Lotus Europa           2 #> Ford Pantera L         4 #> Ferrari Dino           6 #> Maserati Bora          8 #> Volvo 142E             2  # While you can manage the key explicitly in a variable, it's much # easier to store in an environment variable. In real life, you should # NEVER use `Sys.setenv()` to create this env var because you will # also store the secret in your `.Rhistory`. Instead add it to your # .Renviron using `usethis::edit_r_environ()` or similar. Sys.setenv(\"MY_KEY\" = key)  x <- secret_encrypt(\"This is a secret\", \"MY_KEY\") x #> [1] \"lNoygJpbVlf1JSGb0LGGebsnSbEZwUiPLABmrxI5sn0\" secret_decrypt(x, \"MY_KEY\") #> [1] \"This is a secret\""},{"path":"https://httr2.r-lib.org/dev/reference/signal_total_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal total number pages — signal_total_pages","title":"Signal total number pages — signal_total_pages","text":"called within next_req callback function used req_perform_iterative()","code":""},{"path":"https://httr2.r-lib.org/dev/reference/signal_total_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal total number pages — signal_total_pages","text":"","code":"signal_total_pages(n)"},{"path":"https://httr2.r-lib.org/dev/reference/signal_total_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal total number pages — signal_total_pages","text":"n Total number pages.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/throttle_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Display internal throttle status — throttle_status","title":"Display internal throttle status — throttle_status","text":"Sometimes useful debugging.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/throttle_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display internal throttle status — throttle_status","text":"","code":"throttle_status()"},{"path":"https://httr2.r-lib.org/dev/reference/throttle_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display internal throttle status — throttle_status","text":"data frame three columns: realm. Number tokens remaining bucket. Time to_wait seconds next token.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a string from a URL object — url_build","title":"Build a string from a URL object — url_build","text":"inverse url_parse(), taking parsed URL object turning back string.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a string from a URL object — url_build","text":"","code":"url_build(url)"},{"path":"https://httr2.r-lib.org/dev/reference/url_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a string from a URL object — url_build","text":"url URL object created url_parse.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/url_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a URL — url_modify","title":"Modify a URL — url_modify","text":"Use url_modify() modify component URL, url_modify_relative() modify relative URL, url_modify_query() modify individual query parameters. url_modify(), components specified function call left ; components set NULL removed, values updated. Note removing scheme hostname create relative URL.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a URL — url_modify","text":"","code":"url_modify(   url,   scheme = as_is,   hostname = as_is,   username = as_is,   password = as_is,   port = as_is,   path = as_is,   query = as_is,   fragment = as_is )  url_modify_relative(url, relative_url)  url_modify_query(   .url,   ...,   .multi = c(\"error\", \"comma\", \"pipe\", \"explode\"),   .space = c(\"percent\", \"form\") )"},{"path":"https://httr2.r-lib.org/dev/reference/url_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a URL — url_modify","text":"url, .url string parsed URL. scheme scheme, typically either http https. hostname hostname, e.g., www.google.com posit.co. username, password Username password embed URL. generally recommended needed legacy applications. port integer port number. path path, e.g., /search. Paths must start /, automatically added omitted. query Either query string named list query components. fragment fragment, e.g., #section-1. relative_url relative URL append base URL. ... <dynamic-dots> Name-value pairs define query parameters. value must either atomic vector NULL (removes corresponding parameters). want opt escaping, wrap strings (). .multi Controls happens value vector: \"error\", default, throws error. \"comma\", separates values ,, e.g. ?x=1,2. \"pipe\", separates values |, e.g. ?x=1|2. \"explode\", turns element parameter, e.g. ?x=1&x=2 none options work needs, can instead supply function takes character vector argument values returns single string. .space spaces query params escaped? default, \"percent\", uses standard percent encoding (.e. %20), can opt-\"form\" encoding, uses + instead.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify a URL — url_modify","text":"object type url.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/url_modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a URL — url_modify","text":"","code":"url_modify(\"http://hadley.nz\", path = \"about\") #> [1] \"http://hadley.nz/about\" url_modify(\"http://hadley.nz\", scheme = \"https\") #> [1] \"https://hadley.nz/\" url_modify(\"http://hadley.nz/abc\", path = \"/cde\") #> [1] \"http://hadley.nz/cde\" url_modify(\"http://hadley.nz/abc\", path = \"\") #> [1] \"http://hadley.nz/\" url_modify(\"http://hadley.nz?a=1\", query = \"b=2\") #> [1] \"http://hadley.nz/?b=2\" url_modify(\"http://hadley.nz?a=1\", query = list(c = 3)) #> [1] \"http://hadley.nz/?c=3\"  url_modify_query(\"http://hadley.nz?a=1&b=2\", c = 3) #> [1] \"http://hadley.nz/?a=1&b=2&c=3\" url_modify_query(\"http://hadley.nz?a=1&b=2\", b = NULL) #> [1] \"http://hadley.nz/?a=1\" url_modify_query(\"http://hadley.nz?a=1&b=2\", a = 100) #> [1] \"http://hadley.nz/?b=2&a=100\"  url_modify_relative(\"http://hadley.nz/a/b/c.html\", \"/d.html\") #> [1] \"http://hadley.nz/d.html\" url_modify_relative(\"http://hadley.nz/a/b/c.html\", \"d.html\") #> [1] \"http://hadley.nz/a/b/d.html\" url_modify_relative(\"http://hadley.nz/a/b/c.html\", \"../d.html\") #> [1] \"http://hadley.nz/a/d.html\""},{"path":"https://httr2.r-lib.org/dev/reference/url_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a URL into its component pieces — url_parse","title":"Parse a URL into its component pieces — url_parse","text":"url_parse() parses URL component parts, powered curl::curl_parse_url(). parsing algorithm follows specifications detailed RFC 3986.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a URL into its component pieces — url_parse","text":"","code":"url_parse(url, base_url = NULL)"},{"path":"https://httr2.r-lib.org/dev/reference/url_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a URL into its component pieces — url_parse","text":"url string containing URL parse. base_url Use parent, url relative URL.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a URL into its component pieces — url_parse","text":"S3 object class httr2_url following components: scheme, hostname, username, password, port, path, query, fragment.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/dev/reference/url_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a URL into its component pieces — url_parse","text":"","code":"url_parse(\"http://google.com/\") #> <httr2_url> http://google.com/ #> • scheme: http #> • hostname: google.com #> • path: / url_parse(\"http://google.com:80/\") #> <httr2_url> http://google.com:80/ #> • scheme: http #> • hostname: google.com #> • port: 80 #> • path: / url_parse(\"http://google.com:80/?a=1&b=2\") #> <httr2_url> http://google.com:80/?a=1&b=2 #> • scheme: http #> • hostname: google.com #> • port: 80 #> • path: / #> • query: #>   • a: 1 #>   • b: 2 url_parse(\"http://username@google.com:80/path;test?a=1&b=2#40\") #> <httr2_url> http://username@google.com:80/path;test?a=1&b=2#40 #> • scheme: http #> • hostname: google.com #> • username: username #> • port: 80 #> • path: /path;test #> • query: #>   • a: 1 #>   • b: 2 #> • fragment: 40  # You can parse a relative URL if you also provide a base url url_parse(\"foo\", \"http://google.com/bar/\") #> <httr2_url> http://google.com/bar/foo #> • scheme: http #> • hostname: google.com #> • path: /bar/foo url_parse(\"..\", \"http://google.com/bar/\") #> <httr2_url> http://google.com/ #> • scheme: http #> • hostname: google.com #> • path: /"},{"path":"https://httr2.r-lib.org/dev/reference/url_query_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse query parameters and/or build a string — url_query_parse","title":"Parse query parameters and/or build a string — url_query_parse","text":"url_query_parse() parses query string named list; url_query_build() builds query string named list.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_query_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse query parameters and/or build a string — url_query_parse","text":"","code":"url_query_parse(query)  url_query_build(query, .multi = c(\"error\", \"comma\", \"pipe\", \"explode\"))"},{"path":"https://httr2.r-lib.org/dev/reference/url_query_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse query parameters and/or build a string — url_query_parse","text":"query string, parsing; named list building. .multi Controls happens value vector: \"error\", default, throws error. \"comma\", separates values ,, e.g. ?x=1,2. \"pipe\", separates values |, e.g. ?x=1|2. \"explode\", turns element parameter, e.g. ?x=1&x=2 none options work needs, can instead supply function takes character vector argument values returns single string.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/url_query_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse query parameters and/or build a string — url_query_parse","text":"","code":"str(url_query_parse(\"a=1&b=2\")) #> List of 2 #>  $ a: chr \"1\" #>  $ b: chr \"2\"  url_query_build(list(x = 1, y = \"z\")) #> [1] \"x=1&y=z\" url_query_build(list(x = 1, y = 1:2), .multi = \"explode\") #> [1] \"x=1&y=1&y=2\""},{"path":"https://httr2.r-lib.org/dev/reference/with_mocked_responses.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily mock requests — with_mocked_responses","title":"Temporarily mock requests — with_mocked_responses","text":"Mocking allows selectively temporarily replace response typically receive request code. primarily used testing.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/with_mocked_responses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily mock requests — with_mocked_responses","text":"","code":"with_mocked_responses(mock, code)  local_mocked_responses(mock, env = caller_env())"},{"path":"https://httr2.r-lib.org/dev/reference/with_mocked_responses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily mock requests — with_mocked_responses","text":"mock function, list, NULL. NULL disables mocking returns httr2 regular operation. list responses returned sequence. responses used , return 503 server errors. maximum flexibility, can supply function takes single argument, req, returns either NULL (want handle request) response (). code Code execute temporary environment. env Environment use scoping changes.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/with_mocked_responses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily mock requests — with_mocked_responses","text":"with_mock() returns result evaluating code.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/with_mocked_responses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily mock requests — with_mocked_responses","text":"","code":"# This function should perform a response against google.com: google <- function() {   request(\"http://google.com\") |>     req_perform() }  # But I can use a mock to instead return my own made up response: my_mock <- function(req) {   response(status_code = 403) } try(with_mock(my_mock, google())) #> Error : `with_mock()` was deprecated in httr2 1.1.0 and is now defunct. #> ℹ Please use `with_mocked_responses()` instead."},{"path":"https://httr2.r-lib.org/dev/reference/with_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set verbosity for all requests — with_verbosity","title":"Temporarily set verbosity for all requests — with_verbosity","text":"with_verbosity() local_verbosity() useful debugging httr2 code buried deep inside another package, allow change verbosity even access request. functions work temporarily setting httr2_verbosity option. can also control verbosity setting HTTR2_VERBOSITY environment variable. lower precedence option, can easily changed outside R.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/with_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set verbosity for all requests — with_verbosity","text":"","code":"with_verbosity(code, verbosity = 1)  local_verbosity(verbosity, env = caller_env())"},{"path":"https://httr2.r-lib.org/dev/reference/with_verbosity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily set verbosity for all requests — with_verbosity","text":"code Code execture verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly. env Environment use scoping changes.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/with_verbosity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily set verbosity for all requests — with_verbosity","text":"with_verbosity() returns result evaluating code. local_verbosity() called side-effect invisibly returns previous value option.","code":""},{"path":"https://httr2.r-lib.org/dev/reference/with_verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily set verbosity for all requests — with_verbosity","text":"","code":"fun <- function() {   request(\"https://httr2.r-lib.org\") |> req_perform() } with_verbosity(fun()) #> -> GET / HTTP/2 #> -> Host: httr2.r-lib.org #> -> User-Agent: httr2/1.1.2.9000 r-curl/6.2.2 libcurl/8.5.0 #> -> Accept: */* #> -> Accept-Encoding: deflate, gzip, br, zstd #> ->  #> <- HTTP/2 200  #> <- server: GitHub.com #> <- content-type: text/html; charset=utf-8 #> <- x-origin-cache: HIT #> <- last-modified: Thu, 27 Mar 2025 16:51:51 GMT #> <- access-control-allow-origin: * #> <- etag: W/\"67e58227-4b42\" #> <- expires: Fri, 04 Apr 2025 10:35:59 GMT #> <- cache-control: max-age=600 #> <- content-encoding: gzip #> <- x-proxy-cache: MISS #> <- x-github-request-id: 9D40:2BAAAA:3561B05:3C1DF4E:67EFB3B7 #> <- accept-ranges: bytes #> <- date: Fri, 04 Apr 2025 12:47:41 GMT #> <- via: 1.1 varnish #> <- age: 108 #> <- x-served-by: cache-iad-kcgs7200142-IAD #> <- x-cache: HIT #> <- x-cache-hits: 6 #> <- x-timer: S1743770862.851988,VS0,VE0 #> <- vary: Accept-Encoding #> <- x-fastly-request-id: 97a56fbbad935fd01d2297b6ce53b37986651c9d #> <- content-length: 4746 #> <-  #> <httr2_response> #> GET https://httr2.r-lib.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (19266 bytes)  fun <- function() {   local_verbosity(2)   # someotherpackage::fun() }"},{"path":[]},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-112","dir":"Changelog","previous_headings":"","what":"httr2 1.1.2","title":"httr2 1.1.2","text":"CRAN release: 2025-03-26 req_headers() carefully checks input types (#707). Fix AWS request signing due argument 'cache' missing error (#706, @jcheng5).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-111","dir":"Changelog","previous_headings":"","what":"httr2 1.1.1","title":"httr2 1.1.1","text":"CRAN release: 2025-03-08","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"new-features-1-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"httr2 1.1.1","text":"req_perform_parallel() lifts many previous restrictions. supports simplified versions req_throttle() req_retry(), can refresh OAuth tokens, checks cache /request. (#681). Default verbosity can controlled HTTR2_VERBOSITY environment variable (#687). local_verbosity() matches existing with_verbosity() allows local control verbosity (#687). req_dry_run() req_verbose() display compressed correctly (#91, #656) automatically prettify JSON bodies (#668). can suppress prettification options(httr2_pretty_json = FALSE) (#668). req_throttle() implements new “token bucket” algorithm maintains average rate limits allowing bursts higher request rates.","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"httr2 1.1.1","text":"aws_v4_signature() correctly processes URLs containing query parameters (@jeffreyzuber, #645). oauth_client() oauth_token() implement improved print methods bulleted lists, similar httr2 objects, oauth_client() custom auth functions longer produces errors (#648). req_dry_run() omits headers vary tests can prettify JSON output. req_headers() automatically redacts Authorization headers (#649) correctly implements case-insensitive modification existing headers (#682). req_headers_redacted() now supports dynamic dots (#647). req_oauth_auth_code() longer adds trailing “/” characters properly formed redirect_uri values (@jonthegeek, #646). req_perform_connection() produces helpful error messages requests fail networking level. req_perform_parallel(pool) now deprecated favour new max_active argument (#681). req_user_agent() memoizes default user agent improve performance, computing version numbers relatively slow (300 µs). resp_link_url() respects case insensitivity header names (@DavidRLovell, #655). resp_stream_sse() automatically retrieves next event current event contains data, returns data single string (#650). str() correctly redacts redacted headers (#682).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-110","dir":"Changelog","previous_headings":"","what":"httr2 1.1.0","title":"httr2 1.1.0","text":"CRAN release: 2025-01-18","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"lifecycle-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Lifecycle changes","title":"httr2 1.1.0","text":"req_perform_stream() superseded favor req_perform_connection(), longer experimental (#625). with_mock() local_mock() defunct removed next release.","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"httr2 1.1.0","text":"is_online() wraps curl::has_internet(), making easy tell ’re currently online (#512). req_headers_redacted() makes easier redact sensitive headers (#561). req_retry() implements “circuit breaking”, immediatelys error multiple failures server (e.g. server ) (#370). req_url_relative() navigates relative URL (#449). resp_request() returns request associated response; can useful debugging (#604). resp_stream_is_complete() checks data remains stream (#559). url_modify(), url_modify_query(), url_modify_relative() modify URLs (#464); url_query_parse() url_query_build() parse build query strings (#425).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"httr2 1.1.0","text":"OAuth response parsing errors now dedicated httr2_oauth_parse error class includes original response object (@atheriel, #596). curl_translate() converts cookie headers req_cookies_set() (#431) JSON data req_body_json_modify() calls (#258). print.request() escapes {} headers (#586). req_auth_aws_v4() formats AWS Authorization header correctly (#627). req_retry() defaults max_tries = 2 nethier max_tries max_seconds set. want disable retries, set max_tries = 1. req_perform_connection() gains verbosity argument, useful understanding exactly data streamed back (#599). req_perform_promise() also gains verbosity argument. req_url_query() can control spaces encoded .space (#432). resp_link_url() handles multiple Link headers (#587). resp_stream_sse() warn recieves partial event. url_parse() parses relative URLs new base_url argument (#449) uses faster correct curl::curl_parse_url() (#577).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-107","dir":"Changelog","previous_headings":"","what":"httr2 1.0.7","title":"httr2 1.0.7","text":"CRAN release: 2024-11-26 req_perform_promise() upgraded use event-driven async based waiting efficiently curl socket activity (#579). New req_oauth_token_exchange() oauth_flow_token_exchange() functions implement OAuth token exchange protocol RFC 8693 (@atheriel, #460).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-106","dir":"Changelog","previous_headings":"","what":"httr2 1.0.6","title":"httr2 1.0.6","text":"CRAN release: 2024-11-04 Fix stochastic test failure, particularly CRAN (#572) New oauth_cache_clear() exported end point clear OAuth cache. New req_auth_aws_v4() signs request using AWS’s special format (#562, #566). req_cache() longer retrieves anything GET requests cache. New resp_stream_aws() retrieve AWS’s special streaming format. thanks https://github.com/lifion/lifion-aws-event-stream/ simple reference implementation.","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-105","dir":"Changelog","previous_headings":"","what":"httr2 1.0.5","title":"httr2 1.0.5","text":"CRAN release: 2024-09-26 req_perform_parallel() req_perform_promise() now correctly set method body (#549).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-104","dir":"Changelog","previous_headings":"","what":"httr2 1.0.4","title":"httr2 1.0.4","text":"CRAN release: 2024-09-13 req_body_file() now works files >64kb (#524) longer leaks connection response doesn’t complete succesfully (#534). req_body_*() now give informative error attempt change body type (#451). req_cache() now re-caches response body hasn’t modified headers changed (#442). also works better req_perform() sets path (#442). New req_cookie_set() allows set client side cookies (#369). req_perform() longer displays progress bar sleeping tests. can override behaviour setting option httr2_progress. req_perform_iterative() longer experimental. New req_perform_connection() working streaming data. Unlike req_perform_stream() uses callbacks, req_perform_connection() returns regular response object connection body. Unlike req_perform_stream() supports req_retry() (@jcheng5, #519). req_retry() longer treates low-level HTTP failures way transient errors default. can return previous behaviour retry_on_error = TRUE. resp_body_html() resp_body_xml() now work req_perform() given path (#448). New resp_stream_bytes(), resp_stream_lines(), resp_stream_sse() streaming chunk connection response (#519).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-103","dir":"Changelog","previous_headings":"","what":"httr2 1.0.3","title":"httr2 1.0.3","text":"CRAN release: 2024-08-22 jwt_encode_hmac() now calls correct underlying function jose::jwt_encode_hmac() correct default size parameter value (@denskh, #508). req_cache() now prunes cache checking given key exists, eliminating occassional error reading invalid RDS file. also longer tests existence later reads cache, avoiding potential race conditions. New req_perform_promise() creates promises::promise request can run background (#501, @gergness). req_perform_parallel() now respects error handling req_error().","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-102","dir":"Changelog","previous_headings":"","what":"httr2 1.0.2","title":"httr2 1.0.2","text":"CRAN release: 2024-07-16 req_body_file() now opens connection request actually needs data. particular, makes work better req_perform_parallel() (#487). req_cache() longer fails rds files somehow corrupted now defaults debug argument httr2_cache_debug option make easier debug caching buried people’s code (#486). req_oauth_password() now asks password (#498). req_perform_parallel() now works correctly req_cache() (#447) now works downloading 0 byte files (#478) req_perform_stream() longer applies callback unsuccessful responses, instead creating regular response. also now sets last_request() last_response() (#479). req_url_query() now allows opt escaping multi-value parameters (#404).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-101","dir":"Changelog","previous_headings":"","what":"httr2 1.0.1","title":"httr2 1.0.1","text":"CRAN release: 2024-04-01 req_perform_stream() gains round = c(\"byte\", \"line\") argument control stream rounded (#437). req_retry() gives clearer error returns wrong type value (#385). req_template() now works bare : template uses “uri” style (#389). req_timeout() now resets value connecttimeout set curl. ensures can use req_timeout() increase connection timeout past 10s (#395). url_parse() considerably faster thanks performance optimisations discussion @DyfanJones (#429).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-100","dir":"Changelog","previous_headings":"","what":"httr2 1.0.0","title":"httr2 1.0.0","text":"CRAN release: 2023-11-14","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"function-lifecycle-1-0-0","dir":"Changelog","previous_headings":"","what":"Function lifecycle","title":"httr2 1.0.0","text":"local_mock() with_mock() deprecated favour local_mocked_responses() with_mocked_responses() (#301). multi_req_perform() deprecated favour req_perform_parallel(). req_stream() deprecated favour req_perform_stream() (#314). oauth_flow_auth_code() deprecates host_name port arguments favour using redirect_uri. also deprecates host_ip since seems unlikely changing ever useful. oauth_flow_auth_code_listen() now takes single redirect_uri argument instead separate host_ip port arguments. breaking change don’t expect anyone call function directly (confirmed GitHub search) made change without deprecation. req_body_form() req_body_multipart() now require data ...; longer accept single list compatibility 0.1.0 API.","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"multiple-requests-1-0-0","dir":"Changelog","previous_headings":"","what":"Multiple requests","title":"httr2 1.0.0","text":"New req_perform_sequential() performs known set requests sequentially. interface similar req_perform_parallel() limitations, cost slower (#361). New req_perform_iterative() performs multiple requests, request derived previous response (@mgirlich, #8). req_perform_parallel() replaces multi_req_perform() match new naming scheme (#314). gains progress argument. req_perform_iterative(), req_perform_parallel(), req_perform_sequential() share new error handling strategy. default, errors bubbled , can choose alternative strategy on_error argument (#372). new family functions resps_successes(), resps_failures(), resps_requests() resps_data() make easier work lists responses (#357). Behind scenes, work request now stored response (error) object (#357). resp_body_json() resp_body_xml() now cache parsed values can use repeatedly without worrying performance cost. supports design req_perform_iterative() avoiding need carefully pass around parsed object.","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"oauth-features-1-0-0","dir":"Changelog","previous_headings":"","what":"OAuth features","title":"httr2 1.0.0","text":"new vignette(\"oauth\") gives many details OAuth works use httr2 (#234), OAuth docs overhauled make clear use req_oauth_*(), oauth_*() (#330). using OAuth token refresh token, refresh token expired, httr2 now re-run entire flow get new token (#349). New oauth_cache_path() returns path httr2 uses caching OAuth tokens. Additionally, can now change cache location setting HTTR2_OAUTH_CACHE env var. now obvious user, httr2 now informs user whenever token cached. oauth_flow_auth_code() gains redirect_uri argument rather deriving URL automatically host_name port (#248). uses argument automatically choose strategy use get auth code, either launching temporary web server , new, allowing manually enter details help custom JS/HTML page hosted elsewhere, copying pasting URL ’re redirected (@fh-mthomson, #326). temporary web server now also respects path component redirect_uri, API needs specific path (#149). New oauth_token_cached() allows get OAuth token still taking advantage httr2’s caching auto-renewal features. expert use (#328).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"other-new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"Other new features","title":"httr2 1.0.0","text":"@mgirlich now httr2 contributor recognition many contributions. req_cache() gains max_n, max_size, max_age arguments automatically prune cache. default, cache stay 1 GB (#207). New req_body_json_modify() allows iteratively modify JSON body request. New req_cookie_preserve() lets use file share cookies across requests (#223). New req_progress() adds progress bar long downloads uploads (#20). New resp_check_content_type() check response content types (#190). resp_body_json() friends give better errors Content-Type header present response (#284). New resp_has_body() returns TRUE FALSE depending whether response body (#205). New resp_url(), resp_url_path(), resp_url_queries() resp_url_query() extract various part response url (#57). req_url_query() gains .multi parameter controls happens supply multiple values vector. default continue error can use .multi = \"comma\" separate commas, \"pipe\" separate |, \"explode\" generate one parameter value (e.g. ?=1&=2) (#350). New secret_encrypt_file() secret_decrypt_file() encrypting decrypting files (#237).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"httr2 1.0.0","text":"httr2 examples now run R 4.2 later can use base pipe lambda syntax (#345). OAuth errors containing url now correctly display URL (instead string “uri”). curl_translate() now uses base pipe, produces escapes single quotes raw strings case double quotes can’t used (@mgirlich, #264). gains argument simplify_headers removes common unimportant headers, like Sec-Fetch-Dest sec-ch-ua-mobile (@mgirlich, #256). also parses query components url (@mgirlich, #259) works multiline commands clipboard (@mgirlich, #254). local_mocked_responses() with_mocked_responses() now accept list responses returned sequence. also now correctly trigger errors mocked response represents HTTP failure (#252). oauth_flow_refresh() now warns, errors, refresh_token changes, making little easier use manual workflows (#186). obfuscated() values now display original call printed. req_body_json() gains custom content type argument respects custom content-type set header (@mgirlich, #189). req_cache() now combine headers new response headers cached response. particular, fixes resp_body_json/xml/html() cached responses (@mgirlich, #277). req_perform() now throws error class httr2_failure/httr2_error request fails, error now captures curl error parent. request succeeds, response HTTP error, error now also super class httr2_error. means errors thrown httr2 now inherit httr2_error class. See new docs ?req_error() details. req_perform()’s progress bar can suppressed setting options(httr2_progress = FALSE) (#251). Progress bars displayed waiting time pass now tell ’re waiting (#206). req_oauth_bearer_jwt() now includes claim cache key (#192). req_oauth_device() now takes auth_url parameter making usable (#331, @taerwin). req_url_query() gains .multi parameter controls happens supply multiple values vector. default continue error can use .multi = \"comma\" separate commas, \"pipe\" separate |, \"explode\" generate one parameter value (e.g. ?=1&=2) (#350).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-023","dir":"Changelog","previous_headings":"","what":"httr2 0.2.3","title":"httr2 0.2.3","text":"CRAN release: 2023-05-08 New example_url() launch local server, making tests examples robust. New throttle_status() make little easier verify ’s happening throttling. req_oauth_refresh() now respects refresh_token caching (@mgirlich, #178). req_perform() now always sleeps request, rather . also gains error_call argument communicates clearly error occurred (@mgirlich, #187). req_url_path() req_url_path_append() can now handle NULL empty ... elements ... can also length > 1 (@mgirlich, #177). sys_sleep() (used req_retry() req_throttle()) gains progress bar (#202).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-022","dir":"Changelog","previous_headings":"","what":"httr2 0.2.2","title":"httr2 0.2.2","text":"CRAN release: 2022-09-25 curl_translate() can now handle curl copied Chrome developer tools (@mgirlich, #161). req_oauth_*() can now refresh OAuth tokens. One, two, even times! (@jennybc, #166) req_oauth_device() can now work non-interactive environments, intendend (@flahn, #170) req_oauth_refresh() oauth_flow_refresh() now use envvar HTTR2_REFRESH_TOKEN, HTTR_REFRESH_TOKEN (@jennybc, #169). req_proxy() now uses appropriate authentication option (@jl5000). req_url_query() can now opt escaping () (@boshek, #152). Can now print responses content type empty string (@mgirlich, #163).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-021","dir":"Changelog","previous_headings":"","what":"httr2 0.2.1","title":"httr2 0.2.1","text":"CRAN release: 2022-05-10 “Wrapping APIs” now article, vignette. req_template() now appends path instead replacing (@jchrom, #133)","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-020","dir":"Changelog","previous_headings":"","what":"httr2 0.2.0","title":"httr2 0.2.0","text":"CRAN release: 2022-04-28","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"httr2 0.2.0","text":"req_body_form(), req_body_multipart(), req_url_query() now support multiple arguments name (#97, #107). req_body_form(), req_body_multipart(), now match interface req_url_query(), taking name-value pairs .... Supplying single list() now deprecated removed future version. req_body_json() now overrides existing JSON body, rather attempting merge previous value (#95, #115). Implement req_proxy() (owenjonesuob, #77).","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"httr2 0.2.0","text":"httr_path class renamed httr2_path correctly match package name (#99). oauth_flow_device() gains PKCE support (@flahn, #92), interactive flow little user friendly. req_error() can now correct force successful HTTP statuses fail (#98). req_headers() now override Content-Type set req_body_*() (#116). req_throttle() correctly sets throttle rate (@jchrom, #101). req_url_query() never uses scientific notation queries (#93). req_perform() now respects httr::with_verbose() (#85). response() now defaults body raw(0) consistency real responses (#100). req_stream() longer throws error non 200 http status codes (@DMerch, #137)","code":""},{"path":"https://httr2.r-lib.org/dev/news/index.html","id":"httr2-011","dir":"Changelog","previous_headings":"","what":"httr2 0.1.1","title":"httr2 0.1.1","text":"CRAN release: 2021-09-28 Fix R CMD check failures CRAN Added NEWS.md file track changes package.","code":""}]
