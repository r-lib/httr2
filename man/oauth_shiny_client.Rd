% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oauth-shiny-client.R
\name{oauth_shiny_client}
\alias{oauth_shiny_client}
\title{Create an OAuth Shiny Client}
\usage{
oauth_shiny_client(
  name,
  id,
  secret = NULL,
  auth_url = NULL,
  token_url = NULL,
  redirect_uri = oauth_redirect_uri(),
  openid_issuer_url = NULL,
  openid_claims = c("aud", "sub", "name", "email"),
  scope = NULL,
  auth_params = list(),
  token_params = list(),
  pkce = TRUE,
  postprocess_token = NULL,
  auth_provider = FALSE,
  auth_provider_primary = FALSE,
  auth_set_custom_claim = NULL,
  login_button = NULL,
  login_button_dark = NULL,
  login_path = paste0("login/", name),
  logout_path = paste0("logout/", name),
  client_cookie_name = paste0("oauth_app_", name, "_token"),
  access_token_validity = 0
)
}
\arguments{
\item{name}{The name of the OAuth Provider. Used to provide an easy reference
to the client. Also used to derive the name of the login-endpoint (e.g.
/login/github), client cookie name (e.g. oauth_app_github_token). Should be
a valid URI path.}

\item{id}{Client identifier}

\item{secret}{Client secret. For most apps, this is technically confidential
so in principle you should avoid storing it in source code. However, many
APIs require it in order to provide a user friendly authentication
experience, and the risks of including it are usually low. To make things a
little safer, I recommend using \code{\link[=obfuscate]{obfuscate()}} when recording the client
secret in public code.}

\item{auth_url}{Authorization url. If the client does not follow the OpenID
specification you'll need to discover this by reading the documentation.
Otherwise, you could supply the \code{openid_issuer_url}. Supplying an
\code{auth_url} will take precedence over any urls discovered by
\code{openid_issuer_url}.}

\item{token_url}{Url to retrieve an access token.}

\item{redirect_uri}{URL to redirect back to after authorization is complete.
Often this must be registered with the API in advance.}

\item{openid_issuer_url}{If the provider follows the openid specification,
provide the issuer url. Do not include the path to the configuration
endpoint (also known as Well-Known Configuration Endpoint). Examples
include
\verb{https://login.microsoftonline.com/TENANT/v2.0}
(microsoft) and \verb{https://accounts.google.com/} (google).}

\item{openid_claims}{Character vector of claims to be retrieved if
\code{openid_issuer_url} is not NULL. These claims will be included in the app
token to easily retrieve user information in shiny. Defaults to \code{name},
\code{email}, \code{aud} and \code{sub}. See Section 5.1. Standard Claims of
\href{https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims}{OpenID spec}.}

\item{scope}{Scopes to be requested from the resource owner.}

\item{auth_params}{A list containing additional parameters passed to
\code{\link[=oauth_flow_auth_code_url]{oauth_flow_auth_code_url()}}.}

\item{token_params}{List containing additional parameters passed to the
\code{token_url}.}

\item{pkce}{Use "Proof Key for Code Exchange"? This adds an extra layer of
security and should always be used if supported by the server.}

\item{postprocess_token}{A custom function for postprocessing the token, e.g.
token exchange or verification}

\item{auth_provider}{Whether the OAuth client should be used to restrict
access to the shiny application. An OAuth App could often have multiple
auth providers (e.g. Apple, and Google), sometimes described as "social
login". If set to \code{TRUE}, this will generate login buttons for the client
when the standard UIs for login (\code{oauth_shiny_ui_login()}) and logout are
used. If set to \code{FALSE}, the OAuth Client is not used to restrict access to
the app, but could still be used to perform actions against the OAuth
provider when the user has succesfully logged in to the application.}

\item{auth_provider_primary}{If the user has a preferred provider, this
could be used to automatically redirect the user to follow the OAuth dance
without displaying a UI for logigng in. A typical scenario could be an
enterprise application where the a non authorized user is always redirected
to login at a single identity provider (e.g. Microsoft Entra). Set
\code{login_ui} to NULL to enable direct login}

\item{auth_set_custom_claim}{If the OAuth provider does not follow the
openid specification, a custom function could be used to set the audience
(aud) and subject (sub) for the app token. This function should take
\code{client} and \code{token} as input arguments. See
\code{oauth_shiny_client_github_set_custom_claim()}}

\item{login_button}{A button typically generated by
\code{oauth_shiny_ui_button} which can be used in the login UI}

\item{login_button_dark}{A button typically generated by
\code{oauth_shiny_ui_button} which can be used in the login UI (dark
theme)}

\item{login_path}{Endpoint where users will be redirected to login for the
client, e.g. \verb{/login/github}. Typically not overridden.}

\item{logout_path}{Endpoint where users will be redirected to login for the
client, e.g. \verb{/logout/github} Typically not overridden.}

\item{client_cookie_name}{The name of the client cookie which contains the
access_token (and potentially id_token) for the client}

\item{access_token_validity}{Validity duration for the client cookie which
contains the access token. If you want to make the client token available
in the application, set this to a value > \code{0}, e.g. \code{3600}. If set to
\code{NULL} the cookie will have the same validity as the token if specified and
will be unavailable if the token does not contain an expiry time (e.g.
Github). Regardless of the value set, the cookie will not expire later than
the token itself expires}
}
\description{
The OAuth Shiny Client object allows you to use an oauth client in a shiny
application and supports two scenarios: (i) Restricting access to a shiny
application and (ii) performing actions on behalf of the user (behind an open
or restricted shiny application). If the OAuth Provider follows the \href{https://openid.net/specs/openid-connect-core-1_0.html}{OpenID specification} , the
\code{openid_issuer_url} can be used to retrieve endpoints and keys to perform and
verify the OAuth dance. If the provider does not support OpenID (e.g.
Github), then the user needs to figure this out on its own and provide
necessary endpoints (e.g \code{auth_url} and \code{token_url}) themselves.
}
