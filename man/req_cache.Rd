% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/req-cache.R
\name{req_cache}
\alias{req_cache}
\title{Automatically cache requests}
\usage{
req_cache(req, path, use_on_error = FALSE, debug = FALSE)
}
\arguments{
\item{req}{A \link{request}.}

\item{path}{Path to cache directory}

\item{use_on_error}{If the request errors, and there's a cache response,
should \code{req_perform()} return that instead of generating an error?}

\item{debug}{When \code{TRUE} will emit useful messages telling you about
cache hits and misses. This can be helpful to understand whether or
not caching is actually doing anything for your use case.}
}
\description{
Use \code{req_perform()} to automatically cache HTTP requests. Most API requests
are not cacheable, but when possible (often when downloading larger files)
it can make a big difference. \code{req_cache()} caches responses to GET requests
that have status code 200 and at least one of the standard caching headers
(e.g. \code{Expires}, \code{Etag}, \code{Last-Modified}, \code{Cache-Control}), unless caching
has been expressly prohibited with \code{Cache-Control: no-store}. Typically,
a request will still be sent to the server to check that the cached value
is still up-to-date, but it will not need to re-download the body value.

To learn more about HTTP caching, I recommend the MDN article
\href{https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching}{HTTP caching}.
}
