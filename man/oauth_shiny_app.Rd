% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oauth-shiny-app.R
\name{oauth_shiny_app}
\alias{oauth_shiny_app}
\title{Integrate OAuth into a Shiny Application}
\usage{
oauth_shiny_app(
  app,
  client_config,
  require_auth = TRUE,
  key = oauth_shiny_app_passphrase(),
  dark_mode = FALSE,
  login_ui = oauth_shiny_ui_login(client_config, dark_mode),
  logout_ui = oauth_shiny_ui_logout(client_config, dark_mode),
  logout_path = "logout",
  logout_on_token_expiry = FALSE,
  cookie_name = "oauth_app_token",
  token_validity = 3600
)
}
\arguments{
\item{app}{A Shiny app object, typically created using \code{\link[shiny:shinyApp]{shiny::shinyApp()}}.
For improved readability, consider using the pipe operator, e.g.,
\code{shinyApp() |> oauth_shiny_app(...)}.}

\item{client_config}{An \code{oauth_shiny_config} object that specifies the OAuth
clients to be used. This object should include configurations for one or
more OAuth providers, created with \verb{oauth_shiny_client_*()} functions.}

\item{require_auth}{Logical; determines whether user authentication is
mandatory before accessing the app. Set to \code{TRUE} to enforce login, which
will redirect unauthenticated users to the OAuth login UI. Set to \code{FALSE}
for a public app where login is optional but token retrieval is still
supported. Defaults to \code{TRUE}.}

\item{key}{The encryption key used to secure cookies containing
authentication information. This key should be a long, randomly generated
string. By default, it is retrieved from the environment variable
\code{HTTR2_OAUTH_PASSPHRASE}. You can generate a suitable key using
\code{httr2::secret_make_key()} or a similar method.}

\item{dark_mode}{Logical; specifies whether the login and logout user
interfaces should use a dark mode theme. If \code{TRUE}, the interfaces will
adopt a dark color scheme. Defaults to \code{FALSE}.}

\item{login_ui}{The user interface displayed to users for login when
\code{require_auth = TRUE}. By default, this is automatically generated based on
the OAuth clients specified in \code{client_config}. You can provide a custom UI
if desired.}

\item{logout_ui}{The user interface shown to users for logout. By default,
this UI is automatically generated based on the OAuth clients in
\code{client_config}. You can provide a custom UI to override the default
behavior.}

\item{logout_path}{The URL path used to handle user logout requests. Users
will be redirected to this path to log out of the application. Defaults to
\code{'logout'}. If you wish to customize the logout path, specify it here.}

\item{logout_on_token_expiry}{Logical; determines if users should be
automatically logged out when the app token expires. If \code{TRUE}, the user
session will end when the token expires. If \code{FALSE}, the session remains
active until the user manually logs out or refreshes the browser. Defaults
to \code{FALSE}.}

\item{cookie_name}{The name of the cookie used to store authentication
information. This cookie holds the app token containing user claims.
Defaults to \code{'oauth_app_token'}. You can specify a different name if
needed.}

\item{token_validity}{Numeric; the duration in seconds for which the user's
session remains valid. This controls how long the JWT or access token is
valid before it expires. Defaults to \code{3600} seconds (1 hour).}
}
\description{
This function integrates OAuth-based authentication into Shiny
applications, managing the full OAuth authorization code flow including
token acquisition, storage, and session management. It supports two main
scenarios:
\enumerate{
\item \strong{Enforcing User Login}: Users must authenticate through an OAuth
provider before accessing the Shiny app. The login interface can be
automatically generated based on the \code{client_config} or provided via the
\code{login_ui} parameter. Alternatively, you can bypass the login UI and
redirect users directly to the OAuth client by setting \code{login_ui} to \code{NULL}
and configuring a primary authentication provider in the \code{client_config}.
This setup is useful in enterprise environments where seamless integration
with single sign-on (SSO) solutions is desired.
\item \strong{Retrieving Tokens on Behalf of Users}: This functionality allows for
obtaining OAuth tokens from users, which can be used for accessing external
APIs. This can be applied whether or not user login is enforced. When
\code{require_auth = TRUE}, users must log in, and the tokens can be used in the
context of their authenticated session. When \code{require_auth = FALSE}, tokens
are retrieved from users in a public app setting where login is optional or
not enforced. In both scenarios, tokens are stored securely in encrypted
cookies and can be retrieved using \code{oauth_shiny_get_access_token()}.
}

The function manages OAuth by setting two types of cookies:
\itemize{
\item \strong{App Cookie}: Contains a JSON Web Token (JWT) that holds user claims
such as \code{name}, \code{email}, \code{sub}, and \code{aud}. This cookie is used to maintain
the user's session in the Shiny app. It can be retrieved in a shiny app
using \code{oauth_shiny_get_app_token()}
\item \strong{Access Token Cookie}: If the \code{access_token_validity} for a client is
greater than 0, an additional cookie is created to store the OAuth access
token. This cookie is encrypted and can be retrieved using
\code{oauth_shiny_get_access_token()}.
}
}
